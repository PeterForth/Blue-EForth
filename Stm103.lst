


ARM Macro Assembler    Page 1 


    1 00000000         ;*******************************************************
                       *********************
    2 00000000         ;  modified to run on stm32f103  dke
    3 00000000         ; STM32eForth version 7.20
    4 00000000         ; Chen-Hanson Ting,  July 2014
    5 00000000         ; Subroutine Threaded Forth Model
    6 00000000         ; Adapted to STM32F407-Discovery Board
    7 00000000         ; Assembled by Keil uVision 5.10
    8 00000000         ; Version 4.03
    9 00000000         ; Direct Threaded Forth Model
   10 00000000         ; Derived from 80386 eForth versin 4.02
   11 00000000         ; and Chien-ja Wu's ARM7 eForth version 1.01
   12 00000000         
   13 00000000         ; Subroutine thread (Branch-Link) model
   14 00000000         ;   Register assignments
   15 00000000         ; IP   R0  ;scratch
   16 00000000         ; SP   R1 
   17 00000000         ; RP   R2 
   18 00000000         ; UP   R3 
   19 00000000         ; WP   R4 ;scratch 
   20 00000000         ; TOS   R5 
   21 00000000         ; XP   R6  ;scratch
   22 00000000         ; YP   R7 ;scratch
   23 00000000         ;   All Forth words are called by 
   24 00000000         ; BL.W addr
   25 00000000         ;   All low level code words are terminaled by
   26 00000000         ; BX LR  (_NEXT)
   27 00000000         ;   All high level Forth words start with
   28 00000000         ; STRFD RP!,{LR} (_NEST)
   29 00000000         ;   All high level Forth words end with
   30 00000000         ; LDRFD RP!,{PC} (_UNNEST)
   31 00000000         ;   Top of data stack is cached in R5
   32 00000000         ;   USART1 at 115200 baud, 8 data bits, 1 stop bit, no p
                       arity
   33 00000000         ; TX on PB6 and RX on PB7.
   34 00000000         
   35 00000000         ; Version 5.02, 09oct04cht
   36 00000000         ; fOR ADuC702x from Analog Devices
   37 00000000         ; Version 6.01, 10apr08cht a
   38 00000000         ; ALIGN 4 to at91sam7x256
   39 00000000         ; Tested on Olimax SAM7-EX256 Board with LCD display
   40 00000000         ; Running under uVision3 RealView from Keil
   41 00000000         ; Version 7.01, 29jun14cht
   42 00000000         ; Ported to STM32F407-Discovery Board, under uVision 5.1
                       0
   43 00000000         ; ALIGN 4ed to eForth 2 Model
   44 00000000         ; Assembled to flash memory and executed therefrom.
   45 00000000         ; Version 7.10, 30jun14cht
   46 00000000         ; Flash memory mapped to Page 0 where codes are executed
                       
   47 00000000         ; Version 7.20, 02jul14cht
   48 00000000         ; Irreducible Complexity
   49 00000000         ; Code copied from flash to RAM, RAM mapped to Page 0.
   50 00000000         ; TURNKEY saves current application from RAM to flash.
   51 00000000         
   52 00000000         ;*******************************************************
                       *********************
   53 00000000         ; Minimal boot-up code
   54 00000000         



ARM Macro Assembler    Page 2 


   55 00000000                 AREA             RESET, CODE, READONLY
   56 00000000                 THUMB
   57 00000000                 EXPORT           __Vectors   ; linker needs it
   58 00000000                 EXPORT           Reset_Handler ; linker needs it
                                                            
   59 00000000         
   60 00000000         
   61 00000000         
   62 00000000         ; Vector Table has only Reset Vector
   63 00000000 00000000 
                       __Vectors
                               DCD              0X00000000  ; NO CCM ON F105
   64 00000004         ; DCD 0x10000400  ; Top of hardware stack in CCM
   65 00000004 08000000        DCD              Reset_Handler+0x08000000 
                                                            ; Reset Handler
   66 00000008         
   67 00000008                 ENTRY
   68 00000008         _INTRTBL
   69 00000008 FFFFFFFF        DCD              -1
   70 0000000C FFFFFFFF        DCD              -1
   71 00000010 FFFFFFFF        DCD              -1
   72 00000014 FFFFFFFF        DCD              -1
   73 00000018 FFFFFFFF        DCD              -1
   74 0000001C FFFFFFFF        DCD              -1
   75 00000020 FFFFFFFF        DCD              -1
   76 00000024 FFFFFFFF        DCD              -1
   77 00000028 FFFFFFFF        DCD              -1
   78 0000002C FFFFFFFF        DCD              -1
   79 00000030 FFFFFFFF        DCD              -1
   80 00000034 FFFFFFFF        DCD              -1
   81 00000038 FFFFFFFF        DCD              -1
   82 0000003C FFFFFFFF        DCD              -1
   83 00000040 FFFFFFFF        DCD              -1
   84 00000044 FFFFFFFF        DCD              -1
   85 00000048 FFFFFFFF        DCD              -1
   86 0000004C FFFFFFFF        DCD              -1
   87 00000050 FFFFFFFF        DCD              -1
   88 00000054 FFFFFFFF        DCD              -1
   89 00000058 FFFFFFFF        DCD              -1
   90 0000005C FFFFFFFF        DCD              -1
   91 00000060 FFFFFFFF        DCD              -1
   92 00000064 FFFFFFFF        DCD              -1
   93 00000068 FFFFFFFF        DCD              -1
   94 0000006C FFFFFFFF        DCD              -1
   95 00000070 FFFFFFFF        DCD              -1
   96 00000074 FFFFFFFF        DCD              -1
   97 00000078 FFFFFFFF        DCD              -1
   98 0000007C FFFFFFFF        DCD              -1
   99 00000080 FFFFFFFF        DCD              -1
  100 00000084 FFFFFFFF        DCD              -1
  101 00000088 FFFFFFFF        DCD              -1
  102 0000008C FFFFFFFF        DCD              -1
  103 00000090 FFFFFFFF        DCD              -1
  104 00000094 FFFFFFFF        DCD              -1
  105 00000098 FFFFFFFF        DCD              -1
  106 0000009C FFFFFFFF        DCD              -1
  107 000000A0 FFFFFFFF        DCD              -1
  108 000000A4 FFFFFFFF        DCD              -1
  109 000000A8 FFFFFFFF        DCD              -1



ARM Macro Assembler    Page 3 


  110 000000AC FFFFFFFF        DCD              -1
  111 000000B0 FFFFFFFF        DCD              -1
  112 000000B4 FFFFFFFF        DCD              -1
  113 000000B8 FFFFFFFF        DCD              -1
  114 000000BC FFFFFFFF        DCD              -1
  115 000000C0 FFFFFFFF        DCD              -1
  116 000000C4 FFFFFFFF        DCD              -1
  117 000000C8 FFFFFFFF        DCD              -1
  118 000000CC FFFFFFFF        DCD              -1
  119 000000D0 FFFFFFFF        DCD              -1
  120 000000D4 FFFFFFFF        DCD              -1
  121 000000D8 FFFFFFFF        DCD              -1
  122 000000DC FFFFFFFF        DCD              -1
  123 000000E0 FFFFFFFF        DCD              -1
  124 000000E4 FFFFFFFF        DCD              -1
  125 000000E8 FFFFFFFF        DCD              -1
  126 000000EC FFFFFFFF        DCD              -1
  127 000000F0 FFFFFFFF        DCD              -1
  128 000000F4 FFFFFFFF        DCD              -1
  129 000000F8 FFFFFFFF        DCD              -1
  130 000000FC FFFFFFFF        DCD              -1
  131 00000100 FFFFFFFF        DCD              -1
  132 00000104 FFFFFFFF        DCD              -1
  133 00000108 FFFFFFFF        DCD              -1
  134 0000010C FFFFFFFF        DCD              -1
  135 00000110 FFFFFFFF        DCD              -1
  136 00000114 FFFFFFFF        DCD              -1
  137 00000118 FFFFFFFF        DCD              -1
  138 0000011C FFFFFFFF        DCD              -1
  139 00000120 FFFFFFFF        DCD              -1
  140 00000124 FFFFFFFF        DCD              -1
  141 00000128 FFFFFFFF        DCD              -1
  142 0000012C FFFFFFFF        DCD              -1
  143 00000130 FFFFFFFF        DCD              -1
  144 00000134 FFFFFFFF        DCD              -1
  145 00000138 FFFFFFFF        DCD              -1
  146 0000013C FFFFFFFF        DCD              -1
  147 00000140 FFFFFFFF        DCD              -1
  148 00000144 FFFFFFFF        DCD              -1
  149 00000148 FFFFFFFF        DCD              -1
  150 0000014C FFFFFFFF        DCD              -1
  151 00000150         
  152 00000150         
  153 00000150                 ALIGN            4
  154 00000150         Reset_Handler
  155 00000150 F000 F814       BL               InitDevices ; RCC, GPIOs, USART
                                                            1
  156 00000154 F001 FBAE       BL               UNLOCK      ; unlock flash memo
                                                            ry
  157 00000158 F000 F802       BL               REMAP       ; remap RAM to page
                                                             0
  158 0000015C 4811            LDR              R0,=COLD-MAPOFFSET 
                                                            ; start Forth
  159 0000015E 4700            BX               R0
  160 00000160                 ALIGN            4
  161 00000160         
  162 00000160         ;*******************************************************
                       *********************
  163 00000160         ; Remap eForth to execute from RAM



ARM Macro Assembler    Page 4 


  164 00000160         ;
  165 00000160         ; Copy eForth from flash to RAM
  166 00000160         REMAP
  167 00000160 F04F 6000       mov              r0,#0x8000000
  168 00000164 F04F 5100       mov              r1,#0x20000000
  169 00000168 F501 42A0  ZZ     add              r2,r1,#0x8000
  170 0000016C         REMAP1
  171 0000016C 4291            cmp              r1, r2
  172 0000016E BF3C F850 
              3B04             ldrcc            r3, [r0], #4
  173 00000174 F841 3B04       strcc            r3, [r1], #4
  174 00000178 D3F8            bcc              REMAP1
  175 0000017A         
  176 0000017A         ; Remap RAM to page 0
  177 0000017A         ; movw R0,#0x3800  ; SYSCFG register
  178 0000017A         ; movt R0,#0x4001
  179 0000017A         ; mov R1,#3
  180 0000017A         ; str R1,[R0,#0]  ; map RAM to page 0
  181 0000017A 4770            bx               lr
  182 0000017C                 ALIGN            4
  183 0000017C         
  184 0000017C         ;*******************************************************
                       *********************
  185 0000017C         ; Here are devices used by eForth
  186 0000017C 40021000 
                       RCC     EQU              0x40021000  ; 0x40023800
  187 0000017C 40010800 
                       GPIOA   EQU              0X40010800
  188 0000017C 40010C00 
                       GPIOB   EQU              0x40010C00  ; 0x40020400
  189 0000017C 40011000 
                       GPIOC   EQU              0x40011000
  190 0000017C         ; GPIOD EQU 0x40020C00
  191 0000017C 40013800 
                       USART1  EQU              0x40013800
  192 0000017C 40010000 
                       AFIO    EQU              0X40010000
  193 0000017C         ; OLD Assumes system running from 16 MHz, HSI (Normal at
                        Reset)
  194 0000017C         ; Assumes system running from 8 MHz, HSI (Normal at Rese
                       t)
  195 0000017C         ; USART1 PB6 TX and PB7 RX; this works.
  196 0000017C         
  197 0000017C         InitDevices
  198 0000017C         ; init Reset Clock Control RCC registers
  199 0000017C 480A            ldr              r0, =RCC    ; RCC
  200 0000017E 6981            ldr              r1, [r0, #0x18] ; RCC_AHB2ENR
  201 00000180 F244 071C       mov              r7, #0x401c
  202 00000184 EA41 0107       orr              r1, r7
  203 00000188 6181            str              r1, [r0, #0x18]
  204 0000018A         ; init GPIOA
  205 0000018A 4808            ldr              r0, =GPIOA  ; GPIOA
  206 0000018C 6841            ldr              r1, [r0, #0x04] ; GPIOx_MODER
  207 0000018E F441 6194       orr              r1, #0x04A0 ; =AF Mode
  208 00000192 6041            str              r1, [r0, #0x04]
  209 00000194         ; init USART1
  210 00000194 4806            ldr              r0, =USART1 ; USART1
  211 00000196         ; movw r1, #0x0200C ; enable USART TE RE NO PARITY
  212 00000196 F243 410C       movw             r1, #0x0340C ; enable USART TE 



ARM Macro Assembler    Page 5 


                                                            RE EVEN PARITY LIKE
                                                             BOOT
  213 0000019A 8181            strh             r1, [r0, #12] ; +12 USART_CR1 =
                                                             0x2000
  214 0000019C         ; movs r1, #139  ; 16MHz/8.6875 (139, 0x8B) == 115200
  215 0000019C F240 018F       movw             r1, #143    ; 8MHz/56000 (143, 
                                                            0x8B) == 56000 FOR 
                                                            F105
  216 000001A0 8101            strh             r1, [r0, #8] ;  +8 USART_BR
  217 000001A2         ; lets see if it sends anything 
  218 000001A2         ;    movw    r1, #0x41 ; letter A 
  219 000001A2         ; strh   r1, [r0, #4 ]
  220 000001A2         ;  Yes, now working
  221 000001A2         ; Configure PD12-15 as output with push-pull 
  222 000001A2         ; ldr r0, =GPIOD  ; GPIOD
  223 000001A2         ; mov r1, #0x55000000 ; output
  224 000001A2         ; str r1, [r0, #0x00]
  225 000001A2         ; mov r1, #0xF000  ; set PD12-15, turn on LEDs
  226 000001A2         ; str r1, [r0, #0x14]
  227 000001A2         
  228 000001A2 4770            bx               lr
  229 000001A4                 ALIGN            4
  230 000001A4 20000000 
              40021000 
              40010800 
              40013800         LTORG
  231 000001B4         
  232 000001B4         ;*******************************************************
                       *********************
  233 000001B4         ; Version control
  234 000001B4         
  235 000001B4 00000007 
                       VER     EQU              0x07        ;major release vers
                                                            ion
  236 000001B4 00000021 
                       EXT     EQU              0x21        ;minor extension
  237 000001B4         
  238 000001B4         ; Constants
  239 000001B4         
  240 000001B4 00000000 
                       RAMOFFSET
                               EQU              0x00000000  ;absolute
  241 000001B4 E0000000 
                       MAPOFFSET
                               EQU              0xE0000000  ;absolute
  242 000001B4         ;RAMOFFSET  EQU 0x20000000 ;remap
  243 000001B4         ;MAPOFFSET  EQU 0x08000000 ;remap
  244 000001B4         
  245 000001B4 00000040 
                       COMPO   EQU              0x040       ;lexicon compile on
                                                            ly 
  246 000001B4 00000080 
                       IMEDD   EQU              0x080       ;lexicon immediate 
                                                            bit
  247 000001B4 FFFFFF1F 
                       MASKK   EQU              0x0FFFFFF1F ;lexicon bit mask, 
                                                            allowed for Chineze
                                                             character
  248 000001B4         



ARM Macro Assembler    Page 6 


  249 000001B4 00000004 
                       CELLL   EQU              4           ;size of a cell
  250 000001B4 00000010 
                       BASEE   EQU              16          ;default radix
  251 000001B4 00000008 
                       VOCSS   EQU              8           ;depth of vocabular
                                                            y stack
  252 000001B4         
  253 000001B4 00000008 
                       BKSPP   EQU              8           ;backspace
  254 000001B4 0000000A 
                       LF      EQU              10          ;line feed
  255 000001B4 0000000D 
                       CRR     EQU              13          ;carriage return
  256 000001B4 0000001B 
                       ERR     EQU              27          ;error escape
  257 000001B4 00000027 
                       TIC     EQU              39          ;tick
  258 000001B4         
  259 000001B4         ;; Memory allocation 0//code>--//--<sp//tib>--rp//user//
                       
  260 000001B4         ;; 0000 ;RAM memory mapped to Page 0, Reset vector
  261 000001B4         ;; 0008 ;init devices
  262 000001B4         ;; 00C0 ;initial system variables
  263 000001B4         ;; 0100 ;Forth dictionary
  264 000001B4         ;; 2300 ;top of dictionary, HERE
  265 000001B4         ;; 2304 ;WORD buffer
  266 000001B4         ;; 4E00 ;top of data stack
  267 000001B4         ;; 4E00 ;TIB terminal input buffer
  268 000001B4         ;; 4F00 ;top of return stack
  269 000001B4         ;; 4F00 ;system variables
  270 000001B4         ;; 8000000 ;flash, code image
  271 000001B4         ;; 1000400 ;top of hardware stack for interrupts
  272 000001B4         ;; 20000000 ;RAM
  273 000001B4         
  274 000001B4 20004E00 
                       SPP     EQU              0x20004E00-RAMOFFSET ;top of da
                                                            ta stack (SP0)
  275 000001B4 20004E00 
                       TIBB    EQU              0x20004E00-RAMOFFSET ;terminal 
                                                            input buffer (TIB)
  276 000001B4 20004F00 
                       RPP     EQU              0x20004F00-RAMOFFSET ;top of re
                                                            turn stack (RP0)
  277 000001B4 20004F00 
                       UPP     EQU              0x20004F00-RAMOFFSET ;start of 
                                                            user area (UP0)
  278 000001B4 20004C00 
                       DTOP    EQU              0x20004C00-RAMOFFSET ;start of 
                                                            usable RAM area (HE
                                                            RE)
  279 000001B4         
  280 000001B4         ;*******************************************************
                       *******************
  281 000001B4         ; Assemble inline direct threaded code ending.
  282 000001B4         
  283 000001B4                 MACRO
  284 000001B4                 _NEXT                        ;end low level word
                                                            



ARM Macro Assembler    Page 7 


  285 000001B4                 BX               LR
  286 000001B4                 MEND
  287 000001B4         
  288 000001B4                 MACRO
  289 000001B4                 _NEST                        ;start high level w
                                                            ord
  290 000001B4                 STMFD            R2!,{LR}
  291 000001B4                 MEND
  292 000001B4         
  293 000001B4                 MACRO
  294 000001B4                 _UNNEST                      ;end high level wor
                                                            d
  295 000001B4                 LDMFD            R2!,{PC}
  296 000001B4                 MEND
  297 000001B4         
  298 000001B4                 MACRO
  299 000001B4                 _DOLIT                       ;long literals
  300 000001B4                 BL               DOLIT
  301 000001B4                 MEND
  302 000001B4         
  303 000001B4                 MACRO
  304 000001B4                 _PUSH                        ;push R5 on data st
                                                            ack
  305 000001B4                 STR              R5,[R1,#-4]!
  306 000001B4                 MEND
  307 000001B4         
  308 000001B4                 MACRO
  309 000001B4                 _POP                         ;pop data stack to 
                                                            R5
  310 000001B4                 LDR              R5,[R1],#4
  311 000001B4                 MEND
  312 000001B4         
  313 000001B4         ;*******************************************************
                       *******************
  314 000001B4         ; COLD start moves the following to USER variables.
  315 000001B4         ; MUST BE IN SAME ORDER AS USER VARIABLES.
  316 000001B4         
  317 000001B4                 ALIGN            4           ; ALIGN 4 to page b
                                                            oundary????
  318 000001B4         ; padded to bring up to 0x80 not sure why 
  319 000001B4         UZERO
  320 000001B4 00000000        DCD              0           ;Reserved
  321 000001B8 20000000        DCD              HI-MAPOFFSET ;'BOOT
  322 000001BC 00000010        DCD              BASEE       ;BASE
  323 000001C0 00000000        DCD              0           ;tmp
  324 000001C4 00000000        DCD              0           ;SPAN
  325 000001C8 00000000        DCD              0           ;>IN
  326 000001CC 00000000        DCD              0           ;#TIB
  327 000001D0 20004E00        DCD              TIBB        ;TIB
  328 000001D4 20000000        DCD              INTER-MAPOFFSET ;'EVAL
  329 000001D8 00000000        DCD              0           ;HLD
  330 000001DC 20000000        DCD              CTOP-MAPOFFSET ;FLASH
  332 000001E4 20000000        DCD              CTOP-MAPOFFSET ;RAM
  333 000001E8 20000000        DCD              LASTN-MAPOFFSET ;LAST
  334 000001EC 00000000 
              00000000         DCD              0,0         ;reserved
  335 000001F4         ULAST
  336 000001F4                 ALIGN            4



ARM Macro Assembler    Page 8 


  337 000001F4         
  338 000001F4         ;*******************************************************
                       ***************
  339 000001F4         ; Start of Forth dictionary
  340 000001F4         ; usart1
  341 000001F4         
  342 000001F4         ;   ?RX  ( -- c T | F )
  343 000001F4         ; Return input character and true, or a false if no inpu
                       t.
  344 000001F4 00000000        DCD              0
  345 000001F8 04      _QRX    DCB              4           ; DKEX
  346 000001F9         
  347 000001F9 3F 4B 45 
              59               DCB              "?KEY"
  348 000001FD 00 00 00        ALIGN            4
  349 00000200         QKEY
  350 00000200         QRX
  351 00000200                 _PUSH
  305 00000200 F841 5D04       STR              R5,[R1,#-4]!
  352 00000204         ; ldr r4, =0x40011000 ; USART1 F2/F4
  353 00000204 4C0F            ldr              r4, =0x40013800 ; USART1 F105
  354 00000206 8826            ldrh             r6, [r4, #0] ; USART->SR
  355 00000208 F016 0620       ands             r6, #0x20   ; RXE
  356 0000020C D006            BEQ              QRX1
  357 0000020E 7925            LDRB             R5, [R4, #4] ; DATA
  358 00000210                 _PUSH
  305 00000210 F841 5D04       STR              R5,[R1,#-4]!
  359 00000214 BF18 F06F 
              0500             MVNNE            R5,#0
  360 0000021A                 _NEXT                        ; added dke
  285 0000021A 4770            BX               LR
  361 0000021C         QRX1
  362 0000021C         ; MOVEQ R5,#0
  363 0000021C F04F 0500       MOV              R5,#0
  364 00000220                 _NEXT
  285 00000220 4770            BX               LR
  365 00000222 00 00           ALIGN            4
  366 00000224         ;   TX!  ( c -- )
  367 00000224         ; Send character c to the output device.
  368 00000224         
  369 00000224 20000000        DCD              _QRX-MAPOFFSET
  370 00000228 04      _TXSTO  DCB              4
  371 00000229 45 4D 49 
              54               DCB              "EMIT"
  372 0000022D 00 00 00        ALIGN            4
  373 00000230         TXSTO
  374 00000230         EMIT
  375 00000230         TECHO
  376 00000230         ;; ldr r4, =0x40011000 ; USART1 F2/F4
  377 00000230 4C04            ldr              r4, =0x40013800 ; USART1 F105
  378 00000232 8826    TX1     ldrh             r6, [r4, #0] ; USART->SR
  379 00000234 F016 0680       ands             r6, #0x80   ; TXE
  380 00000238 D0FB            beq              TX1
  381 0000023A 80A5            strh             r5, [r4, #4] ; USART->DR
  382 0000023C                 _POP
  310 0000023C F851 5B04       LDR              R5,[R1],#4
  383 00000240                 _NEXT
  285 00000240 4770            BX               LR
  384 00000242         



ARM Macro Assembler    Page 9 


  385 00000242 00 00           ALIGN            4
  386 00000244 40013800        LTORG
  387 00000248         
  388 00000248         ;*******************************************************
                       *******************
  389 00000248         ; The kernel
  390 00000248         
  391 00000248         ;   NOP ( -- w )
  392 00000248         ; Push an inline literal.
  393 00000248         
  394 00000248 20000000        DCD              _TXSTO-MAPOFFSET
  395 0000024C 03      _NOP    DCB              3
  396 0000024D 4E 4F 50        DCB              "NOP"
  397 00000250                 ALIGN            4
  398 00000250         NOP
  399 00000250                 _NEXT
  285 00000250 4770            BX               LR
  400 00000252 00 00           ALIGN            4
  401 00000254         
  402 00000254         ;   doLIT ( -- w )
  403 00000254         ; Push an inline literal.
  404 00000254         
  405 00000254         ; DCD _NOP-MAPOFFSET
  406 00000254         ;_LIT DCB   COMPO+5
  407 00000254         ; DCB "doLIT"
  408 00000254         ; ALIGN 4 
  409 00000254         DOLIT
  410 00000254                 _PUSH
  305 00000254 F841 5D04       STR              R5,[R1,#-4]!
  411 00000258 F02E 0E01       BIC              LR,LR,#1    ; clear b0 in LR
  412 0000025C F85E 5B04       LDR              R5,[LR],#4  ; get literal at wo
                                                            rd boundary
  413 00000260 F04E 0E01       ORR              LR,LR,#1    ; aet b0 in LR
  414 00000264                 _NEXT
  285 00000264 4770            BX               LR
  415 00000266 00 00           ALIGN            4
  416 00000268         
  417 00000268         ;   EXECUTE ( ca -- )
  418 00000268         ; Execute the word at ca.
  419 00000268         
  420 00000268 20000000        DCD              _NOP-MAPOFFSET
  421 0000026C 07      _EXECU  DCB              7
  422 0000026D 45 58 45 
              43 55 54 
              45               DCB              "EXECUTE"
  423 00000274                 ALIGN            4
  424 00000274         EXECU
  425 00000274 F045 0401       ORR              R4,R5,#1    ; b0=1
  426 00000278                 _POP
  310 00000278 F851 5B04       LDR              R5,[R1],#4
  427 0000027C 4720            BX               R4
  428 0000027E 00 00           ALIGN            4
  429 00000280         
  430 00000280         ;   next ( -- )
  431 00000280         ; Run time code for the single index loop.
  432 00000280         ; : next ( -- ) \ hilevel model
  433 00000280         ;  r> r> dup if 1 - >r @ >r exit then drop cell+ >r ;
  434 00000280         
  435 00000280         ; DCD _EXECU-MAPOFFSET



ARM Macro Assembler    Page 10 


  436 00000280         ;_DONXT DCB   COMPO+4
  437 00000280         ; DCB "next"
  438 00000280         ; ALIGN 4 
  439 00000280         DONXT
  440 00000280 6814            LDR              R4,[R2]
  441 00000282 0024            MOVS             R4,R4
  442 00000284 D104            BNE              NEXT1
  443 00000286 F102 0204       ADD              R2,R2,#4
  444 0000028A F10E 0E04       ADD              LR,LR,#4
  445 0000028E                 _NEXT
  285 0000028E 4770            BX               LR
  446 00000290 F1A4 0401 
                       NEXT1   SUB              R4,R4,#1
  447 00000294 6014            STR              R4,[R2]
  448 00000296 F85E EC01       LDR              LR,[LR,#-1] ; handle b0 in LR 
  449 0000029A F04E 0E01       ORR              LR,LR,#1
  450 0000029E                 _NEXT
  285 0000029E 4770            BX               LR
  451 000002A0         
  452 000002A0         ;   ?branch ( f -- )
  453 000002A0         ; Branch if flag is zero.
  454 000002A0         
  455 000002A0         ; DCD _DONXT-MAPOFFSET
  456 000002A0         ;_QBRAN DCB   COMPO+7
  457 000002A0         ; DCB "?branch"
  458 000002A0         ; ALIGN 4 
  459 000002A0         QBRAN
  460 000002A0 002C            MOVS             R4,R5
  461 000002A2                 _POP
  310 000002A2 F851 5B04       LDR              R5,[R1],#4
  462 000002A6 D104            BNE              QBRAN1
  463 000002A8 F85E EC01       LDR              LR,[LR,#-1]
  464 000002AC F04E 0E01       ORR              LR,LR,#1
  465 000002B0                 _NEXT
  285 000002B0 4770            BX               LR
  466 000002B2 F10E 0E04 
                       QBRAN1  ADD              LR,LR,#4
  467 000002B6                 _NEXT
  285 000002B6 4770            BX               LR
  468 000002B8         
  469 000002B8         ;   branch ( -- )
  470 000002B8         ; Branch to an inline address.
  471 000002B8         
  472 000002B8         ; DCD _QBRAN-MAPOFFSET
  473 000002B8         ;_BRAN DCB   COMPO+6
  474 000002B8         ; DCB "branch"
  475 000002B8         ; ALIGN 4 
  476 000002B8         BRAN
  477 000002B8 F85E EC01       LDR              LR,[LR,#-1]
  478 000002BC F04E 0E01       ORR              LR,LR,#1
  479 000002C0                 _NEXT
  285 000002C0 4770            BX               LR
  480 000002C2 00 00           ALIGN            4
  481 000002C4         
  482 000002C4         ;   EXIT (  -- )
  483 000002C4         ; Exit the currently executing command.
  484 000002C4         
  485 000002C4 20000000        DCD              _EXECU-MAPOFFSET
  486 000002C8 04      _EXIT   DCB              4



ARM Macro Assembler    Page 11 


  487 000002C9 45 58 49 
              54               DCB              "EXIT"
  488 000002CD 00 00 00        ALIGN            4
  489 000002D0         EXIT
  490 000002D0                 _UNNEST
  295 000002D0 F852 FB04       LDMFD            R2!,{PC}
  491 000002D4         
  492 000002D4         ;   !    ( w a -- )
  493 000002D4         ; Pop the data stack to memory.
  494 000002D4         
  495 000002D4 20000000        DCD              _EXIT-MAPOFFSET
  496 000002D8 01      _STORE  DCB              1
  497 000002D9 21              DCB              "!"
  498 000002DA 00 00           ALIGN            4
  499 000002DC         STORE
  500 000002DC F851 4B04       LDR              R4,[R1],#4
  501 000002E0 602C            STR              R4,[R5]
  502 000002E2                 _POP
  310 000002E2 F851 5B04       LDR              R5,[R1],#4
  503 000002E6                 _NEXT
  285 000002E6 4770            BX               LR
  504 000002E8         
  505 000002E8         ;   @    ( a -- w )
  506 000002E8         ; Push memory location to the data stack.
  507 000002E8         
  508 000002E8 20000000        DCD              _STORE-MAPOFFSET
  509 000002EC 01      _AT     DCB              1
  510 000002ED 40              DCB              "@"
  511 000002EE 00 00           ALIGN            4
  512 000002F0         AT
  513 000002F0 682D            LDR              R5,[R5]
  514 000002F2                 _NEXT
  285 000002F2 4770            BX               LR
  515 000002F4         
  516 000002F4         ;   C!   ( c b -- )
  517 000002F4         ; Pop the data stack to byte memory.
  518 000002F4         
  519 000002F4 20000000        DCD              _AT-MAPOFFSET
  520 000002F8 02      _CSTOR  DCB              2
  521 000002F9 43 21           DCB              "C!"
  522 000002FB 00              ALIGN            4
  523 000002FC         CSTOR
  524 000002FC F851 4B04       LDR              R4,[R1],#4
  525 00000300 702C            STRB             R4,[R5]
  526 00000302                 _POP
  310 00000302 F851 5B04       LDR              R5,[R1],#4
  527 00000306                 _NEXT
  285 00000306 4770            BX               LR
  528 00000308         
  529 00000308         ; H! ( 16 a -- ) HALF STORE
  530 00000308 20000000        DCD              _CSTOR-MAPOFFSET
  531 0000030C 02      _HSTOR  DCB              2
  532 0000030D 48 21           DCB              "H!"
  533 0000030F 00              ALIGN            4
  534 00000310         HSTOR
  535 00000310 F851 4B04       LDR              R4,[R1],#4
  536 00000314 802C            STRH             R4,[R5]
  537 00000316                 _POP
  310 00000316 F851 5B04       LDR              R5,[R1],#4



ARM Macro Assembler    Page 12 


  538 0000031A                 _NEXT
  285 0000031A 4770            BX               LR
  539 0000031C         
  540 0000031C         ; H@ ( A --- 16 ) 16 BIT AT
  541 0000031C 20000000        DCD              _HSTOR-MAPOFFSET
  542 00000320         _HATT
  543 00000320 02              DCB              2
  544 00000321 48 40           DCB              "H@"
  545 00000323 00              ALIGN            4
  546 00000324         HATT
  547 00000324 882D            LDRH             R5,[R5]
  548 00000326                 _NEXT
  285 00000326 4770            BX               LR
  549 00000328         
  550 00000328         ; CLR! ( bits port - ) is used with I/O ports to set bit
                       s
  551 00000328         ; It uses the bit pattern to set I/O bits when port is c
                       onfigured as an output
  552 00000328         
  553 00000328 20000000        DCD              _HATT-MAPOFFSET
  554 0000032C 04      _CLSTR  DCB              4
  555 0000032D 43 4C 52 
              21               DCB              "CLR!"
  556 00000331 00 00 00        ALIGN            4
  557 00000334         CLSTR
  558 00000334 F105 0514       ADD              R5,R5,#0x14
  559 00000338 F7FF BFD0       B.W              STORE
  560 0000033C         
  561 0000033C         ; SET! ( bits port - ) reset bits of port like LOW
  562 0000033C         
  563 0000033C 20000000        DCD              _CLSTR-MAPOFFSET
  564 00000340 04      _STSTR  DCB              4
  565 00000341 53 45 54 
              21               DCB              "SET!"
  566 00000345 00 00 00        ALIGN            4
  567 00000348         STSTR
  568 00000348 F105 0510       ADD              R5,R5,#0x10
  569 0000034C F7FF BFC6       B.W              STORE
  570 00000350         
  571 00000350 40010800 
                       PORTA   EQU              0X40010800
  572 00000350 40010C00 
                       PORTB   EQU              0x40010C00  ; 0x40020400
  573 00000350 40011000 
                       PORTC   EQU              0x40011000
  574 00000350         
  575 00000350         ; PA, PB AND PC returns the address for port A
  576 00000350         
  577 00000350 20000000        DCD              _STSTR-MAPOFFSET
  578 00000354 03      _PRTA   DCB              3
  579 00000355 50 41 2B        DCB              "PA+"
  580 00000358                 ALIGN            4
  581 00000358 4C15            LDR              R4,=PORTA
  582 0000035A 4425            ADD              R5,R5,R4
  583 0000035C                 _NEXT
  285 0000035C 4770            BX               LR
  584 0000035E 00 00           ALIGN            4
  585 00000360         
  586 00000360 20000000        DCD              _PRTA-MAPOFFSET



ARM Macro Assembler    Page 13 


  587 00000364 03      _PRTB   DCB              3
  588 00000365 50 42 2B        DCB              "PB+"
  589 00000368                 ALIGN            4
  590 00000368 4C12            LDR              R4,=PORTB
  591 0000036A 4425            ADD              R5,R5,R4
  592 0000036C                 _NEXT
  285 0000036C 4770            BX               LR
  593 0000036E 00 00           ALIGN            4
  594 00000370         
  595 00000370 20000000        DCD              _PRTB-MAPOFFSET
  596 00000374 03      _PRTC   DCB              3
  597 00000375 50 43 2B        DCB              "PC+"
  598 00000378                 ALIGN            4
  599 00000378 4C0F            LDR              R4,=PORTC
  600 0000037A 4425            ADD              R5,R5,R4
  601 0000037C                 _NEXT
  285 0000037C 4770            BX               LR
  602 0000037E 00 00           ALIGN            4
  603 00000380         
  604 00000380         ; MSK! ( val mask addr - )  DKE
  605 00000380         ; reads the value at addr saves bit not in mask
  606 00000380         ; it then mask val then or to addr  [addr] = [addr] . !m
                       ask | ( val . mask )
  607 00000380         ; in other words it replace the bits in mask with val at
                        addr. val can have bits not
  608 00000380         ; in mask that have no effect
  609 00000380 20000000        DCD              _PRTC-MAPOFFSET
  610 00000384 04      _MSKSTR DCB              4
  611 00000385 4D 53 4B 
              21               DCB              "MSK!"
  612 00000389 00 00 00        ALIGN            4
  613 0000038C F851 6B04       LDR              R6,[R1],#4
  614 00000390 F851 7B04       LDR              R7,[R1],#4
  615 00000394 EA06 0707       AND              R7,R6,R7
  616 00000398 682C            LDR              R4,[R5]
  617 0000039A EA6F 0606       MVN              R6,R6
  618 0000039E EA06 0404       AND              R4,R6,R4
  619 000003A2 EA44 0407       ORR              R4,R7
  620 000003A6 602C            STR              R4,[R5]
  621 000003A8                 _POP
  310 000003A8 F851 5B04       LDR              R5,[R1],#4
  622 000003AC                 _NEXT
  285 000003AC 4770            BX               LR
  623 000003AE 00 00           ALIGN            4
  624 000003B0 40010800 
              40010C00 
              40011000         LTORG
  625 000003BC         
  626 000003BC 20000000        DCD              _MSKSTR-MAPOFFSET
  627 000003C0         ;   C@   ( b -- c )
  628 000003C0         ; Push byte memory location to the data stack.
  629 000003C0                 ALIGN            4
  630 000003C0 02      _CAT    DCB              2
  631 000003C1 43 40           DCB              "C@"
  632 000003C3 00              ALIGN            4
  633 000003C4         CAT
  634 000003C4 782D            LDRB             R5,[R5]
  635 000003C6                 _NEXT
  285 000003C6 4770            BX               LR



ARM Macro Assembler    Page 14 


  636 000003C8         
  637 000003C8         ;   R>   ( -- w )
  638 000003C8         ; Pop the return stack to the data stack.
  639 000003C8         
  640 000003C8 20000000        DCD              _CAT-MAPOFFSET
  641 000003CC 02      _RFROM  DCB              2
  642 000003CD 52 3E           DCB              "R>"
  643 000003CF 00              ALIGN            4
  644 000003D0         RFROM
  645 000003D0                 _PUSH
  305 000003D0 F841 5D04       STR              R5,[R1,#-4]!
  646 000003D4 F852 5B04       LDR              R5,[R2],#4
  647 000003D8                 _NEXT
  285 000003D8 4770            BX               LR
  648 000003DA 00 00           ALIGN            4
  649 000003DC         
  650 000003DC         ;   R@   ( -- w )
  651 000003DC         ; Copy top of return stack to the data stack.
  652 000003DC         
  653 000003DC 20000000        DCD              _RFROM-MAPOFFSET
  654 000003E0 02      _RAT    DCB              2
  655 000003E1 52 40           DCB              "R@"
  656 000003E3 00              ALIGN            4
  657 000003E4         RAT
  658 000003E4                 _PUSH
  305 000003E4 F841 5D04       STR              R5,[R1,#-4]!
  659 000003E8 6815            LDR              R5,[R2]
  660 000003EA                 _NEXT
  285 000003EA 4770            BX               LR
  661 000003EC         
  662 000003EC         ;   >R   ( w -- )
  663 000003EC         ; Push the data stack to the return stack.
  664 000003EC         
  665 000003EC 20000000        DCD              _RAT-MAPOFFSET
  666 000003F0 42      _TOR    DCB              COMPO+2
  667 000003F1 3E 52           DCB              ">R"
  668 000003F3 00              ALIGN            4
  669 000003F4         TOR
  670 000003F4 F842 5D04       STR              R5,[R2,#-4]!
  671 000003F8                 _POP
  310 000003F8 F851 5B04       LDR              R5,[R1],#4
  672 000003FC                 _NEXT
  285 000003FC 4770            BX               LR
  673 000003FE 00 00           ALIGN            4
  674 00000400         
  675 00000400         ;   SP@  ( -- a )
  676 00000400         ; Push the current data stack pointer.
  677 00000400         
  678 00000400 20000000        DCD              _TOR-MAPOFFSET
  679 00000404 03      _SPAT   DCB              3
  680 00000405 53 50 40        DCB              "SP@"
  681 00000408                 ALIGN            4
  682 00000408         SPAT
  683 00000408                 _PUSH
  305 00000408 F841 5D04       STR              R5,[R1,#-4]!
  684 0000040C 460D            MOV              R5,R1
  685 0000040E                 _NEXT
  285 0000040E 4770            BX               LR
  686 00000410         



ARM Macro Assembler    Page 15 


  687 00000410         ;   DROP ( w -- )
  688 00000410         ; Discard top stack item.
  689 00000410         
  690 00000410 20000000        DCD              _SPAT-MAPOFFSET
  691 00000414 04      _DROP   DCB              4
  692 00000415 44 52 4F 
              50               DCB              "DROP"
  693 00000419 00 00 00        ALIGN            4
  694 0000041C         DROP
  695 0000041C                 _POP
  310 0000041C F851 5B04       LDR              R5,[R1],#4
  696 00000420                 _NEXT
  285 00000420 4770            BX               LR
  697 00000422 00 00           ALIGN            4
  698 00000424         
  699 00000424         ;   DUP  ( w -- w w )
  700 00000424         ; Duplicate the top stack item.
  701 00000424         
  702 00000424 20000000        DCD              _DROP-MAPOFFSET
  703 00000428 03      _DUPP   DCB              3
  704 00000429 44 55 50        DCB              "DUP"
  705 0000042C                 ALIGN            4
  706 0000042C         DUPP
  707 0000042C                 _PUSH
  305 0000042C F841 5D04       STR              R5,[R1,#-4]!
  708 00000430                 _NEXT
  285 00000430 4770            BX               LR
  709 00000432 00 00           ALIGN            4
  710 00000434         
  711 00000434         ;   SWAP ( w1 w2 -- w2 w1 )
  712 00000434         ; Exchange top two stack items.
  713 00000434         
  714 00000434 20000000        DCD              _DUPP-MAPOFFSET
  715 00000438 04      _SWAP   DCB              4
  716 00000439 53 57 41 
              50               DCB              "SWAP"
  717 0000043D 00 00 00        ALIGN            4
  718 00000440         SWAP
  719 00000440 680C            LDR              R4,[R1]
  720 00000442 600D            STR              R5,[R1]
  721 00000444 4625            MOV              R5,R4
  722 00000446                 _NEXT
  285 00000446 4770            BX               LR
  723 00000448         
  724 00000448         ;   OVER ( w1 w2 -- w1 w2 w1 )
  725 00000448         ; Copy second stack item to top.
  726 00000448         
  727 00000448 20000000        DCD              _SWAP-MAPOFFSET
  728 0000044C 04      _OVER   DCB              4
  729 0000044D 4F 56 45 
              52               DCB              "OVER"
  730 00000451 00 00 00        ALIGN            4
  731 00000454         OVER
  732 00000454                 _PUSH
  305 00000454 F841 5D04       STR              R5,[R1,#-4]!
  733 00000458 684D            LDR              R5,[R1,#4]
  734 0000045A                 _NEXT
  285 0000045A 4770            BX               LR
  735 0000045C         



ARM Macro Assembler    Page 16 


  736 0000045C         ;   0<   ( n -- t )
  737 0000045C         ; Return true if n is negative.
  738 0000045C         
  739 0000045C 20000000        DCD              _OVER-MAPOFFSET
  740 00000460 02      _ZLESS  DCB              2
  741 00000461 30 3C           DCB              "0<"
  742 00000463 00              ALIGN            4
  743 00000464         ZLESS
  744 00000464 F04F 0400       MOV              R4,#0
  745 00000468 EB04 0525       ADD              R5,R4,R5,ASR #32
  746 0000046C                 _NEXT
  285 0000046C 4770            BX               LR
  747 0000046E 00 00           ALIGN            4
  748 00000470         
  749 00000470         ;   AND  ( w w -- w )
  750 00000470         ; Bitwise AND.
  751 00000470         
  752 00000470 20000000        DCD              _ZLESS-MAPOFFSET
  753 00000474 03      _ANDD   DCB              3
  754 00000475 41 4E 44        DCB              "AND"
  755 00000478                 ALIGN            4
  756 00000478         ANDD
  757 00000478 F851 4B04       LDR              R4,[R1],#4
  758 0000047C EA05 0504       AND              R5,R5,R4
  759 00000480                 _NEXT
  285 00000480 4770            BX               LR
  760 00000482 00 00           ALIGN            4
  761 00000484         
  762 00000484         ;   OR   ( w w -- w )
  763 00000484         ; Bitwise inclusive OR.
  764 00000484         
  765 00000484 20000000        DCD              _ANDD-MAPOFFSET
  766 00000488 02      _ORR    DCB              2
  767 00000489 4F 52           DCB              "OR"
  768 0000048B 00              ALIGN            4
  769 0000048C         ORR
  770 0000048C F851 4B04       LDR              R4,[R1],#4
  771 00000490 EA45 0504       ORR              R5,R5,R4
  772 00000494                 _NEXT
  285 00000494 4770            BX               LR
  773 00000496 00 00           ALIGN            4
  774 00000498         
  775 00000498         ; MASK! ( new mask addr - ) Fetch the value at addr
  776 00000498         ;    and it with the !mask and or it with the value
  777 00000498         ;       
  778 00000498         
  779 00000498         ;   XOR  ( w w -- w )
  780 00000498         ; Bitwise exclusive OR.
  781 00000498         
  782 00000498 20000000        DCD              _ORR-MAPOFFSET
  783 0000049C 03      _XORR   DCB              3
  784 0000049D 58 4F 52        DCB              "XOR"
  785 000004A0                 ALIGN            4
  786 000004A0         XORR
  787 000004A0 F851 4B04       LDR              R4,[R1],#4
  788 000004A4 EA85 0504       EOR              R5,R5,R4
  789 000004A8                 _NEXT
  285 000004A8 4770            BX               LR
  790 000004AA 00 00           ALIGN            4



ARM Macro Assembler    Page 17 


  791 000004AC         
  792 000004AC         ;   UM+  ( w w -- w cy )
  793 000004AC         ; Add two numbers, return the sum and carry flag.
  794 000004AC         
  795 000004AC 20000000        DCD              _XORR-MAPOFFSET
  796 000004B0 03      _UPLUS  DCB              3
  797 000004B1 55 4D 2B        DCB              "UM+"
  798 000004B4                 ALIGN            4
  799 000004B4         UPLUS
  800 000004B4 680C            LDR              R4,[R1]
  801 000004B6 1964            ADDS             R4,R4,R5
  802 000004B8 F04F 0500       MOV              R5,#0
  803 000004BC F145 0500       ADC              R5,R5,#0
  804 000004C0 600C            STR              R4,[R1]
  805 000004C2                 _NEXT
  285 000004C2 4770            BX               LR
  806 000004C4         
  807 000004C4         ;   RSHIFT  ( w # -- w )
  808 000004C4         ; Right shift # bits.
  809 000004C4         
  810 000004C4 20000000        DCD              _UPLUS-MAPOFFSET
  811 000004C8 06      _RSHIFT DCB              6
  812 000004C9 52 53 48 
              49 46 54         DCB              "RSHIFT"
  813 000004CF 00              ALIGN            4
  814 000004D0         RSHIFT
  815 000004D0 F851 4B04       LDR              R4,[R1],#4
  816 000004D4 FA44 F505       MOV              R5,R4,ASR R5
  817 000004D8                 _NEXT
  285 000004D8 4770            BX               LR
  818 000004DA 00 00           ALIGN            4
  819 000004DC         
  820 000004DC         ;   LSHIFT  ( w # -- w )
  821 000004DC         ; Right shift # bits.
  822 000004DC         
  823 000004DC 20000000        DCD              _RSHIFT-MAPOFFSET
  824 000004E0 06      _LSHIFT DCB              6
  825 000004E1 4C 53 48 
              49 46 54         DCB              "LSHIFT"
  826 000004E7 00              ALIGN            4
  827 000004E8         LSHIFT
  828 000004E8 F851 4B04       LDR              R4,[R1],#4
  829 000004EC FA04 F505       MOV              R5,R4,LSL R5
  830 000004F0                 _NEXT
  285 000004F0 4770            BX               LR
  831 000004F2 00 00           ALIGN            4
  832 000004F4         
  833 000004F4         ;   +  ( w w -- w )
  834 000004F4         ; Add.
  835 000004F4         
  836 000004F4 20000000        DCD              _LSHIFT-MAPOFFSET
  837 000004F8 01      _PLUS   DCB              1
  838 000004F9 2B              DCB              "+"
  839 000004FA 00 00           ALIGN            4
  840 000004FC         PLUS
  841 000004FC F851 4B04       LDR              R4,[R1],#4
  842 00000500 4425            ADD              R5,R5,R4
  843 00000502                 _NEXT
  285 00000502 4770            BX               LR



ARM Macro Assembler    Page 18 


  844 00000504         
  845 00000504         ;   -  ( w w -- w )
  846 00000504         ; Subtract.
  847 00000504         
  848 00000504 20000000        DCD              _PLUS-MAPOFFSET
  849 00000508 01      _SUBB   DCB              1
  850 00000509 2D              DCB              "-"
  851 0000050A 00 00           ALIGN            4
  852 0000050C         SUBB
  853 0000050C F851 4B04       LDR              R4,[R1],#4
  854 00000510 EBC5 0504       RSB              R5,R5,R4
  855 00000514                 _NEXT
  285 00000514 4770            BX               LR
  856 00000516 00 00           ALIGN            4
  857 00000518         
  858 00000518         ;   *  ( w w -- w )
  859 00000518         ; Multiply.
  860 00000518         
  861 00000518 20000000        DCD              _SUBB-MAPOFFSET
  862 0000051C 01      _STAR   DCB              1
  863 0000051D 2A              DCB              "*"
  864 0000051E 00 00           ALIGN            4
  865 00000520         STAR
  866 00000520 F851 4B04       LDR              R4,[R1],#4
  867 00000524 FB04 F505       MUL              R5,R4,R5
  868 00000528                 _NEXT
  285 00000528 4770            BX               LR
  869 0000052A 00 00           ALIGN            4
  870 0000052C         
  871 0000052C         ;   UM*  ( w w -- ud )
  872 0000052C         ; Unsigned multiply.
  873 0000052C         
  874 0000052C 20000000        DCD              _STAR-MAPOFFSET
  875 00000530 03      _UMSTA  DCB              3
  876 00000531 55 4D 2A        DCB              "UM*"
  877 00000534                 ALIGN            4
  878 00000534         UMSTA
  879 00000534 680C            LDR              R4,[R1]
  880 00000536 FBA5 6704       UMULL            R6,R7,R5,R4
  881 0000053A 600E            STR              R6,[R1]
  882 0000053C 463D            MOV              R5,R7
  883 0000053E                 _NEXT
  285 0000053E 4770            BX               LR
  884 00000540         
  885 00000540         ;   M*  ( w w -- d )
  886 00000540         ; Unsigned multiply.
  887 00000540         
  888 00000540 20000000        DCD              _UMSTA-MAPOFFSET
  889 00000544 02      _MSTAR  DCB              2
  890 00000545 4D 2A           DCB              "M*"
  891 00000547 00              ALIGN            4
  892 00000548         MSTAR
  893 00000548 680C            LDR              R4,[R1]
  894 0000054A FB85 6704       SMULL            R6,R7,R5,R4
  895 0000054E 600E            STR              R6,[R1]
  896 00000550 463D            MOV              R5,R7
  897 00000552                 _NEXT
  285 00000552 4770            BX               LR
  898 00000554         



ARM Macro Assembler    Page 19 


  899 00000554         ;   1+  ( w -- w+1 )
  900 00000554         ; Add 1.
  901 00000554         
  902 00000554 20000000        DCD              _MSTAR-MAPOFFSET
  903 00000558 02      _ONEP   DCB              2
  904 00000559 31 2B           DCB              "1+"
  905 0000055B 00              ALIGN            4
  906 0000055C         ONEP
  907 0000055C F105 0501       ADD              R5,R5,#1
  908 00000560                 _NEXT
  285 00000560 4770            BX               LR
  909 00000562 00 00           ALIGN            4
  910 00000564         
  911 00000564         ;   1-  ( w -- w-1 )
  912 00000564         ; Subtract 1.
  913 00000564         
  914 00000564 20000000        DCD              _ONEP-MAPOFFSET
  915 00000568 02      _ONEM   DCB              2
  916 00000569 31 2D           DCB              "1-"
  917 0000056B 00              ALIGN            4
  918 0000056C         ONEM
  919 0000056C F1A5 0501       SUB              R5,R5,#1
  920 00000570                 _NEXT
  285 00000570 4770            BX               LR
  921 00000572 00 00           ALIGN            4
  922 00000574         
  923 00000574         ;   2+  ( w -- w+2 )
  924 00000574         ; Add 1.
  925 00000574         
  926 00000574 20000000        DCD              _ONEM-MAPOFFSET
  927 00000578 02      _TWOP   DCB              2
  928 00000579 32 2B           DCB              "2+"
  929 0000057B 00              ALIGN            4
  930 0000057C         TWOP
  931 0000057C F105 0502       ADD              R5,R5,#2
  932 00000580                 _NEXT
  285 00000580 4770            BX               LR
  933 00000582 00 00           ALIGN            4
  934 00000584         
  935 00000584         ;   2-  ( w -- w-2 )
  936 00000584         ; Subtract 2.
  937 00000584         
  938 00000584 20000000        DCD              _TWOP-MAPOFFSET
  939 00000588 02      _TWOM   DCB              2
  940 00000589 32 2D           DCB              "2-"
  941 0000058B 00              ALIGN            4
  942 0000058C         TWOM
  943 0000058C F1A5 0502       SUB              R5,R5,#2
  944 00000590                 _NEXT
  285 00000590 4770            BX               LR
  945 00000592 00 00           ALIGN            4
  946 00000594         
  947 00000594         ;   CELL+ ( w -- w+4 )
  948 00000594         ; Add 4.
  949 00000594         
  950 00000594 20000000        DCD              _TWOM-MAPOFFSET
  951 00000598 05      _CELLP  DCB              5
  952 00000599 43 45 4C 
              4C 2B            DCB              "CELL+"



ARM Macro Assembler    Page 20 


  953 0000059E 00 00           ALIGN            4
  954 000005A0         CELLP
  955 000005A0 F105 0504       ADD              R5,R5,#4
  956 000005A4                 _NEXT
  285 000005A4 4770            BX               LR
  957 000005A6 00 00           ALIGN            4
  958 000005A8         
  959 000005A8         ;   CELL- ( w -- w-4 )
  960 000005A8         ; Subtract 4.
  961 000005A8         
  962 000005A8 20000000        DCD              _CELLP-MAPOFFSET
  963 000005AC 05      _CELLM  DCB              5
  964 000005AD 43 45 4C 
              4C 2D            DCB              "CELL-"
  965 000005B2 00 00           ALIGN            4
  966 000005B4         CELLM
  967 000005B4 F1A5 0504       SUB              R5,R5,#4
  968 000005B8                 _NEXT
  285 000005B8 4770            BX               LR
  969 000005BA 00 00           ALIGN            4
  970 000005BC         
  971 000005BC         ;   BL ( -- 32 )
  972 000005BC         ; Blank (ASCII space).
  973 000005BC         
  974 000005BC 20000000        DCD              _CELLM-MAPOFFSET
  975 000005C0 02      _BLANK  DCB              2
  976 000005C1 42 4C           DCB              "BL"
  977 000005C3 00              ALIGN            4
  978 000005C4         BLANK
  979 000005C4                 _PUSH
  305 000005C4 F841 5D04       STR              R5,[R1,#-4]!
  980 000005C8 F04F 0520       MOV              R5,#32
  981 000005CC                 _NEXT
  285 000005CC 4770            BX               LR
  982 000005CE 00 00           ALIGN            4
  983 000005D0         
  984 000005D0         ;   CELLS ( w -- w*4 )
  985 000005D0         ; Multiply 4.
  986 000005D0         
  987 000005D0 20000000        DCD              _BLANK-MAPOFFSET
  988 000005D4 05      _CELLS  DCB              5
  989 000005D5 43 45 4C 
              4C 53            DCB              "CELLS"
  990 000005DA 00 00           ALIGN            4
  991 000005DC         CELLS
  992 000005DC EA4F 0585       MOV              R5,R5,LSL#2
  993 000005E0                 _NEXT
  285 000005E0 4770            BX               LR
  994 000005E2 00 00           ALIGN            4
  995 000005E4         
  996 000005E4         ;   CELL/ ( w -- w*4 )
  997 000005E4         ; Divide by 4.
  998 000005E4         
  999 000005E4 20000000        DCD              _CELLS-MAPOFFSET
 1000 000005E8 05      _CELLSL DCB              5
 1001 000005E9 43 45 4C 
              4C 2F            DCB              "CELL/"
 1002 000005EE 00 00           ALIGN            4
 1003 000005F0         CELLSL



ARM Macro Assembler    Page 21 


 1004 000005F0 EA4F 05A5       MOV              R5,R5,ASR#2
 1005 000005F4                 _NEXT
  285 000005F4 4770            BX               LR
 1006 000005F6 00 00           ALIGN            4
 1007 000005F8         
 1008 000005F8         ;   2* ( w -- w*2 )
 1009 000005F8         ; Multiply 2.
 1010 000005F8         
 1011 000005F8 20000000        DCD              _CELLSL-MAPOFFSET
 1012 000005FC 02      _TWOST  DCB              2
 1013 000005FD 32 2A           DCB              "2*"
 1014 000005FF 00              ALIGN            4
 1015 00000600         TWOST
 1016 00000600 EA4F 0545       MOV              R5,R5,LSL#1
 1017 00000604                 _NEXT
  285 00000604 4770            BX               LR
 1018 00000606 00 00           ALIGN            4
 1019 00000608         
 1020 00000608         ;   2/ ( w -- w/2 )
 1021 00000608         ; Divide by 2.
 1022 00000608         
 1023 00000608 20000000        DCD              _TWOST-MAPOFFSET
 1024 0000060C 02      _TWOSL  DCB              2
 1025 0000060D 32 2F           DCB              "2/"
 1026 0000060F 00              ALIGN            4
 1027 00000610         TWOSL
 1028 00000610 EA4F 0565       MOV              R5,R5,ASR#1
 1029 00000614                 _NEXT
  285 00000614 4770            BX               LR
 1030 00000616 00 00           ALIGN            4
 1031 00000618         
 1032 00000618         ;   ?DUP ( w -- w w | 0 )
 1033 00000618         ; Conditional duplicate.
 1034 00000618         
 1035 00000618 20000000        DCD              _TWOSL-MAPOFFSET
 1036 0000061C 04      _QDUP   DCB              4
 1037 0000061D 3F 44 55 
              50               DCB              "?DUP"
 1038 00000621 00 00 00        ALIGN            4
 1039 00000624         QDUP
 1040 00000624 002C            MOVS             R4,R5
 1041 00000626 BF18 F841 
              5D04             STRNE            R5,[R1,#-4]!
 1042 0000062C                 _NEXT
  285 0000062C 4770            BX               LR
 1043 0000062E 00 00           ALIGN            4
 1044 00000630         
 1045 00000630         ;   ROT ( w1 w2 w3 -- w2 w3 w1 )
 1046 00000630         ; Rotate top 3 items.
 1047 00000630         
 1048 00000630 20000000        DCD              _QDUP-MAPOFFSET
 1049 00000634 03      _ROT    DCB              3
 1050 00000635 52 4F 54        DCB              "ROT"
 1051 00000638                 ALIGN            4
 1052 00000638         ROT
 1053 00000638 680C            LDR              R4,[R1]
 1054 0000063A 600D            STR              R5,[R1]
 1055 0000063C 684D            LDR              R5,[R1,#4]
 1056 0000063E 604C            STR              R4,[R1,#4]



ARM Macro Assembler    Page 22 


 1057 00000640                 _NEXT
  285 00000640 4770            BX               LR
 1058 00000642 00 00           ALIGN            4
 1059 00000644         
 1060 00000644         ;   2DROP ( w1 w2 -- )
 1061 00000644         ; Drop top 2 items.
 1062 00000644         
 1063 00000644 20000000        DCD              _ROT-MAPOFFSET
 1064 00000648 05      _DDROP  DCB              5
 1065 00000649 32 44 52 
              4F 50            DCB              "2DROP"
 1066 0000064E 00 00           ALIGN            4
 1067 00000650         DDROP
 1068 00000650                 _POP
  310 00000650 F851 5B04       LDR              R5,[R1],#4
 1069 00000654                 _POP
  310 00000654 F851 5B04       LDR              R5,[R1],#4
 1070 00000658                 _NEXT
  285 00000658 4770            BX               LR
 1071 0000065A 00 00           ALIGN            4
 1072 0000065C         
 1073 0000065C         ;   2DUP ( w1 w2 -- w1 w2 w1 w2 )
 1074 0000065C         ; Duplicate top 2 items.
 1075 0000065C         
 1076 0000065C 20000000        DCD              _DDROP-MAPOFFSET
 1077 00000660 04      _DDUP   DCB              4
 1078 00000661 32 44 55 
              50               DCB              "2DUP"
 1079 00000665 00 00 00        ALIGN            4
 1080 00000668         DDUP
 1081 00000668 680C            LDR              R4,[R1]
 1082 0000066A F841 5D04       STR              R5,[R1,#-4]!
 1083 0000066E F841 4D04       STR              R4,[R1,#-4]!
 1084 00000672                 _NEXT
  285 00000672 4770            BX               LR
 1085 00000674         
 1086 00000674         ;   D+ ( d1 d2 -- d3 )
 1087 00000674         ; Add top 2 double numbers.
 1088 00000674         
 1089 00000674 20000000        DCD              _DDUP-MAPOFFSET
 1090 00000678 02      _DPLUS  DCB              2
 1091 00000679 44 2B           DCB              "D+"
 1092 0000067B 00              ALIGN            4
 1093 0000067C         DPLUS
 1094 0000067C F851 4B04       LDR              R4,[R1],#4
 1095 00000680 F851 6B04       LDR              R6,[R1],#4
 1096 00000684 680F            LDR              R7,[R1]
 1097 00000686 19E4            ADDS             R4,R4,R7
 1098 00000688 600C            STR              R4,[R1]
 1099 0000068A EB45 0506       ADC              R5,R5,R6
 1100 0000068E                 _NEXT
  285 0000068E 4770            BX               LR
 1101 00000690         
 1102 00000690         ;   NOT  ( w -- !w )
 1103 00000690         ; 1"s complement.
 1104 00000690         
 1105 00000690 20000000        DCD              _DPLUS-MAPOFFSET
 1106 00000694 03      _INVER  DCB              3
 1107 00000695 4E 4F 54        DCB              "NOT"



ARM Macro Assembler    Page 23 


 1108 00000698                 ALIGN            4
 1109 00000698         INVER
 1110 00000698 EA6F 0505       MVN              R5,R5
 1111 0000069C                 _NEXT
  285 0000069C 4770            BX               LR
 1112 0000069E 00 00           ALIGN            4
 1113 000006A0         
 1114 000006A0         ;   NEGATE ( w -- -w )
 1115 000006A0         ; 2's complement.
 1116 000006A0         
 1117 000006A0 20000000        DCD              _INVER-MAPOFFSET
 1118 000006A4 06      _NEGAT  DCB              6
 1119 000006A5 4E 45 47 
              41 54 45         DCB              "NEGATE"
 1120 000006AB 00              ALIGN            4
 1121 000006AC         NEGAT
 1122 000006AC F1C5 0500       RSB              R5,R5,#0
 1123 000006B0                 _NEXT
  285 000006B0 4770            BX               LR
 1124 000006B2 00 00           ALIGN            4
 1125 000006B4         
 1126 000006B4         ;   ABS  ( w -- |w| )
 1127 000006B4         ; Absolute.
 1128 000006B4         
 1129 000006B4 20000000        DCD              _NEGAT-MAPOFFSET
 1130 000006B8 03      _ABSS   DCB              3
 1131 000006B9 41 42 53        DCB              "ABS"
 1132 000006BC                 ALIGN            4
 1133 000006BC         ABSS
 1134 000006BC F015 4F00       TST              R5,#0x80000000
 1135 000006C0 BF18 426D       RSBNE            R5,R5,#0
 1136 000006C4                 _NEXT
  285 000006C4 4770            BX               LR
 1137 000006C6 00 00           ALIGN            4
 1138 000006C8         
 1139 000006C8         ;   =  ( w w -- t )
 1140 000006C8         ; Equal?
 1141 000006C8         
 1142 000006C8 20000000        DCD              _ABSS-MAPOFFSET
 1143 000006CC 01      _EQUAL  DCB              1
 1144 000006CD 3D              DCB              "="
 1145 000006CE 00 00           ALIGN            4
 1146 000006D0         EQUAL
 1147 000006D0 F851 4B04       LDR              R4,[R1],#4
 1148 000006D4 42A5            CMPS             R5,R4
 1149 000006D6 BF0C F06F 
              0500             MVNEQ            R5,#0
 1150 000006DC 2500            MOVNE            R5,#0
 1151 000006DE                 _NEXT
  285 000006DE 4770            BX               LR
 1152 000006E0         
 1153 000006E0         ;   U<  ( w w -- t )
 1154 000006E0         ; Unsigned equal?
 1155 000006E0         
 1156 000006E0 20000000        DCD              _EQUAL-MAPOFFSET
 1157 000006E4 02      _ULESS  DCB              2
 1158 000006E5 55 3C           DCB              "U<"
 1159 000006E7 00              ALIGN            4
 1160 000006E8         ULESS



ARM Macro Assembler    Page 24 


 1161 000006E8 F851 4B04       LDR              R4,[R1],#4
 1162 000006EC 42AC            CMPS             R4,R5
 1163 000006EE BF34 F06F 
              0500             MVNCC            R5,#0
 1164 000006F4 2500            MOVCS            R5,#0
 1165 000006F6                 _NEXT
  285 000006F6 4770            BX               LR
 1166 000006F8         
 1167 000006F8         ;   < ( w w -- t )
 1168 000006F8         ; Less?
 1169 000006F8         
 1170 000006F8 20000000        DCD              _ULESS-MAPOFFSET
 1171 000006FC 01      _LESS   DCB              1
 1172 000006FD 3C              DCB              "<"
 1173 000006FE 00 00           ALIGN            4
 1174 00000700         LESS
 1175 00000700 F851 4B04       LDR              R4,[R1],#4
 1176 00000704 42AC            CMPS             R4,R5
 1177 00000706 BFB4 F06F 
              0500             MVNLT            R5,#0
 1178 0000070C 2500            MOVGE            R5,#0
 1179 0000070E                 _NEXT
  285 0000070E 4770            BX               LR
 1180 00000710         
 1181 00000710         ;   > ( w w -- t )
 1182 00000710         ; greater?
 1183 00000710         
 1184 00000710 20000000        DCD              _LESS-MAPOFFSET
 1185 00000714 01      _GREAT  DCB              1
 1186 00000715 3E              DCB              ">"
 1187 00000716 00 00           ALIGN            4
 1188 00000718         GREAT
 1189 00000718 F851 4B04       LDR              R4,[R1],#4
 1190 0000071C 42AC            CMPS             R4,R5
 1191 0000071E BFCC F06F 
              0500             MVNGT            R5,#0
 1192 00000724 2500            MOVLE            R5,#0
 1193 00000726                 _NEXT
  285 00000726 4770            BX               LR
 1194 00000728         
 1195 00000728         ;   MAX  ( w w -- max )
 1196 00000728         ; Leave maximum.
 1197 00000728         
 1198 00000728 20000000        DCD              _GREAT-MAPOFFSET
 1199 0000072C 03      _MAX    DCB              3
 1200 0000072D 4D 41 58        DCB              "MAX"
 1201 00000730                 ALIGN            4
 1202 00000730         MAX
 1203 00000730 F851 4B04       LDR              R4,[R1],#4
 1204 00000734 42AC            CMPS             R4,R5
 1205 00000736 BFC8 4625       MOVGT            R5,R4
 1206 0000073A                 _NEXT
  285 0000073A 4770            BX               LR
 1207 0000073C         
 1208 0000073C         ;   MIN  ( w w -- min )
 1209 0000073C         ; Leave minimum.
 1210 0000073C         
 1211 0000073C 20000000        DCD              _MAX-MAPOFFSET
 1212 00000740 03      _MIN    DCB              3



ARM Macro Assembler    Page 25 


 1213 00000741 4D 49 4E        DCB              "MIN"
 1214 00000744                 ALIGN            4
 1215 00000744         MIN
 1216 00000744 F851 4B04       LDR              R4,[R1],#4
 1217 00000748 42AC            CMPS             R4,R5
 1218 0000074A BFB8 4625       MOVLT            R5,R4
 1219 0000074E                 _NEXT
  285 0000074E 4770            BX               LR
 1220 00000750         
 1221 00000750         ;   +!  ( w a -- )
 1222 00000750         ; Add to memory.
 1223 00000750         
 1224 00000750 20000000        DCD              _MIN-MAPOFFSET
 1225 00000754 02      _PSTOR  DCB              2
 1226 00000755 2B 21           DCB              "+!"
 1227 00000757 00              ALIGN            4
 1228 00000758         PSTOR
 1229 00000758 F851 4B04       LDR              R4,[R1],#4
 1230 0000075C 682E            LDR              R6,[R5]
 1231 0000075E 4426            ADD              R6,R6,R4
 1232 00000760 602E            STR              R6,[R5]
 1233 00000762                 _POP
  310 00000762 F851 5B04       LDR              R5,[R1],#4
 1234 00000766                 _NEXT
  285 00000766 4770            BX               LR
 1235 00000768         
 1236 00000768         ;   2!  ( d a -- )
 1237 00000768         ; Store double number.
 1238 00000768         
 1239 00000768 20000000        DCD              _PSTOR-MAPOFFSET
 1240 0000076C 02      _DSTOR  DCB              2
 1241 0000076D 32 21           DCB              "2!"
 1242 0000076F 00              ALIGN            4
 1243 00000770         DSTOR
 1244 00000770 F851 4B04       LDR              R4,[R1],#4
 1245 00000774 F851 6B04       LDR              R6,[R1],#4
 1246 00000778 F845 4B04       STR              R4,[R5],#4
 1247 0000077C 602E            STR              R6,[R5]
 1248 0000077E                 _POP
  310 0000077E F851 5B04       LDR              R5,[R1],#4
 1249 00000782                 _NEXT
  285 00000782 4770            BX               LR
 1250 00000784         
 1251 00000784         ;   2@  ( a -- d )
 1252 00000784         ; Fetch double number.
 1253 00000784         
 1254 00000784 20000000        DCD              _DSTOR-MAPOFFSET
 1255 00000788 02      _DAT    DCB              2
 1256 00000789 32 40           DCB              "2@"
 1257 0000078B 00              ALIGN            4
 1258 0000078C         DAT
 1259 0000078C 686C            LDR              R4,[R5,#4]
 1260 0000078E F841 4D04       STR              R4,[R1,#-4]!
 1261 00000792 682D            LDR              R5,[R5]
 1262 00000794                 _NEXT
  285 00000794 4770            BX               LR
 1263 00000796 00 00           ALIGN            4
 1264 00000798         
 1265 00000798         ;   COUNT ( b -- b+1 c )



ARM Macro Assembler    Page 26 


 1266 00000798         ; Fetch length of string.
 1267 00000798         
 1268 00000798 20000000        DCD              _DAT-MAPOFFSET
 1269 0000079C 05      _COUNT  DCB              5
 1270 0000079D 43 4F 55 
              4E 54            DCB              "COUNT"
 1271 000007A2 00 00           ALIGN            4
 1272 000007A4         COUNT
 1273 000007A4 F815 4B01       LDRB             R4,[R5],#1
 1274 000007A8                 _PUSH
  305 000007A8 F841 5D04       STR              R5,[R1,#-4]!
 1275 000007AC 4625            MOV              R5,R4
 1276 000007AE                 _NEXT
  285 000007AE 4770            BX               LR
 1277 000007B0         
 1278 000007B0         ;   DNEGATE ( d -- -d )
 1279 000007B0         ; Negate double number.
 1280 000007B0         
 1281 000007B0 20000000        DCD              _COUNT-MAPOFFSET
 1282 000007B4 07      _DNEGA  DCB              7
 1283 000007B5 44 4E 45 
              47 41 54 
              45               DCB              "DNEGATE"
 1284 000007BC                 ALIGN            4
 1285 000007BC         DNEGA
 1286 000007BC 680C            LDR              R4,[R1]
 1287 000007BE EBA8 0808       SUB              R8,R8,R8
 1288 000007C2 1B34            SUBS             R4,R6,R4
 1289 000007C4 EB66 0505       SBC              R5,R6,R5
 1290 000007C8 600C            STR              R4,[R1]
 1291 000007CA                 _NEXT
  285 000007CA 4770            BX               LR
 1292 000007CC         
 1293 000007CC         ;*******************************************************
                       *******************
 1294 000007CC         ; System and user variables
 1295 000007CC         
 1296 000007CC         ;   doVAR ( -- a )
 1297 000007CC         ; Run time routine for VARIABLE and CREATE.
 1298 000007CC         
 1299 000007CC         ; DCD _DNEGA-MAPOFFSET
 1300 000007CC         ;_DOVAR DCB  COMPO+5
 1301 000007CC         ; DCB "doVAR"
 1302 000007CC         ; ALIGN 4 
 1303 000007CC         DOVAR
 1304 000007CC                 _PUSH
  305 000007CC F841 5D04       STR              R5,[R1,#-4]!
 1305 000007D0 F1AE 0501       SUB              R5,LR,#1    ; CLEAR B0
 1306 000007D4                 _UNNEST
  295 000007D4 F852 FB04       LDMFD            R2!,{PC}
 1307 000007D8                 ALIGN            4
 1308 000007D8         
 1309 000007D8         ;   doCON ( -- a ) 
 1310 000007D8         ; Run time r outine for CONSTANT.
 1311 000007D8         
 1312 000007D8         ; DCD _DOVAR-MAPOFFSET
 1313 000007D8         ;_DOCON DCB  COMPO+5
 1314 000007D8         ; DCB "doCON"
 1315 000007D8         ; ALIGN 4 



ARM Macro Assembler    Page 27 


 1316 000007D8         DOCON
 1317 000007D8                 _PUSH
  305 000007D8 F841 5D04       STR              R5,[R1,#-4]!
 1318 000007DC F85E 5C01       LDR              R5,[LR,#-1] ; clear b0
 1319 000007E0                 _UNNEST
  295 000007E0 F852 FB04       LDMFD            R2!,{PC}
 1320 000007E4         
 1321 000007E4         ;   'BOOT  ( -- a )
 1322 000007E4         ; Applicarion.
 1323 000007E4         
 1324 000007E4 20000000        DCD              _DNEGA-MAPOFFSET
 1325 000007E8 05      _TBOOT  DCB              5
 1326 000007E9 27 42 4F 
              4F 54            DCB              "'BOOT"
 1327 000007EE 00 00           ALIGN            4
 1328 000007F0         TBOOT
 1329 000007F0                 _PUSH
  305 000007F0 F841 5D04       STR              R5,[R1,#-4]!
 1330 000007F4 F103 0504       ADD              R5,R3,#4
 1331 000007F8                 _NEXT
  285 000007F8 4770            BX               LR
 1332 000007FA 00 00           ALIGN            4
 1333 000007FC         
 1334 000007FC         ;   BASE ( -- a )
 1335 000007FC         ; Storage of the radix base for numeric I/O.
 1336 000007FC         
 1337 000007FC 20000000        DCD              _TBOOT-MAPOFFSET
 1338 00000800 04      _BASE   DCB              4
 1339 00000801 42 41 53 
              45               DCB              "BASE"
 1340 00000805 00 00 00        ALIGN            4
 1341 00000808         BASE
 1342 00000808                 _PUSH
  305 00000808 F841 5D04       STR              R5,[R1,#-4]!
 1343 0000080C F103 0508       ADD              R5,R3,#8
 1344 00000810                 _NEXT
  285 00000810 4770            BX               LR
 1345 00000812 00 00           ALIGN            4
 1346 00000814         
 1347 00000814         ;   tmp  ( -- a )
 1348 00000814         ; A temporary storage location used in parse and find.
 1349 00000814         
 1350 00000814         ; DCD _BASE-MAPOFFSET
 1351 00000814         ;_TEMP DCB   COMPO+3
 1352 00000814         ; DCB "tmp"
 1353 00000814         ; ALIGN 4 
 1354 00000814         TEMP
 1355 00000814                 _PUSH
  305 00000814 F841 5D04       STR              R5,[R1,#-4]!
 1356 00000818 F103 050C       ADD              R5,R3,#12
 1357 0000081C                 _NEXT
  285 0000081C 4770            BX               LR
 1358 0000081E 00 00           ALIGN            4
 1359 00000820         
 1360 00000820         ;   SPAN ( -- a )
 1361 00000820         ; Hold character count received by EXPECT.
 1362 00000820         
 1363 00000820 20000000        DCD              _BASE-MAPOFFSET
 1364 00000824 04      _SPAN   DCB              4



ARM Macro Assembler    Page 28 


 1365 00000825 53 50 41 
              4E               DCB              "SPAN"
 1366 00000829 00 00 00        ALIGN            4
 1367 0000082C         SPAN
 1368 0000082C                 _PUSH
  305 0000082C F841 5D04       STR              R5,[R1,#-4]!
 1369 00000830 F103 0510       ADD              R5,R3,#16
 1370 00000834                 _NEXT
  285 00000834 4770            BX               LR
 1371 00000836 00 00           ALIGN            4
 1372 00000838         
 1373 00000838         ;   >IN  ( -- a )
 1374 00000838         ; Hold the character pointer while parsing input stream.
                       
 1375 00000838         
 1376 00000838 20000000        DCD              _SPAN-MAPOFFSET
 1377 0000083C 03      _INN    DCB              3
 1378 0000083D 3E 49 4E        DCB              ">IN"
 1379 00000840                 ALIGN            4
 1380 00000840         INN
 1381 00000840                 _PUSH
  305 00000840 F841 5D04       STR              R5,[R1,#-4]!
 1382 00000844 F103 0514       ADD              R5,R3,#20
 1383 00000848                 _NEXT
  285 00000848 4770            BX               LR
 1384 0000084A 00 00           ALIGN            4
 1385 0000084C         
 1386 0000084C         ;   #TIB ( -- a )
 1387 0000084C         ; Hold the current count and address of the terminal inp
                       ut buffer.
 1388 0000084C         
 1389 0000084C 20000000        DCD              _INN-MAPOFFSET
 1390 00000850 04      _NTIB   DCB              4
 1391 00000851 23 54 49 
              42               DCB              "#TIB"
 1392 00000855 00 00 00        ALIGN            4
 1393 00000858         NTIB
 1394 00000858                 _PUSH
  305 00000858 F841 5D04       STR              R5,[R1,#-4]!
 1395 0000085C F103 0518       ADD              R5,R3,#24
 1396 00000860                 _NEXT
  285 00000860 4770            BX               LR
 1397 00000862 00 00           ALIGN            4
 1398 00000864         
 1399 00000864         ;   'EVAL ( -- a )
 1400 00000864         ; Execution vector of EVAL.
 1401 00000864         
 1402 00000864 20000000        DCD              _NTIB-MAPOFFSET
 1403 00000868 05      _TEVAL  DCB              5
 1404 00000869 27 45 56 
              41 4C            DCB              "'EVAL"
 1405 0000086E 00 00           ALIGN            4
 1406 00000870         TEVAL
 1407 00000870                 _PUSH
  305 00000870 F841 5D04       STR              R5,[R1,#-4]!
 1408 00000874 F103 0520       ADD              R5,R3,#32
 1409 00000878                 _NEXT
  285 00000878 4770            BX               LR
 1410 0000087A 00 00           ALIGN            4



ARM Macro Assembler    Page 29 


 1411 0000087C         
 1412 0000087C         ;   HLD  ( -- a )
 1413 0000087C         ; Hold a pointer in building a numeric output string.
 1414 0000087C         
 1415 0000087C 20000000        DCD              _TEVAL-MAPOFFSET
 1416 00000880 03      _HLD    DCB              3
 1417 00000881 48 4C 44        DCB              "HLD"
 1418 00000884                 ALIGN            4
 1419 00000884         HLD
 1420 00000884                 _PUSH
  305 00000884 F841 5D04       STR              R5,[R1,#-4]!
 1421 00000888 F103 0524       ADD              R5,R3,#36
 1422 0000088C                 _NEXT
  285 0000088C 4770            BX               LR
 1423 0000088E 00 00           ALIGN            4
 1424 00000890         
 1425 00000890         ;   CONTEXT ( -- a )
 1426 00000890         ; A area to specify vocabulary search order.
 1427 00000890         
 1428 00000890 20000000        DCD              _HLD-MAPOFFSET
 1429 00000894 07      _CNTXT  DCB              7
 1430 00000895 43 4F 4E 
              54 45 58 
              54               DCB              "CONTEXT"
 1431 0000089C                 ALIGN            4
 1432 0000089C         CNTXT
 1433 0000089C         CRRNT
 1434 0000089C                 _PUSH
  305 0000089C F841 5D04       STR              R5,[R1,#-4]!
 1435 000008A0 F103 0528       ADD              R5,R3,#40
 1436 000008A4                 _NEXT
  285 000008A4 4770            BX               LR
 1437 000008A6 00 00           ALIGN            4
 1438 000008A8         
 1439 000008A8         ;   CP ( -- a )
 1440 000008A8         ; Point to top name in vocabulary.
 1441 000008A8         
 1442 000008A8 20000000        DCD              _CNTXT-MAPOFFSET
 1443 000008AC 02      _CP     DCB              2
 1444 000008AD 43 50           DCB              "CP"
 1445 000008AF 00              ALIGN            4
 1446 000008B0         CPP
 1447 000008B0                 _PUSH
  305 000008B0 F841 5D04       STR              R5,[R1,#-4]!
 1448 000008B4 F103 052C       ADD              R5,R3,#44
 1449 000008B8                 _NEXT
  285 000008B8 4770            BX               LR
 1450 000008BA 00 00           ALIGN            4
 1451 000008BC         
 1452 000008BC         ;   LAST ( -- a )
 1453 000008BC         ; Point to the last name in the name dictionary.
 1454 000008BC         
 1455 000008BC 20000000        DCD              _CP-MAPOFFSET
 1456 000008C0 04      _LAST   DCB              4
 1457 000008C1 4C 41 53 
              54               DCB              "LAST"
 1458 000008C5 00 00 00        ALIGN            4
 1459 000008C8         LAST
 1460 000008C8                 _PUSH



ARM Macro Assembler    Page 30 


  305 000008C8 F841 5D04       STR              R5,[R1,#-4]!
 1461 000008CC F103 0534       ADD              R5,R3,#52
 1462 000008D0                 _NEXT
  285 000008D0 4770            BX               LR
 1463 000008D2 00 00           ALIGN            4
 1464 000008D4         
 1465 000008D4         ;*******************************************************
                       *******************
 1466 000008D4         ; Common functions
 1467 000008D4         
 1468 000008D4         ;   WITHIN ( u ul uh -- t )
 1469 000008D4         ; Return true if u is within the range of ul and uh.
 1470 000008D4         
 1471 000008D4 20000000        DCD              _LAST-MAPOFFSET
 1472 000008D8 06      _WITHI  DCB              6
 1473 000008D9 57 49 54 
              48 49 4E         DCB              "WITHIN"
 1474 000008DF 00              ALIGN            4
 1475 000008E0         WITHI
 1476 000008E0                 _NEST
  290 000008E0 F842 ED04       STMFD            R2!,{LR}
 1477 000008E4 F7FF FDB6       BL               OVER
 1478 000008E8 F7FF FE10       BL               SUBB
 1479 000008EC F7FF FD82       BL               TOR
 1480 000008F0 F7FF FE0C       BL               SUBB
 1481 000008F4 F7FF FD6C       BL               RFROM
 1482 000008F8 F7FF FEF6       BL               ULESS
 1483 000008FC                 _UNNEST
  295 000008FC F852 FB04       LDMFD            R2!,{PC}
 1484 00000900         
 1485 00000900         ; Divide
 1486 00000900         
 1487 00000900         ;   UM/MOD ( udl udh u -- ur uq )
 1488 00000900         ; Unsigned divide of a double by a single. Return mod an
                       d quotient.
 1489 00000900         
 1490 00000900 20000000        DCD              _WITHI-MAPOFFSET
 1491 00000904 06      _UMMOD  DCB              6
 1492 00000905 55 4D 2F 
              4D 4F 44         DCB              "UM/MOD"
 1493 0000090B 00              ALIGN            4
 1494 0000090C         UMMOD
 1495 0000090C F04F 0701       MOV              R7,#1
 1496 00000910 F851 4B04       LDR              R4,[R1],#4
 1497 00000914 680E            LDR              R6,[R1]
 1498 00000916 19B6    UMMOD0  ADDS             R6,R6,R6
 1499 00000918 4164            ADCS             R4,R4,R4
 1500 0000091A D304            BCC              UMMOD1
 1501 0000091C EBA4 0405       SUB              R4,R4,R5
 1502 00000920 F106 0601       ADD              R6,R6,#1
 1503 00000924 E004            B                UMMOD2
 1504 00000926 1B64    UMMOD1  SUBS             R4,R4,R5
 1505 00000928 BF28 1C76       ADDCS            R6,R6,#1
 1506 0000092C D200            BCS              UMMOD2
 1507 0000092E 442C            ADD              R4,R4,R5
 1508 00000930 19FF    UMMOD2  ADDS             R7,R7,R7
 1509 00000932 D3F0            BCC              UMMOD0
 1510 00000934 4635            MOV              R5,R6
 1511 00000936 600C            STR              R4,[R1]



ARM Macro Assembler    Page 31 


 1512 00000938                 _NEXT
  285 00000938 4770            BX               LR
 1513 0000093A 00 00           ALIGN            4
 1514 0000093C         
 1515 0000093C         ;   M/MOD ( d n -- r q )
 1516 0000093C         ; Signed floored divide of double by single. Return mod 
                       and quotient.
 1517 0000093C         
 1518 0000093C 20000000        DCD              _UMMOD-MAPOFFSET
 1519 00000940 05      _MSMOD  DCB              5
 1520 00000941 4D 2F 4D 
              4F 44            DCB              "M/MOD"
 1521 00000946 00 00           ALIGN            4
 1522 00000948         MSMOD
 1523 00000948                 _NEST
  290 00000948 F842 ED04       STMFD            R2!,{LR}
 1524 0000094C F7FF FD6E       BL               DUPP
 1525 00000950 F7FF FD88       BL               ZLESS
 1526 00000954 F7FF FD6A       BL               DUPP
 1527 00000958 F7FF FD4C       BL               TOR
 1528 0000095C F7FF FCA0       BL               QBRAN
 1529 00000960 20000000        DCD              MMOD1-MAPOFFSET
 1530 00000964 F7FF FEA2       BL               NEGAT
 1531 00000968 F7FF FD44       BL               TOR
 1532 0000096C F7FF FF26       BL               DNEGA
 1533 00000970 F7FF FD2E       BL               RFROM
 1534 00000974 F7FF FD3E 
                       MMOD1   BL               TOR
 1535 00000978 F7FF FD58       BL               DUPP
 1536 0000097C F7FF FD72       BL               ZLESS
 1537 00000980 F7FF FC8E       BL               QBRAN
 1538 00000984 20000000        DCD              MMOD2-MAPOFFSET
 1539 00000988 F7FF FD2C       BL               RAT
 1540 0000098C F7FF FDB6       BL               PLUS
 1541 00000990 F7FF FD1E 
                       MMOD2   BL               RFROM
 1542 00000994 F7FF FFBA       BL               UMMOD
 1543 00000998 F7FF FD1A       BL               RFROM
 1544 0000099C F7FF FC80       BL               QBRAN
 1545 000009A0 20000000        DCD              MMOD3-MAPOFFSET
 1546 000009A4 F7FF FD4C       BL               SWAP
 1547 000009A8 F7FF FE80       BL               NEGAT
 1548 000009AC F7FF FD48       BL               SWAP
 1549 000009B0         MMOD3
 1550 000009B0                 _UNNEST
  295 000009B0 F852 FB04       LDMFD            R2!,{PC}
 1551 000009B4         
 1552 000009B4         ;   /MOD ( n n -- r q )
 1553 000009B4         ; Signed divide. Return mod and quotient.
 1554 000009B4         
 1555 000009B4 20000000        DCD              _MSMOD-MAPOFFSET
 1556 000009B8 04      _SLMOD  DCB              4
 1557 000009B9 2F 4D 4F 
              44               DCB              "/MOD"
 1558 000009BD 00 00 00        ALIGN            4
 1559 000009C0         SLMOD
 1560 000009C0                 _NEST
  290 000009C0 F842 ED04       STMFD            R2!,{LR}
 1561 000009C4 F7FF FD46       BL               OVER



ARM Macro Assembler    Page 32 


 1562 000009C8 F7FF FD4C       BL               ZLESS
 1563 000009CC F7FF FD38       BL               SWAP
 1564 000009D0 F7FF FFBA       BL               MSMOD
 1565 000009D4                 _UNNEST
  295 000009D4 F852 FB04       LDMFD            R2!,{PC}
 1566 000009D8         
 1567 000009D8         ;   MOD  ( n n -- r )
 1568 000009D8         ; Signed divide. Return mod only.
 1569 000009D8         
 1570 000009D8 20000000        DCD              _SLMOD-MAPOFFSET
 1571 000009DC 03      _MODD   DCB              3
 1572 000009DD 4D 4F 44        DCB              "MOD"
 1573 000009E0                 ALIGN            4
 1574 000009E0         MODD
 1575 000009E0                 _NEST
  290 000009E0 F842 ED04       STMFD            R2!,{LR}
 1576 000009E4 F7FF FFEC       BL               SLMOD
 1577 000009E8 F7FF FD18       BL               DROP
 1578 000009EC                 _UNNEST
  295 000009EC F852 FB04       LDMFD            R2!,{PC}
 1579 000009F0         
 1580 000009F0         ;   /    ( n n -- q )
 1581 000009F0         ; Signed divide. Return quotient only.
 1582 000009F0         
 1583 000009F0 20000000        DCD              _MODD-MAPOFFSET
 1584 000009F4 01      _SLASH  DCB              1
 1585 000009F5 2F              DCB              "/"
 1586 000009F6 00 00           ALIGN            4
 1587 000009F8         SLASH
 1588 000009F8                 _NEST
  290 000009F8 F842 ED04       STMFD            R2!,{LR}
 1589 000009FC F7FF FFE0       BL               SLMOD
 1590 00000A00 F7FF FD1E       BL               SWAP
 1591 00000A04 F7FF FD0A       BL               DROP
 1592 00000A08                 _UNNEST
  295 00000A08 F852 FB04       LDMFD            R2!,{PC}
 1593 00000A0C         
 1594 00000A0C         ;   */MOD ( n1 n2 n3 -- r q )
 1595 00000A0C         ; Multiply n1 and n2, then divide by n3. Return mod and 
                       quotient.
 1596 00000A0C         
 1597 00000A0C 20000000        DCD              _SLASH-MAPOFFSET
 1598 00000A10 05      _SSMOD  DCB              5
 1599 00000A11 2A 2F 4D 
              4F 44            DCB              "*/MOD"
 1600 00000A16 00 00           ALIGN            4
 1601 00000A18         SSMOD
 1602 00000A18                 _NEST
  290 00000A18 F842 ED04       STMFD            R2!,{LR}
 1603 00000A1C F7FF FCEA       BL               TOR
 1604 00000A20 F7FF FD92       BL               MSTAR
 1605 00000A24 F7FF FCD4       BL               RFROM
 1606 00000A28 F7FF FF8E       BL               MSMOD
 1607 00000A2C                 _UNNEST
  295 00000A2C F852 FB04       LDMFD            R2!,{PC}
 1608 00000A30         
 1609 00000A30         ;   */   ( n1 n2 n3 -- q )
 1610 00000A30         ; Multiply n1 by n2, then divide by n3. Return quotient 
                       only.



ARM Macro Assembler    Page 33 


 1611 00000A30         
 1612 00000A30 20000000        DCD              _SSMOD-MAPOFFSET
 1613 00000A34 02      _STASL  DCB              2
 1614 00000A35 2A 2F           DCB              "*/"
 1615 00000A37 00              ALIGN            4
 1616 00000A38         STASL
 1617 00000A38                 _NEST
  290 00000A38 F842 ED04       STMFD            R2!,{LR}
 1618 00000A3C F7FF FFEC       BL               SSMOD
 1619 00000A40 F7FF FCFE       BL               SWAP
 1620 00000A44 F7FF FCEA       BL               DROP
 1621 00000A48                 _UNNEST
  295 00000A48 F852 FB04       LDMFD            R2!,{PC}
 1622 00000A4C         
 1623 00000A4C         ;*******************************************************
                       *******************
 1624 00000A4C         ; Miscellaneous
 1625 00000A4C         
 1626 00000A4C         ;   ALIGN 4ED ( b -- a )
 1627 00000A4C         ; ALIGN 4 address to the cell boundary.
 1628 00000A4C         
 1629 00000A4C 20000000        DCD              _STASL-MAPOFFSET
 1630 00000A50 07      _ALGND  DCB              7
 1631 00000A51 41 4C 49 
              47 4E 45 
              44 00 00         DCB              "ALIGNED",00,00
 1632 00000A5A 00 00           ALIGN            4
 1633 00000A5C         ALGND
 1634 00000A5C F105 0503       ADD              R5,R5,#3
 1635 00000A60 F06F 0403       MVN              R4,#3
 1636 00000A64 EA05 0504       AND              R5,R5,R4
 1637 00000A68                 _NEXT
  285 00000A68 4770            BX               LR
 1638 00000A6A 00 00           ALIGN            4
 1639 00000A6C         
 1640 00000A6C         ;   >CHAR ( c -- c )
 1641 00000A6C         ; Filter non-printing characters.
 1642 00000A6C         
 1643 00000A6C 20000000        DCD              _ALGND-MAPOFFSET
 1644 00000A70 05      _TCHAR  DCB              5
 1645 00000A71 3E 43 48 
              41 52            DCB              ">CHAR"
 1646 00000A76 00 00           ALIGN            4
 1647 00000A78         TCHAR
 1648 00000A78                 _NEST
  290 00000A78 F842 ED04       STMFD            R2!,{LR}
 1649 00000A7C                 _DOLIT
  300 00000A7C F7FF FBEA       BL               DOLIT
 1650 00000A80 0000007F        DCD              0x7F
 1651 00000A84 F7FF FCF8       BL               ANDD
 1652 00000A88 F7FF FCD0       BL               DUPP        ;mask msb
 1653 00000A8C F7FF FD9A       BL               BLANK
 1654 00000A90                 _DOLIT
  300 00000A90 F7FF FBE0       BL               DOLIT
 1655 00000A94 0000007F        DCD              127
 1656 00000A98 F7FF FF22       BL               WITHI       ;check for printabl
                                                            e
 1657 00000A9C F7FF FDFC       BL               INVER
 1658 00000AA0 F7FF FBFE       BL               QBRAN



ARM Macro Assembler    Page 34 


 1659 00000AA4 20000000        DCD              TCHA1-MAPOFFSET
 1660 00000AA8 F7FF FCB8       BL               DROP
 1661 00000AAC                 _DOLIT
  300 00000AAC F7FF FBD2       BL               DOLIT
 1662 00000AB0 0000005F        DCD              '_'         ;replace non-printa
                                                            bles
 1663 00000AB4         TCHA1
 1664 00000AB4                 _UNNEST
  295 00000AB4 F852 FB04       LDMFD            R2!,{PC}
 1665 00000AB8         
 1666 00000AB8         ;   DEPTH ( -- n )
 1667 00000AB8         ; Return the depth of the data stack.
 1668 00000AB8         
 1669 00000AB8 20000000        DCD              _TCHAR-MAPOFFSET
 1670 00000ABC 05      _DEPTH  DCB              5
 1671 00000ABD 44 45 50 
              54 48            DCB              "DEPTH"
 1672 00000AC2 00 00           ALIGN            4
 1673 00000AC4         DEPTH
 1674 00000AC4                 _PUSH
  305 00000AC4 F841 5D04       STR              R5,[R1,#-4]!
 1675 00000AC8 F644 6500       MOVW             R5,#0X4E00  ; FOR F103
 1676 00000ACC F2C2 0500       MOVT             R5,#0X2000  ; for F105
 1677 00000AD0 EBA5 0501       SUB              R5,R5,R1
 1678 00000AD4 EA4F 05A5       ASR              R5,R5,#2
 1679 00000AD8 F1A5 0501       SUB              R5,R5,#1
 1680 00000ADC                 _NEXT
  285 00000ADC 4770            BX               LR
 1681 00000ADE 00 00           ALIGN            4
 1682 00000AE0         
 1683 00000AE0         ;   PICK ( ... +n -- ... w )
 1684 00000AE0         ; Copy the nth stack item to tos.
 1685 00000AE0         
 1686 00000AE0 20000000        DCD              _DEPTH-MAPOFFSET
 1687 00000AE4 04      _PICK   DCB              4
 1688 00000AE5 50 49 43 
              4B               DCB              "PICK"
 1689 00000AE9 00 00 00        ALIGN            4
 1690 00000AEC         PICK
 1691 00000AEC                 _NEST
  290 00000AEC F842 ED04       STMFD            R2!,{LR}
 1692 00000AF0 F7FF FD34       BL               ONEP
 1693 00000AF4 F7FF FD72       BL               CELLS
 1694 00000AF8 F7FF FC86       BL               SPAT
 1695 00000AFC F7FF FCFE       BL               PLUS
 1696 00000B00 F7FF FBF6       BL               AT
 1697 00000B04                 _UNNEST
  295 00000B04 F852 FB04       LDMFD            R2!,{PC}
 1698 00000B08         
 1699 00000B08         ;*******************************************************
                       *******************
 1700 00000B08         ; Memory access
 1701 00000B08         
 1702 00000B08         ;   HERE ( -- a )
 1703 00000B08         ; Return the top of the code dictionary.
 1704 00000B08         
 1705 00000B08 20000000        DCD              _PICK-MAPOFFSET
 1706 00000B0C 04      _HERE   DCB              4
 1707 00000B0D 48 45 52 



ARM Macro Assembler    Page 35 


              45               DCB              "HERE"
 1708 00000B11 00 00 00        ALIGN            4
 1709 00000B14         HERE
 1710 00000B14                 _NEST
  290 00000B14 F842 ED04       STMFD            R2!,{LR}
 1711 00000B18 F7FF FECA       BL               CPP
 1712 00000B1C F7FF FBE8       BL               AT
 1713 00000B20                 _UNNEST
  295 00000B20 F852 FB04       LDMFD            R2!,{PC}
 1714 00000B24         
 1715 00000B24         ;   PAD  ( -- a )
 1716 00000B24         ; Return the address of a temporary buffer.
 1717 00000B24         
 1718 00000B24 20000000        DCD              _HERE-MAPOFFSET
 1719 00000B28 03      _PAD    DCB              3
 1720 00000B29 50 41 44        DCB              "PAD"
 1721 00000B2C                 ALIGN            4
 1722 00000B2C         PAD
 1723 00000B2C                 _NEST
  290 00000B2C F842 ED04       STMFD            R2!,{LR}
 1724 00000B30 F7FF FFF0       BL               HERE
 1725 00000B34 F105 0550       ADD              R5,R5,#80
 1726 00000B38                 _UNNEST
  295 00000B38 F852 FB04       LDMFD            R2!,{PC}
 1727 00000B3C         
 1728 00000B3C         ;   TIB  ( -- a )
 1729 00000B3C         ; Return the address of the terminal input buffer.
 1730 00000B3C         
 1731 00000B3C 20000000        DCD              _PAD-MAPOFFSET
 1732 00000B40 03      _TIB    DCB              3
 1733 00000B41 54 49 42        DCB              "TIB"
 1734 00000B44                 ALIGN            4
 1735 00000B44         TIB
 1736 00000B44                 _PUSH
  305 00000B44 F841 5D04       STR              R5,[R1,#-4]!
 1737 00000B48 69DD            ldr              R5,[R3,#28]
 1738 00000B4A         ; MOVW R5,#0xFE00   ; NOT USER TIB?
 1739 00000B4A                 _NEXT
  285 00000B4A 4770            BX               LR
 1740 00000B4C                 ALIGN            4
 1741 00000B4C         
 1742 00000B4C         ;   @EXECUTE ( a -- )
 1743 00000B4C         ; Execute vector stored in address a.
 1744 00000B4C         
 1745 00000B4C 20000000        DCD              _TIB-MAPOFFSET
 1746 00000B50 08      _ATEXE  DCB              8
 1747 00000B51 40 45 58 
              45 43 55 
              54 45            DCB              "@EXECUTE"
 1748 00000B59 00 00 00        ALIGN            4
 1749 00000B5C         ATEXE
 1750 00000B5C 002C            MOVS             R4,R5
 1751 00000B5E                 _POP
  310 00000B5E F851 5B04       LDR              R5,[R1],#4
 1752 00000B62 6824            LDR              R4,[R4]
 1753 00000B64 F044 0401       ORR              R4,R4,#1
 1754 00000B68 BF18 4720       BXNE             R4
 1755 00000B6C                 _NEXT
  285 00000B6C 4770            BX               LR



ARM Macro Assembler    Page 36 


 1756 00000B6E 00 00           ALIGN            4
 1757 00000B70         
 1758 00000B70         ;   CMOVE ( b1 b2 u -- )
 1759 00000B70         ; Copy u bytes from b1 to b2.
 1760 00000B70         
 1761 00000B70 20000000        DCD              _ATEXE-MAPOFFSET
 1762 00000B74 05      _CMOVE  DCB              5
 1763 00000B75 43 4D 4F 
              56 45            DCB              "CMOVE"
 1764 00000B7A 00 00           ALIGN            4
 1765 00000B7C         CMOVE
 1766 00000B7C F851 6B04       LDR              R6,[R1],#4
 1767 00000B80 F851 7B04       LDR              R7,[R1],#4
 1768 00000B84 E003            B                CMOV1
 1769 00000B86 F817 4B01 
                       CMOV0   LDRB             R4,[R7],#1
 1770 00000B8A F806 4B01       STRB             R4,[R6],#1
 1771 00000B8E 002D    CMOV1   MOVS             R5,R5
 1772 00000B90 D002            BEQ              CMOV2
 1773 00000B92 F1A5 0501       SUB              R5,R5,#1
 1774 00000B96 E7F6            B                CMOV0
 1775 00000B98         CMOV2
 1776 00000B98                 _POP
  310 00000B98 F851 5B04       LDR              R5,[R1],#4
 1777 00000B9C                 _NEXT
  285 00000B9C 4770            BX               LR
 1778 00000B9E 00 00           ALIGN            4
 1779 00000BA0         
 1780 00000BA0         ;   MOVE ( a1 a2 u -- )
 1781 00000BA0         ; Copy u words from a1 to a2.
 1782 00000BA0         
 1783 00000BA0 20000000        DCD              _CMOVE-MAPOFFSET
 1784 00000BA4 04      _MOVE   DCB              4
 1785 00000BA5 4D 4F 56 
              45               DCB              "MOVE"
 1786 00000BA9 00 00 00        ALIGN            4
 1787 00000BAC F025 0503 
                       MOVE    AND              R5,R5,#-4
 1788 00000BB0 F851 6B04       LDR              R6,[R1],#4
 1789 00000BB4 F851 7B04       LDR              R7,[R1],#4
 1790 00000BB8 E003            B                MOVE1
 1791 00000BBA F857 4B04 
                       MOVE0   LDR              R4,[R7],#4
 1792 00000BBE F846 4B04       STR              R4,[R6],#4
 1793 00000BC2 002D    MOVE1   MOVS             R5,R5
 1794 00000BC4 D002            BEQ              MOVE2
 1795 00000BC6 F1A5 0504       SUB              R5,R5,#4
 1796 00000BCA E7F6            B                MOVE0
 1797 00000BCC         MOVE2
 1798 00000BCC                 _POP
  310 00000BCC F851 5B04       LDR              R5,[R1],#4
 1799 00000BD0                 _NEXT
  285 00000BD0 4770            BX               LR
 1800 00000BD2 00 00           ALIGN            4
 1801 00000BD4         
 1802 00000BD4         ;   FILL ( b u c -- )
 1803 00000BD4         ; Fill u bytes of character c to area beginning at b.
 1804 00000BD4         
 1805 00000BD4 20000000        DCD              _MOVE-MAPOFFSET



ARM Macro Assembler    Page 37 


 1806 00000BD8 04      _FILL   DCB              4
 1807 00000BD9 46 49 4C 
              4C               DCB              "FILL"
 1808 00000BDD 00 00 00        ALIGN            4
 1809 00000BE0         FILL
 1810 00000BE0 F851 6B04       LDR              R6,[R1],#4
 1811 00000BE4 F851 7B04       LDR              R7,[R1],#4
 1812 00000BE8 E000    FILL0   B                FILL1
 1813 00000BEA 462D            MOV              R5,R5
 1814 00000BEC F807 5B01 
                       FILL1   STRB             R5,[R7],#1
 1815 00000BF0 0036            MOVS             R6,R6
 1816 00000BF2 D002            BEQ              FILL2
 1817 00000BF4 F1A6 0601       SUB              R6,R6,#1
 1818 00000BF8 E7F6            B                FILL0
 1819 00000BFA         FILL2
 1820 00000BFA                 _POP
  310 00000BFA F851 5B04       LDR              R5,[R1],#4
 1821 00000BFE                 _NEXT
  285 00000BFE 4770            BX               LR
 1822 00000C00         
 1823 00000C00         ;   PACK$ ( b u a -- a )
 1824 00000C00         ; Build a countedDCB with u characters from b. Null fill
                       .
 1825 00000C00         
 1826 00000C00 20000000        DCD              _FILL-MAPOFFSET
 1827 00000C04 05      _PACKS  DCB              5
 1828 00000C05 50 41 43 
              4B 24            DCB              "PACK$"
 1829 00000C0A 00 00           ALIGN            4
 1830 00000C0C         PACKS
 1831 00000C0C                 _NEST
  290 00000C0C F842 ED04       STMFD            R2!,{LR}
 1832 00000C10 F7FF FF24       BL               ALGND
 1833 00000C14 F7FF FC0A       BL               DUPP
 1834 00000C18 F7FF FBEC       BL               TOR         ;strings only on ce
                                                            ll boundary
 1835 00000C1C F7FF FC1A       BL               OVER
 1836 00000C20 F7FF FC6C       BL               PLUS
 1837 00000C24 F7FF FC9A       BL               ONEP
 1838 00000C28                 _DOLIT
  300 00000C28 F7FF FB14       BL               DOLIT
 1839 00000C2C FFFFFFFC        DCD              0xFFFFFFFC
 1840 00000C30 F7FF FC22       BL               ANDD        ;count mod cell
 1841 00000C34                 _DOLIT
  300 00000C34 F7FF FB0E       BL               DOLIT
 1842 00000C38 00000000        DCD              0
 1843 00000C3C F7FF FC00       BL               SWAP
 1844 00000C40 F7FF FB4C       BL               STORE       ;null fill cell
 1845 00000C44 F7FF FBCE       BL               RAT
 1846 00000C48 F7FF FD0E       BL               DDUP
 1847 00000C4C F7FF FB56       BL               CSTOR
 1848 00000C50 F7FF FC84       BL               ONEP        ;save count
 1849 00000C54 F7FF FBF4       BL               SWAP
 1850 00000C58 F7FF FF90       BL               CMOVE
 1851 00000C5C F7FF FBB8       BL               RFROM
 1852 00000C60                 _UNNEST                      ;move string
  295 00000C60 F852 FB04       LDMFD            R2!,{PC}
 1853 00000C64         



ARM Macro Assembler    Page 38 


 1854 00000C64         ;*******************************************************
                       *******************
 1855 00000C64         ; Numeric output, single precision
 1856 00000C64         
 1857 00000C64         ;   DIGIT ( u -- c )
 1858 00000C64         ; Convert digit u to a character.
 1859 00000C64         
 1860 00000C64 20000000        DCD              _PACKS-MAPOFFSET
 1861 00000C68 05      _DIGIT  DCB              5
 1862 00000C69 44 49 47 
              49 54            DCB              "DIGIT"
 1863 00000C6E 00 00           ALIGN            4
 1864 00000C70         DIGIT
 1865 00000C70                 _NEST
  290 00000C70 F842 ED04       STMFD            R2!,{LR}
 1866 00000C74                 _DOLIT
  300 00000C74 F7FF FAEE       BL               DOLIT
 1867 00000C78 00000009        DCD              9
 1868 00000C7C F7FF FBEA       BL               OVER
 1869 00000C80 F7FF FD3E       BL               LESS
 1870 00000C84 F005 0507       AND              R5,R5,#7
 1871 00000C88 F7FF FC38       BL               PLUS
 1872 00000C8C F105 0530       ADD              R5,R5,#'0'
 1873 00000C90                 _UNNEST
  295 00000C90 F852 FB04       LDMFD            R2!,{PC}
 1874 00000C94         
 1875 00000C94         ;   EXTRACT ( n base -- n c )
 1876 00000C94         ; Extract the least significant digit from n.
 1877 00000C94         
 1878 00000C94 20000000        DCD              _DIGIT-MAPOFFSET
 1879 00000C98 07      _EXTRC  DCB              7
 1880 00000C99 45 58 54 
              52 41 43 
              54               DCB              "EXTRACT"
 1881 00000CA0                 ALIGN            4
 1882 00000CA0         EXTRC
 1883 00000CA0                 _NEST
  290 00000CA0 F842 ED04       STMFD            R2!,{LR}
 1884 00000CA4                 _DOLIT
  300 00000CA4 F7FF FAD6       BL               DOLIT
 1885 00000CA8 00000000        DCD              0
 1886 00000CAC F7FF FBC8       BL               SWAP
 1887 00000CB0 F7FF FE2C       BL               UMMOD
 1888 00000CB4 F7FF FBC4       BL               SWAP
 1889 00000CB8 F7FF FFDA       BL               DIGIT
 1890 00000CBC                 _UNNEST
  295 00000CBC F852 FB04       LDMFD            R2!,{PC}
 1891 00000CC0         
 1892 00000CC0         ;   <#   ( -- )
 1893 00000CC0         ; Initiate the numeric output process.
 1894 00000CC0         
 1895 00000CC0 20000000        DCD              _EXTRC-MAPOFFSET
 1896 00000CC4 02      _BDIGS  DCB              2
 1897 00000CC5 3C 23           DCB              "<#"
 1898 00000CC7 00              ALIGN            4
 1899 00000CC8         BDIGS
 1900 00000CC8                 _NEST
  290 00000CC8 F842 ED04       STMFD            R2!,{LR}
 1901 00000CCC F7FF FF2E       BL               PAD



ARM Macro Assembler    Page 39 


 1902 00000CD0 F7FF FDD8       BL               HLD
 1903 00000CD4 F7FF FB02       BL               STORE
 1904 00000CD8                 _UNNEST
  295 00000CD8 F852 FB04       LDMFD            R2!,{PC}
 1905 00000CDC         
 1906 00000CDC         ;   HOLD ( c -- )
 1907 00000CDC         ; Insert a character into the numeric output string.
 1908 00000CDC         
 1909 00000CDC 20000000        DCD              _BDIGS-MAPOFFSET
 1910 00000CE0 04      _HOLD   DCB              4
 1911 00000CE1 48 4F 4C 
              44               DCB              "HOLD"
 1912 00000CE5 00 00 00        ALIGN            4
 1913 00000CE8         HOLD
 1914 00000CE8                 _NEST
  290 00000CE8 F842 ED04       STMFD            R2!,{LR}
 1915 00000CEC F7FF FDCA       BL               HLD
 1916 00000CF0 F7FF FAFE       BL               AT
 1917 00000CF4 F7FF FC3A       BL               ONEM
 1918 00000CF8 F7FF FB98       BL               DUPP
 1919 00000CFC F7FF FDC2       BL               HLD
 1920 00000D00 F7FF FAEC       BL               STORE
 1921 00000D04 F7FF FAFA       BL               CSTOR
 1922 00000D08                 _UNNEST
  295 00000D08 F852 FB04       LDMFD            R2!,{PC}
 1923 00000D0C         
 1924 00000D0C         ;   #    ( u -- u )
 1925 00000D0C         ; Extract one digit from u and append the digit to outpu
                       t string.
 1926 00000D0C         
 1927 00000D0C 20000000        DCD              _HOLD-MAPOFFSET
 1928 00000D10 01      _DIG    DCB              1
 1929 00000D11 23              DCB              "#"
 1930 00000D12 00 00           ALIGN            4
 1931 00000D14         DIG
 1932 00000D14                 _NEST
  290 00000D14 F842 ED04       STMFD            R2!,{LR}
 1933 00000D18 F7FF FD76       BL               BASE
 1934 00000D1C F7FF FAE8       BL               AT
 1935 00000D20 F7FF FFBE       BL               EXTRC
 1936 00000D24 F7FF FFE0       BL               HOLD
 1937 00000D28                 _UNNEST
  295 00000D28 F852 FB04       LDMFD            R2!,{PC}
 1938 00000D2C         
 1939 00000D2C         ;   #S   ( u -- 0 )
 1940 00000D2C         ; Convert u until all digits are added to the output str
                       ing.
 1941 00000D2C         
 1942 00000D2C 20000000        DCD              _DIG-MAPOFFSET
 1943 00000D30 02      _DIGS   DCB              2
 1944 00000D31 23 53           DCB              "#S"
 1945 00000D33 00              ALIGN            4
 1946 00000D34         DIGS
 1947 00000D34                 _NEST
  290 00000D34 F842 ED04       STMFD            R2!,{LR}
 1948 00000D38 F7FF FFEC 
                       DIGS1   BL               DIG
 1949 00000D3C F7FF FB76       BL               DUPP
 1950 00000D40 F7FF FAAE       BL               QBRAN



ARM Macro Assembler    Page 40 


 1951 00000D44 20000000        DCD              DIGS2-MAPOFFSET
 1952 00000D48 E7F6            B                DIGS1
 1953 00000D4A         DIGS2
 1954 00000D4A                 _UNNEST
  295 00000D4A F852 FB04       LDMFD            R2!,{PC}
 1955 00000D4E 00 00           ALIGN            4
 1956 00000D50         
 1957 00000D50         ;   SIGN ( n -- )
 1958 00000D50         ; Add a minus sign to the numeric output string.
 1959 00000D50         
 1960 00000D50 20000000        DCD              _DIGS-MAPOFFSET
 1961 00000D54 04      _SIGN   DCB              4
 1962 00000D55 53 49 47 
              4E               DCB              "SIGN"
 1963 00000D59 00 00 00        ALIGN            4
 1964 00000D5C         SIGN
 1965 00000D5C                 _NEST
  290 00000D5C F842 ED04       STMFD            R2!,{LR}
 1966 00000D60 F7FF FB80       BL               ZLESS
 1967 00000D64 F7FF FA9C       BL               QBRAN
 1968 00000D68 20000000        DCD              SIGN1-MAPOFFSET
 1969 00000D6C                 _DOLIT
  300 00000D6C F7FF FA72       BL               DOLIT
 1970 00000D70 0000002D        DCD              '-'
 1971 00000D74 F7FF FFB8       BL               HOLD
 1972 00000D78         SIGN1
 1973 00000D78                 _UNNEST
  295 00000D78 F852 FB04       LDMFD            R2!,{PC}
 1974 00000D7C         
 1975 00000D7C         ;   #>   ( w -- b u )
 1976 00000D7C         ; Prepare the outputDCB to be TYPE'd.
 1977 00000D7C         
 1978 00000D7C 20000000        DCD              _SIGN-MAPOFFSET
 1979 00000D80 02      _EDIGS  DCB              2
 1980 00000D81 23 3E           DCB              "#>"
 1981 00000D83 00              ALIGN            4
 1982 00000D84         EDIGS
 1983 00000D84                 _NEST
  290 00000D84 F842 ED04       STMFD            R2!,{LR}
 1984 00000D88 F7FF FB48       BL               DROP
 1985 00000D8C F7FF FD7A       BL               HLD
 1986 00000D90 F7FF FAAE       BL               AT
 1987 00000D94 F7FF FECA       BL               PAD
 1988 00000D98 F7FF FB5C       BL               OVER
 1989 00000D9C F7FF FBB6       BL               SUBB
 1990 00000DA0                 _UNNEST
  295 00000DA0 F852 FB04       LDMFD            R2!,{PC}
 1991 00000DA4         
 1992 00000DA4         ;   str  ( n -- b u )
 1993 00000DA4         ; Convert a signed integer to a numeric string.
 1994 00000DA4         
 1995 00000DA4         ; DCD _EDIGS-MAPOFFSET
 1996 00000DA4         ;_STRR DCB  3
 1997 00000DA4         ; DCB "str"
 1998 00000DA4         ; ALIGN 4 
 1999 00000DA4         STRR
 2000 00000DA4                 _NEST
  290 00000DA4 F842 ED04       STMFD            R2!,{LR}
 2001 00000DA8 F7FF FB40       BL               DUPP



ARM Macro Assembler    Page 41 


 2002 00000DAC F7FF FB22       BL               TOR
 2003 00000DB0 F7FF FC84       BL               ABSS
 2004 00000DB4 F7FF FF88       BL               BDIGS
 2005 00000DB8 F7FF FFBC       BL               DIGS
 2006 00000DBC F7FF FB08       BL               RFROM
 2007 00000DC0 F7FF FFCC       BL               SIGN
 2008 00000DC4 F7FF FFDE       BL               EDIGS
 2009 00000DC8                 _UNNEST
  295 00000DC8 F852 FB04       LDMFD            R2!,{PC}
 2010 00000DCC         
 2011 00000DCC         ;   HEX  ( -- )
 2012 00000DCC         ; Use radix 16 as base for numeric conversions.
 2013 00000DCC         
 2014 00000DCC 20000000        DCD              _EDIGS-MAPOFFSET
 2015 00000DD0 03      _HEX    DCB              3
 2016 00000DD1 48 45 58        DCB              "HEX"
 2017 00000DD4                 ALIGN            4
 2018 00000DD4         HEX
 2019 00000DD4                 _NEST
  290 00000DD4 F842 ED04       STMFD            R2!,{LR}
 2020 00000DD8                 _DOLIT
  300 00000DD8 F7FF FA3C       BL               DOLIT
 2021 00000DDC 00000010        DCD              16
 2022 00000DE0 F7FF FD12       BL               BASE
 2023 00000DE4 F7FF FA7A       BL               STORE
 2024 00000DE8                 _UNNEST
  295 00000DE8 F852 FB04       LDMFD            R2!,{PC}
 2025 00000DEC         
 2026 00000DEC         ;   DECIMAL ( -- )
 2027 00000DEC         ; Use radix 10 as base for numeric conversions.
 2028 00000DEC         
 2029 00000DEC 20000000        DCD              _HEX-MAPOFFSET
 2030 00000DF0 07      _DECIM  DCB              7
 2031 00000DF1 44 45 43 
              49 4D 41 
              4C               DCB              "DECIMAL"
 2032 00000DF8                 ALIGN            4
 2033 00000DF8         DECIM
 2034 00000DF8                 _NEST
  290 00000DF8 F842 ED04       STMFD            R2!,{LR}
 2035 00000DFC                 _DOLIT
  300 00000DFC F7FF FA2A       BL               DOLIT
 2036 00000E00 0000000A        DCD              10
 2037 00000E04 F7FF FD00       BL               BASE
 2038 00000E08 F7FF FA68       BL               STORE
 2039 00000E0C                 _UNNEST
  295 00000E0C F852 FB04       LDMFD            R2!,{PC}
 2040 00000E10         
 2041 00000E10         ;*******************************************************
                       *******************
 2042 00000E10         ; Numeric input, single precision
 2043 00000E10         
 2044 00000E10         ;   DIGIT? ( c base -- u t )
 2045 00000E10         ; Convert a character to its numeric value. A flag indic
                       ates success.
 2046 00000E10         
 2047 00000E10 20000000        DCD              _DECIM-MAPOFFSET
 2048 00000E14 06      _DIGTQ  DCB              6
 2049 00000E15 44 49 47 



ARM Macro Assembler    Page 42 


              49 54 3F         DCB              "DIGIT?"
 2050 00000E1B 00              ALIGN            4
 2051 00000E1C         DIGTQ
 2052 00000E1C                 _NEST
  290 00000E1C F842 ED04       STMFD            R2!,{LR}
 2053 00000E20 F7FF FAE8       BL               TOR
 2054 00000E24                 _DOLIT
  300 00000E24 F7FF FA16       BL               DOLIT
 2055 00000E28 00000030        DCD              '0'
 2056 00000E2C F7FF FB6E       BL               SUBB
 2057 00000E30                 _DOLIT
  300 00000E30 F7FF FA10       BL               DOLIT
 2058 00000E34 00000009        DCD              9
 2059 00000E38 F7FF FB0C       BL               OVER
 2060 00000E3C F7FF FC60       BL               LESS
 2061 00000E40 F7FF FA2E       BL               QBRAN
 2062 00000E44 20000000        DCD              DGTQ1-MAPOFFSET
 2063 00000E48                 _DOLIT
  300 00000E48 F7FF FA04       BL               DOLIT
 2064 00000E4C 00000007        DCD              7
 2065 00000E50 F7FF FB5C       BL               SUBB
 2066 00000E54 F7FF FAEA       BL               DUPP
 2067 00000E58                 _DOLIT
  300 00000E58 F7FF F9FC       BL               DOLIT
 2068 00000E5C 0000000A        DCD              10
 2069 00000E60 F7FF FC4E       BL               LESS
 2070 00000E64 F7FF FB12       BL               ORR
 2071 00000E68 F7FF FAE0 
                       DGTQ1   BL               DUPP
 2072 00000E6C F7FF FAB0       BL               RFROM
 2073 00000E70 F7FF FC3A       BL               ULESS
 2074 00000E74                 _UNNEST
  295 00000E74 F852 FB04       LDMFD            R2!,{PC}
 2075 00000E78         
 2076 00000E78         ;   NUMBER? ( a -- n T | a F )
 2077 00000E78         ; Convert a numberDCB to integer. Push a flag on tos.
 2078 00000E78         
 2079 00000E78 20000000        DCD              _DIGTQ-MAPOFFSET
 2080 00000E7C 07      _NUMBQ  DCB              7
 2081 00000E7D 4E 55 4D 
              42 45 52 
              3F               DCB              "NUMBER?"
 2082 00000E84                 ALIGN            4
 2083 00000E84         NUMBQ
 2084 00000E84                 _NEST
  290 00000E84 F842 ED04       STMFD            R2!,{LR}
 2085 00000E88 F7FF FCBE       BL               BASE
 2086 00000E8C F7FF FA30       BL               AT
 2087 00000E90 F7FF FAB0       BL               TOR
 2088 00000E94                 _DOLIT
  300 00000E94 F7FF F9DE       BL               DOLIT
 2089 00000E98 00000000        DCD              0
 2090 00000E9C F7FF FADA       BL               OVER
 2091 00000EA0 F7FF FC80       BL               COUNT
 2092 00000EA4 F7FF FAD6       BL               OVER
 2093 00000EA8 F7FF FA8C       BL               CAT
 2094 00000EAC                 _DOLIT
  300 00000EAC F7FF F9D2       BL               DOLIT
 2095 00000EB0 0000005F        DCD              '_'



ARM Macro Assembler    Page 43 


 2096 00000EB4 F7FF FC0C       BL               EQUAL
 2097 00000EB8 F7FF F9F2       BL               QBRAN
 2098 00000EBC 20000000        DCD              NUMQ1-MAPOFFSET
 2099 00000EC0 F7FF FF88       BL               HEX
 2100 00000EC4 F7FF FABC       BL               SWAP
 2101 00000EC8 F7FF FB48       BL               ONEP
 2102 00000ECC F7FF FAB8       BL               SWAP
 2103 00000ED0 F7FF FB4C       BL               ONEM
 2104 00000ED4 F7FF FABE 
                       NUMQ1   BL               OVER
 2105 00000ED8 F7FF FA74       BL               CAT
 2106 00000EDC                 _DOLIT
  300 00000EDC F7FF F9BA       BL               DOLIT
 2107 00000EE0 0000002D        DCD              '-'
 2108 00000EE4 F7FF FBF4       BL               EQUAL
 2109 00000EE8 F7FF FA84       BL               TOR
 2110 00000EEC F7FF FAA8       BL               SWAP
 2111 00000EF0 F7FF FA78       BL               RAT
 2112 00000EF4 F7FF FB0A       BL               SUBB
 2113 00000EF8 F7FF FAA2       BL               SWAP
 2114 00000EFC F7FF FA72       BL               RAT
 2115 00000F00 F7FF FAFC       BL               PLUS
 2116 00000F04 F7FF FB8E       BL               QDUP
 2117 00000F08 F7FF F9CA       BL               QBRAN
 2118 00000F0C 20000000        DCD              NUMQ6-MAPOFFSET
 2119 00000F10 F7FF FB2C       BL               ONEM
 2120 00000F14 F7FF FA6E       BL               TOR
 2121 00000F18 F7FF FA88 
                       NUMQ2   BL               DUPP
 2122 00000F1C F7FF FA6A       BL               TOR
 2123 00000F20 F7FF FA50       BL               CAT
 2124 00000F24 F7FF FC70       BL               BASE
 2125 00000F28 F7FF F9E2       BL               AT
 2126 00000F2C F7FF FF76       BL               DIGTQ
 2127 00000F30 F7FF F9B6       BL               QBRAN
 2128 00000F34 20000000        DCD              NUMQ4-MAPOFFSET
 2129 00000F38 F7FF FA82       BL               SWAP
 2130 00000F3C F7FF FC64       BL               BASE
 2131 00000F40 F7FF F9D6       BL               AT
 2132 00000F44 F7FF FAEC       BL               STAR
 2133 00000F48 F7FF FAD8       BL               PLUS
 2134 00000F4C F7FF FA40       BL               RFROM
 2135 00000F50 F7FF FB04       BL               ONEP
 2136 00000F54 F7FF F994       BL               DONXT
 2137 00000F58 20000000        DCD              NUMQ2-MAPOFFSET
 2138 00000F5C F7FF FA42       BL               RAT
 2139 00000F60 F7FF FA6E       BL               SWAP
 2140 00000F64 F7FF FA5A       BL               DROP
 2141 00000F68 F7FF F99A       BL               QBRAN
 2142 00000F6C 20000000        DCD              NUMQ3-MAPOFFSET
 2143 00000F70 F7FF FB9C       BL               NEGAT
 2144 00000F74 F7FF FA64 
                       NUMQ3   BL               SWAP
 2145 00000F78 F000 B80C       B.W              NUMQ5
 2146 00000F7C F7FF FA28 
                       NUMQ4   BL               RFROM
 2147 00000F80 F7FF FA26       BL               RFROM
 2148 00000F84 F7FF FB64       BL               DDROP
 2149 00000F88 F7FF FB62       BL               DDROP



ARM Macro Assembler    Page 44 


 2150 00000F8C                 _DOLIT
  300 00000F8C F7FF F962       BL               DOLIT
 2151 00000F90 00000000        DCD              0
 2152 00000F94 F7FF FA4A 
                       NUMQ5   BL               DUPP
 2153 00000F98 F7FF FA1A 
                       NUMQ6   BL               RFROM
 2154 00000F9C F7FF FB58       BL               DDROP
 2155 00000FA0 F7FF FA16       BL               RFROM
 2156 00000FA4 F7FF FC30       BL               BASE
 2157 00000FA8 F7FF F998       BL               STORE
 2158 00000FAC                 _UNNEST
  295 00000FAC F852 FB04       LDMFD            R2!,{PC}
 2159 00000FB0         
 2160 00000FB0         ;*******************************************************
                       *******************
 2161 00000FB0         ; Basic I/O
 2162 00000FB0         
 2163 00000FB0         ;   KEY  ( -- c )
 2164 00000FB0         ; Wait for and return an input character.
 2165 00000FB0         
 2166 00000FB0 20000000        DCD              _NUMBQ-MAPOFFSET
 2167 00000FB4 03      _KEY    DCB              3
 2168 00000FB5 4B 45 59        DCB              "KEY"
 2169 00000FB8                 ALIGN            4
 2170 00000FB8         KEY
 2171 00000FB8                 _NEST
  290 00000FB8 F842 ED04       STMFD            R2!,{LR}
 2172 00000FBC F7FF F920 
                       KEY1    BL               QRX
 2173 00000FC0 F7FF F96E       BL               QBRAN
 2174 00000FC4 20000000        DCD              KEY1-MAPOFFSET
 2175 00000FC8                 _UNNEST
  295 00000FC8 F852 FB04       LDMFD            R2!,{PC}
 2176 00000FCC         
 2177 00000FCC         ;   SPACE ( -- )
 2178 00000FCC         ; Send the blank character to the output device.
 2179 00000FCC         
 2180 00000FCC 20000000        DCD              _KEY-MAPOFFSET
 2181 00000FD0 05      _SPACE  DCB              5
 2182 00000FD1 53 50 41 
              43 45            DCB              "SPACE"
 2183 00000FD6 00 00           ALIGN            4
 2184 00000FD8         SPACE
 2185 00000FD8                 _NEST
  290 00000FD8 F842 ED04       STMFD            R2!,{LR}
 2186 00000FDC F7FF FAF2       BL               BLANK
 2187 00000FE0 F7FF F926       BL               EMIT
 2188 00000FE4                 _UNNEST
  295 00000FE4 F852 FB04       LDMFD            R2!,{PC}
 2189 00000FE8         
 2190 00000FE8         ;   SPACES ( +n -- )
 2191 00000FE8         ; Send n spaces to the output device.
 2192 00000FE8         
 2193 00000FE8 20000000        DCD              _SPACE-MAPOFFSET
 2194 00000FEC 06      _SPACS  DCB              6
 2195 00000FED 53 50 41 
              43 45 53         DCB              "SPACES"
 2196 00000FF3 00              ALIGN            4



ARM Macro Assembler    Page 45 


 2197 00000FF4         SPACS
 2198 00000FF4                 _NEST
  290 00000FF4 F842 ED04       STMFD            R2!,{LR}
 2199 00000FF8                 _DOLIT
  300 00000FF8 F7FF F92C       BL               DOLIT
 2200 00000FFC 00000000        DCD              0
 2201 00001000 F7FF FB96       BL               MAX
 2202 00001004 F7FF F9F6       BL               TOR
 2203 00001008 F000 B802       B.W              CHAR2
 2204 0000100C F7FF FFE4 
                       CHAR1   BL               SPACE
 2205 00001010 F7FF F936 
                       CHAR2   BL               DONXT
 2206 00001014 20000000        DCD              CHAR1-MAPOFFSET
 2207 00001018                 _UNNEST
  295 00001018 F852 FB04       LDMFD            R2!,{PC}
 2208 0000101C         
 2209 0000101C         ;   TYPE ( b u -- )
 2210 0000101C         ; Output u characters from b.
 2211 0000101C         
 2212 0000101C 20000000        DCD              _SPACS-MAPOFFSET
 2213 00001020 04      _TYPEE  DCB              4
 2214 00001021 54 59 50 
              45               DCB              "TYPE"
 2215 00001025 00 00 00        ALIGN            4
 2216 00001028         TYPEE
 2217 00001028                 _NEST
  290 00001028 F842 ED04       STMFD            R2!,{LR}
 2218 0000102C F7FF F9E2       BL               TOR
 2219 00001030 F000 B806       B.W              TYPE2
 2220 00001034 F7FF FBB6 
                       TYPE1   BL               COUNT
 2221 00001038 F7FF FD1E       BL               TCHAR
 2222 0000103C F7FF F8F8       BL               EMIT
 2223 00001040 F7FF F91E 
                       TYPE2   BL               DONXT
 2224 00001044 20000000        DCD              TYPE1-MAPOFFSET
 2225 00001048 F7FF F9E8       BL               DROP
 2226 0000104C                 _UNNEST
  295 0000104C F852 FB04       LDMFD            R2!,{PC}
 2227 00001050         
 2228 00001050         ;   CR   ( -- )
 2229 00001050         ; Output a carriage return and a line feed.
 2230 00001050         
 2231 00001050 20000000        DCD              _TYPEE-MAPOFFSET
 2232 00001054 02      _CR     DCB              2
 2233 00001055 43 52           DCB              "CR"
 2234 00001057 00              ALIGN            4
 2235 00001058         CR
 2236 00001058                 _NEST
  290 00001058 F842 ED04       STMFD            R2!,{LR}
 2237 0000105C                 _DOLIT
  300 0000105C F7FF F8FA       BL               DOLIT
 2238 00001060 0000000D        DCD              CRR
 2239 00001064 F7FF F8E4       BL               EMIT
 2240 00001068                 _DOLIT
  300 00001068 F7FF F8F4       BL               DOLIT
 2241 0000106C 0000000A        DCD              LF
 2242 00001070 F7FF F8DE       BL               EMIT



ARM Macro Assembler    Page 46 


 2243 00001074                 _UNNEST
  295 00001074 F852 FB04       LDMFD            R2!,{PC}
 2244 00001078         
 2245 00001078         ;   do_$ ( -- a )
 2246 00001078         ; Return the address of a compiled string.
 2247 00001078         
 2248 00001078         ; DCD _CR-MAPOFFSET
 2249 00001078         ;_DOSTR DCB  COMPO+3
 2250 00001078         ; DCB "do$$"
 2251 00001078         ; ALIGN 4 
 2252 00001078         DOSTR
 2253 00001078                 _NEST
  290 00001078 F842 ED04       STMFD            R2!,{LR}
 2254 0000107C F7FF F9A8       BL               RFROM
 2255 00001080 F7FF F9A6       BL               RFROM       ; b0 set
 2256 00001084 F7FF FA72       BL               ONEM        ; clear b0
 2257 00001088 F7FF F9D0       BL               DUPP
 2258 0000108C F7FF FB8A       BL               COUNT       ; get addr-1 count
 2259 00001090 F7FF FA34       BL               PLUS
 2260 00001094 F7FF FCE2       BL               ALGND       ; end of string
 2261 00001098 F7FF FA60       BL               ONEP        ; restore b0
 2262 0000109C F7FF F9AA       BL               TOR         ; address after str
                                                            ing
 2263 000010A0 F7FF F9CE       BL               SWAP        ; count tugged
 2264 000010A4 F7FF F9A6       BL               TOR
 2265 000010A8                 _UNNEST
  295 000010A8 F852 FB04       LDMFD            R2!,{PC}
 2266 000010AC         
 2267 000010AC         ;   $"| ( -- a )
 2268 000010AC         ; Run time routine compiled by _". Return address of a c
                       ompiled string.
 2269 000010AC         
 2270 000010AC         ; DCD _DOSTR-MAPOFFSET
 2271 000010AC         ;_STRQP DCB  COMPO+3
 2272 000010AC         ; DCB "$$""|"
 2273 000010AC         ; ALIGN 4 
 2274 000010AC         STRQP
 2275 000010AC                 _NEST
  290 000010AC F842 ED04       STMFD            R2!,{LR}
 2276 000010B0 F7FF FFE2       BL               DOSTR
 2277 000010B4                 _UNNEST                      ;force a call to do
                                                            str
  295 000010B4 F852 FB04       LDMFD            R2!,{PC}
 2278 000010B8         
 2279 000010B8         ;   .$ ( -- )
 2280 000010B8         ; Run time routine of ." . Output a compiled string.
 2281 000010B8         
 2282 000010B8         ; DCD _STRQP-MAPOFFSET
 2283 000010B8         ;_DOTST DCB  COMPO+2
 2284 000010B8         ; DCB ".$$"
 2285 000010B8         ; ALIGN 4 
 2286 000010B8         DOTST
 2287 000010B8                 _NEST
  290 000010B8 F842 ED04       STMFD            R2!,{LR}
 2288 000010BC F7FF FB72       BL               COUNT
 2289 000010C0 F7FF FFB2       BL               TYPEE
 2290 000010C4                 _UNNEST
  295 000010C4 F852 FB04       LDMFD            R2!,{PC}
 2291 000010C8         



ARM Macro Assembler    Page 47 


 2292 000010C8         ;   ."| ( -- )
 2293 000010C8         ; Run time routine of ." . Output a compiled string.
 2294 000010C8         
 2295 000010C8         ; DCD _DOTST-MAPOFFSET
 2296 000010C8         ;_DOTQP DCB  COMPO+3
 2297 000010C8         ; DCB ".""|"
 2298 000010C8         ; ALIGN 4 
 2299 000010C8         DOTQP
 2300 000010C8                 _NEST
  290 000010C8 F842 ED04       STMFD            R2!,{LR}
 2301 000010CC F7FF FFD4       BL               DOSTR
 2302 000010D0 F7FF FFF2       BL               DOTST
 2303 000010D4                 _UNNEST
  295 000010D4 F852 FB04       LDMFD            R2!,{PC}
 2304 000010D8         
 2305 000010D8         ;   .R   ( n +n -- )
 2306 000010D8         ; Display an integer in a field of n columns, right just
                       ified.
 2307 000010D8         
 2308 000010D8 20000000        DCD              _CR-MAPOFFSET
 2309 000010DC 02      _DOTR   DCB              2
 2310 000010DD 2E 52           DCB              ".R"
 2311 000010DF 00              ALIGN            4
 2312 000010E0         DOTR
 2313 000010E0                 _NEST
  290 000010E0 F842 ED04       STMFD            R2!,{LR}
 2314 000010E4 F7FF F986       BL               TOR
 2315 000010E8 F7FF FE5C       BL               STRR
 2316 000010EC F7FF F970       BL               RFROM
 2317 000010F0 F7FF F9B0       BL               OVER
 2318 000010F4 F7FF FA0A       BL               SUBB
 2319 000010F8 F7FF FF7C       BL               SPACS
 2320 000010FC F7FF FF94       BL               TYPEE
 2321 00001100                 _UNNEST
  295 00001100 F852 FB04       LDMFD            R2!,{PC}
 2322 00001104         
 2323 00001104         ;   U.R  ( u +n -- )
 2324 00001104         ; Display an unsigned integer in n column, right justifi
                       ed.
 2325 00001104         
 2326 00001104 20000000        DCD              _DOTR-MAPOFFSET
 2327 00001108 03      _UDOTR  DCB              3
 2328 00001109 55 2E 52        DCB              "U.R"
 2329 0000110C                 ALIGN            4
 2330 0000110C         UDOTR
 2331 0000110C                 _NEST
  290 0000110C F842 ED04       STMFD            R2!,{LR}
 2332 00001110 F7FF F970       BL               TOR
 2333 00001114 F7FF FDD8       BL               BDIGS
 2334 00001118 F7FF FE0C       BL               DIGS
 2335 0000111C F7FF FE32       BL               EDIGS
 2336 00001120 F7FF F956       BL               RFROM
 2337 00001124 F7FF F996       BL               OVER
 2338 00001128 F7FF F9F0       BL               SUBB
 2339 0000112C F7FF FF62       BL               SPACS
 2340 00001130 F7FF FF7A       BL               TYPEE
 2341 00001134                 _UNNEST
  295 00001134 F852 FB04       LDMFD            R2!,{PC}
 2342 00001138         



ARM Macro Assembler    Page 48 


 2343 00001138         ;   U.   ( u -- )
 2344 00001138         ; Display an unsigned integer in free format.
 2345 00001138         
 2346 00001138 20000000        DCD              _UDOTR-MAPOFFSET
 2347 0000113C 02      _UDOT   DCB              2
 2348 0000113D 55 2E           DCB              "U."
 2349 0000113F 00              ALIGN            4
 2350 00001140         UDOT
 2351 00001140                 _NEST
  290 00001140 F842 ED04       STMFD            R2!,{LR}
 2352 00001144 F7FF FDC0       BL               BDIGS
 2353 00001148 F7FF FDF4       BL               DIGS
 2354 0000114C F7FF FE1A       BL               EDIGS
 2355 00001150 F7FF FF42       BL               SPACE
 2356 00001154 F7FF FF68       BL               TYPEE
 2357 00001158                 _UNNEST
  295 00001158 F852 FB04       LDMFD            R2!,{PC}
 2358 0000115C         
 2359 0000115C         ;   .    ( w -- )
 2360 0000115C         ; Display an integer in free format, preceeded by a spac
                       e.
 2361 0000115C         
 2362 0000115C 20000000        DCD              _UDOT-MAPOFFSET
 2363 00001160 01      _DOT    DCB              1
 2364 00001161 2E              DCB              "."
 2365 00001162 00 00           ALIGN            4
 2366 00001164         DOT
 2367 00001164                 _NEST
  290 00001164 F842 ED04       STMFD            R2!,{LR}
 2368 00001168 F7FF FB4E       BL               BASE
 2369 0000116C F7FF F8C0       BL               AT
 2370 00001170                 _DOLIT
  300 00001170 F7FF F870       BL               DOLIT
 2371 00001174 0000000A        DCD              10
 2372 00001178 F7FF F992       BL               XORR        ;?decimal
 2373 0000117C F7FF F890       BL               QBRAN
 2374 00001180 20000000        DCD              DOT1-MAPOFFSET
 2375 00001184 F7FF FFDC       BL               UDOT
 2376 00001188                 _UNNEST                      ;no,display unsigne
                                                            d
  295 00001188 F852 FB04       LDMFD            R2!,{PC}
 2377 0000118C F7FF FE0A 
                       DOT1    BL               STRR
 2378 00001190 F7FF FF22       BL               SPACE
 2379 00001194 F7FF FF48       BL               TYPEE
 2380 00001198                 _UNNEST                      ;yes, display signe
                                                            d
  295 00001198 F852 FB04       LDMFD            R2!,{PC}
 2381 0000119C         
 2382 0000119C         ;   ?    ( a -- )
 2383 0000119C         ; Display the contents in a memory cell.
 2384 0000119C         
 2385 0000119C 20000000        DCD              _DOT-MAPOFFSET
 2386 000011A0 01      _QUEST  DCB              1
 2387 000011A1 3F              DCB              "?"
 2388 000011A2 00 00           ALIGN            4
 2389 000011A4         QUEST
 2390 000011A4                 _NEST
  290 000011A4 F842 ED04       STMFD            R2!,{LR}



ARM Macro Assembler    Page 49 


 2391 000011A8 F7FF F8A2       BL               AT
 2392 000011AC F7FF FFDA       BL               DOT
 2393 000011B0                 _UNNEST
  295 000011B0 F852 FB04       LDMFD            R2!,{PC}
 2394 000011B4         
 2395 000011B4         ;*******************************************************
                       *******************
 2396 000011B4         ; Parsing
 2397 000011B4         
 2398 000011B4         ;   parse ( b u c -- b u delta ; string> )
 2399 000011B4         ; ScanDCB delimited by c. Return found string and its of
                       fset.
 2400 000011B4         
 2401 000011B4         ; DCD _QUEST-MAPOFFSET
 2402 000011B4         ;_PARS DCB  5
 2403 000011B4         ; DCB "parse"
 2404 000011B4         ; ALIGN 4 
 2405 000011B4         PARS
 2406 000011B4                 _NEST
  290 000011B4 F842 ED04       STMFD            R2!,{LR}
 2407 000011B8 F7FF FB2C       BL               TEMP
 2408 000011BC F7FF F88E       BL               STORE
 2409 000011C0 F7FF F948       BL               OVER
 2410 000011C4 F7FF F916       BL               TOR
 2411 000011C8 F7FF F930       BL               DUPP
 2412 000011CC F7FF F868       BL               QBRAN
 2413 000011D0 20000000        DCD              PARS8-MAPOFFSET
 2414 000011D4 F7FF F9CA       BL               ONEM
 2415 000011D8 F7FF FB1C       BL               TEMP
 2416 000011DC F7FF F888       BL               AT
 2417 000011E0 F7FF F9F0       BL               BLANK
 2418 000011E4 F7FF FA74       BL               EQUAL
 2419 000011E8 F7FF F85A       BL               QBRAN
 2420 000011EC 20000000        DCD              PARS3-MAPOFFSET
 2421 000011F0 F7FF F900       BL               TOR
 2422 000011F4 F7FF F9E6 
                       PARS1   BL               BLANK
 2423 000011F8 F7FF F92C       BL               OVER
 2424 000011FC F7FF F8E2       BL               CAT         ;skip leading blank
                                                            s 
 2425 00001200 F7FF F984       BL               SUBB
 2426 00001204 F7FF F92E       BL               ZLESS
 2427 00001208 F7FF FA46       BL               INVER
 2428 0000120C F7FF F848       BL               QBRAN
 2429 00001210 20000000        DCD              PARS2-MAPOFFSET
 2430 00001214 F7FF F9A2       BL               ONEP
 2431 00001218 F7FF F832       BL               DONXT
 2432 0000121C 20000000        DCD              PARS1-MAPOFFSET
 2433 00001220 F7FF F8D6       BL               RFROM
 2434 00001224 F7FF F8FA       BL               DROP
 2435 00001228                 _DOLIT
  300 00001228 F7FF F814       BL               DOLIT
 2436 0000122C 00000000        DCD              0
 2437 00001230 F7FF F8FC       BL               DUPP
 2438 00001234                 _UNNEST
  295 00001234 F852 FB04       LDMFD            R2!,{PC}
 2439 00001238 F7FF F8CA 
                       PARS2   BL               RFROM
 2440 0000123C F7FF F90A 



ARM Macro Assembler    Page 50 


                       PARS3   BL               OVER
 2441 00001240 F7FF F8FE       BL               SWAP
 2442 00001244 F7FF F8D6       BL               TOR
 2443 00001248 F7FF FAE4 
                       PARS4   BL               TEMP
 2444 0000124C F7FF F850       BL               AT
 2445 00001250 F7FF F900       BL               OVER
 2446 00001254 F7FF F8B6       BL               CAT
 2447 00001258 F7FF F958       BL               SUBB        ;scan for delimiter
                                                            
 2448 0000125C F7FF FADA       BL               TEMP
 2449 00001260 F7FF F846       BL               AT
 2450 00001264 F7FF F9AE       BL               BLANK
 2451 00001268 F7FF FA32       BL               EQUAL
 2452 0000126C F7FF F818       BL               QBRAN
 2453 00001270 20000000        DCD              PARS5-MAPOFFSET
 2454 00001274 F7FF F8F6       BL               ZLESS
 2455 00001278 F7FF F812 
                       PARS5   BL               QBRAN
 2456 0000127C 20000000        DCD              PARS6-MAPOFFSET
 2457 00001280 F7FF F96C       BL               ONEP
 2458 00001284 F7FE FFFC       BL               DONXT
 2459 00001288 20000000        DCD              PARS4-MAPOFFSET
 2460 0000128C F7FF F8CE       BL               DUPP
 2461 00001290 F7FF F8B0       BL               TOR
 2462 00001294 E009            B                PARS7
 2463 00001296 F7FF F89B 
                       PARS6   BL               RFROM
 2464 0000129A F7FF F8BF       BL               DROP
 2465 0000129E F7FF F8C5       BL               DUPP
 2466 000012A2 F7FF F95B       BL               ONEP
 2467 000012A6 F7FF F8A5       BL               TOR
 2468 000012AA F7FF F8D3 
                       PARS7   BL               OVER
 2469 000012AE F7FF F92D       BL               SUBB
 2470 000012B2 F7FF F88D       BL               RFROM
 2471 000012B6 F7FF F88B       BL               RFROM
 2472 000012BA F7FF F927       BL               SUBB
 2473 000012BE                 _UNNEST
  295 000012BE F852 FB04       LDMFD            R2!,{PC}
 2474 000012C2 F7FF F8C7 
                       PARS8   BL               OVER
 2475 000012C6 F7FF F883       BL               RFROM
 2476 000012CA F7FF F91F       BL               SUBB
 2477 000012CE                 _UNNEST
  295 000012CE F852 FB04       LDMFD            R2!,{PC}
 2478 000012D2 00 00           ALIGN            4
 2479 000012D4         
 2480 000012D4         ;   PARSE ( c -- b u ; string> )
 2481 000012D4         ; Scan input stream and return counted string delimited 
                       by c.
 2482 000012D4         
 2483 000012D4 20000000        DCD              _QUEST-MAPOFFSET
 2484 000012D8 05      _PARSE  DCB              5
 2485 000012D9 50 41 52 
              53 45            DCB              "PARSE"
 2486 000012DE 00 00           ALIGN            4
 2487 000012E0         PARSE
 2488 000012E0                 _NEST



ARM Macro Assembler    Page 51 


  290 000012E0 F842 ED04       STMFD            R2!,{LR}
 2489 000012E4 F7FF F886       BL               TOR
 2490 000012E8 F7FF FC2C       BL               TIB
 2491 000012EC F7FF FAA8       BL               INN
 2492 000012F0 F7FE FFFE       BL               AT
 2493 000012F4 F7FF F902       BL               PLUS        ;current input buff
                                                            er pointer
 2494 000012F8 F7FF FAAE       BL               NTIB
 2495 000012FC F7FE FFF8       BL               AT
 2496 00001300 F7FF FA9E       BL               INN
 2497 00001304 F7FE FFF4       BL               AT
 2498 00001308 F7FF F900       BL               SUBB        ;remaining count
 2499 0000130C F7FF F860       BL               RFROM
 2500 00001310 F7FF FF50       BL               PARS
 2501 00001314 F7FF FA94       BL               INN
 2502 00001318 F7FF FA1E       BL               PSTOR
 2503 0000131C                 _UNNEST
  295 0000131C F852 FB04       LDMFD            R2!,{PC}
 2504 00001320         
 2505 00001320         ;   .(   ( -- )
 2506 00001320         ; Output following string up to next ) .
 2507 00001320         
 2508 00001320 20000000        DCD              _PARSE-MAPOFFSET
 2509 00001324 82      _DOTPR  DCB              IMEDD+2
 2510 00001325 2E 28           DCB              ".("
 2511 00001327 00              ALIGN            4
 2512 00001328         DOTPR
 2513 00001328                 _NEST
  290 00001328 F842 ED04       STMFD            R2!,{LR}
 2514 0000132C                 _DOLIT
  300 0000132C F7FE FF92       BL               DOLIT
 2515 00001330 00000029        DCD              ')'
 2516 00001334 F7FF FFD4       BL               PARSE
 2517 00001338 F7FF FE76       BL               TYPEE
 2518 0000133C                 _UNNEST
  295 0000133C F852 FB04       LDMFD            R2!,{PC}
 2519 00001340         
 2520 00001340         ;   (    ( -- )
 2521 00001340         ; Ignore following string up to next ) . A comment.
 2522 00001340         
 2523 00001340 20000000        DCD              _DOTPR-MAPOFFSET
 2524 00001344 81      _PAREN  DCB              IMEDD+1
 2525 00001345 28              DCB              "("
 2526 00001346 00 00           ALIGN            4
 2527 00001348         PAREN   _NEST
  290 00001348 F842 ED04       STMFD            R2!,{LR}
 2528 0000134C                 _DOLIT
  300 0000134C F7FE FF82       BL               DOLIT
 2529 00001350 00000029        DCD              ')'
 2530 00001354 F7FF FFC4       BL               PARSE
 2531 00001358 F7FF F97A       BL               DDROP
 2532 0000135C                 _UNNEST
  295 0000135C F852 FB04       LDMFD            R2!,{PC}
 2533 00001360         
 2534 00001360         ;   \    ( -- )
 2535 00001360         ; Ignore following text till the end of line.
 2536 00001360         
 2537 00001360 20000000        DCD              _PAREN-MAPOFFSET
 2538 00001364 81      _BKSLA  DCB              IMEDD+1



ARM Macro Assembler    Page 52 


 2539 00001365 5C              DCB              "\\"
 2540 00001366 00 00           ALIGN            4
 2541 00001368         BKSLA
 2542 00001368                 _NEST
  290 00001368 F842 ED04       STMFD            R2!,{LR}
 2543 0000136C F7FF FA74       BL               NTIB
 2544 00001370 F7FE FFBE       BL               AT
 2545 00001374 F7FF FA64       BL               INN
 2546 00001378 F7FE FFB0       BL               STORE
 2547 0000137C                 _UNNEST
  295 0000137C F852 FB04       LDMFD            R2!,{PC}
 2548 00001380         
 2549 00001380         ;   CHAR ( -- c )
 2550 00001380         ; Parse next word and return its first character.
 2551 00001380         
 2552 00001380 20000000        DCD              _BKSLA-MAPOFFSET
 2553 00001384 04      _CHAR   DCB              4
 2554 00001385 43 48 41 
              52               DCB              "CHAR"
 2555 00001389 00 00 00        ALIGN            4
 2556 0000138C         CHAR
 2557 0000138C                 _NEST
  290 0000138C F842 ED04       STMFD            R2!,{LR}
 2558 00001390 F7FF F918       BL               BLANK
 2559 00001394 F7FF FFA4       BL               PARSE
 2560 00001398 F7FF F840       BL               DROP
 2561 0000139C F7FF F812       BL               CAT
 2562 000013A0                 _UNNEST
  295 000013A0 F852 FB04       LDMFD            R2!,{PC}
 2563 000013A4         
 2564 000013A4         ;   WORD ( c -- a ; string> )
 2565 000013A4         ; Parse a word from input stream and copy it to code dic
                       tionary.
 2566 000013A4         
 2567 000013A4 20000000        DCD              _CHAR-MAPOFFSET
 2568 000013A8 04      _WORDD  DCB              4
 2569 000013A9 57 4F 52 
              44               DCB              "WORD"
 2570 000013AD 00 00 00        ALIGN            4
 2571 000013B0         WORDD
 2572 000013B0                 _NEST
  290 000013B0 F842 ED04       STMFD            R2!,{LR}
 2573 000013B4 F7FF FF94       BL               PARSE
 2574 000013B8 F7FF FBAC       BL               HERE
 2575 000013BC F7FF F8F0       BL               CELLP
 2576 000013C0 F7FF FC24       BL               PACKS
 2577 000013C4                 _UNNEST
  295 000013C4 F852 FB04       LDMFD            R2!,{PC}
 2578 000013C8         
 2579 000013C8         ;   TOKEN ( -- a ; string> )
 2580 000013C8         ; Parse a word from input stream and copy it to name dic
                       tionary.
 2581 000013C8         
 2582 000013C8 20000000        DCD              _WORDD-MAPOFFSET
 2583 000013CC 05      _TOKEN  DCB              5
 2584 000013CD 54 4F 4B 
              45 4E            DCB              "TOKEN"
 2585 000013D2 00 00           ALIGN            4
 2586 000013D4         TOKEN



ARM Macro Assembler    Page 53 


 2587 000013D4                 _NEST
  290 000013D4 F842 ED04       STMFD            R2!,{LR}
 2588 000013D8 F7FF F8F4       BL               BLANK
 2589 000013DC F7FF FFE8       BL               WORDD
 2590 000013E0                 _UNNEST
  295 000013E0 F852 FB04       LDMFD            R2!,{PC}
 2591 000013E4         
 2592 000013E4         ;*******************************************************
                       *******************
 2593 000013E4         ; Dictionary search
 2594 000013E4         
 2595 000013E4         ;   NAME> ( na -- ca )
 2596 000013E4         ; Return a code address given a name address.
 2597 000013E4         
 2598 000013E4 20000000        DCD              _TOKEN-MAPOFFSET
 2599 000013E8 05      _NAMET  DCB              5
 2600 000013E9 4E 41 4D 
              45 3E            DCB              "NAME>"
 2601 000013EE 00 00           ALIGN            4
 2602 000013F0         NAMET
 2603 000013F0                 _NEST
  290 000013F0 F842 ED04       STMFD            R2!,{LR}
 2604 000013F4 F7FF F9D6       BL               COUNT
 2605 000013F8                 _DOLIT
  300 000013F8 F7FE FF2C       BL               DOLIT
 2606 000013FC 0000001F        DCD              0x1F
 2607 00001400 F7FF F83A       BL               ANDD
 2608 00001404 F7FF F87A       BL               PLUS
 2609 00001408 F7FF FB28       BL               ALGND
 2610 0000140C                 _UNNEST
  295 0000140C F852 FB04       LDMFD            R2!,{PC}
 2611 00001410         
 2612 00001410         ;   SAME? ( a a u -- a a f \ -0+ )
 2613 00001410         ; Compare u cells in two strings. Return 0 if identical.
                       
 2614 00001410         
 2615 00001410 20000000        DCD              _NAMET-MAPOFFSET
 2616 00001414 05      _SAMEQ  DCB              5
 2617 00001415 53 41 4D 
              45 3F            DCB              "SAME?"
 2618 0000141A 00 00           ALIGN            4
 2619 0000141C         SAMEQ
 2620 0000141C                 _NEST
  290 0000141C F842 ED04       STMFD            R2!,{LR}
 2621 00001420 F7FE FFE8       BL               TOR
 2622 00001424 F000 B822       B.W              SAME2
 2623 00001428 F7FF F814 
                       SAME1   BL               OVER
 2624 0000142C F7FE FFDA       BL               RAT
 2625 00001430 F7FF F8D4       BL               CELLS
 2626 00001434 F7FF F862       BL               PLUS
 2627 00001438 F7FE FF5A       BL               AT          ;32/16 mix-up
 2628 0000143C F7FF F80A       BL               OVER
 2629 00001440 F7FE FFD0       BL               RAT
 2630 00001444 F7FF F8CA       BL               CELLS
 2631 00001448 F7FF F858       BL               PLUS
 2632 0000144C F7FE FF50       BL               AT          ;32/16 mix-up
 2633 00001450 F7FF F85C       BL               SUBB
 2634 00001454 F7FF F8E6       BL               QDUP



ARM Macro Assembler    Page 54 


 2635 00001458 F7FE FF22       BL               QBRAN
 2636 0000145C 20000000        DCD              SAME2-MAPOFFSET
 2637 00001460 F7FE FFB6       BL               RFROM
 2638 00001464 F7FE FFDA       BL               DROP
 2639 00001468                 _UNNEST                      ;strings not equal
  295 00001468 F852 FB04       LDMFD            R2!,{PC}
 2640 0000146C F7FE FF08 
                       SAME2   BL               DONXT
 2641 00001470 20000000        DCD              SAME1-MAPOFFSET
 2642 00001474                 _DOLIT
  300 00001474 F7FE FEEE       BL               DOLIT
 2643 00001478 00000000        DCD              0
 2644 0000147C                 _UNNEST                      ;strings equal
  295 0000147C F852 FB04       LDMFD            R2!,{PC}
 2645 00001480         
 2646 00001480         ;   find ( a na -- ca na | a F )
 2647 00001480         ; Search a vocabulary for a string. Return ca and na if 
                       succeeded.
 2648 00001480         
 2649 00001480         ; DCD _SAMEQ-MAPOFFSET
 2650 00001480         ;_FIND DCB  4
 2651 00001480         ; DCB "find"
 2652 00001480         ; ALIGN 4 
 2653 00001480         FIND
 2654 00001480                 _NEST
  290 00001480 F842 ED04       STMFD            R2!,{LR}
 2655 00001484 F7FE FFDC       BL               SWAP        ; na a 
 2656 00001488 F7FE FFD0       BL               DUPP        ; na a a
 2657 0000148C F7FE FF9A       BL               CAT         ; na a count
 2658 00001490 F7FF F8AE       BL               CELLSL      ; na a count/4
 2659 00001494 F7FF F9BE       BL               TEMP
 2660 00001498 F7FE FF20       BL               STORE       ; na a
 2661 0000149C F7FE FFC6       BL               DUPP        ; na a a
 2662 000014A0 F7FE FF26       BL               AT          ; na a word1
 2663 000014A4 F7FE FFA6       BL               TOR         ; na a
 2664 000014A8 F7FF F87A       BL               CELLP       ; na a+4
 2665 000014AC F7FE FFC8       BL               SWAP        ; a+4 na
 2666 000014B0         FIND1
 2667 000014B0 F7FE FFBC       BL               DUPP        ; a+4 na na
 2668 000014B4 F7FE FEF4       BL               QBRAN
 2669 000014B8 20000000        DCD              FIND6-MAPOFFSET 
                                                            ; end of vocabulary
                                                            
 2670 000014BC F7FE FFB6       BL               DUPP        ; a+4 na na
 2671 000014C0 F7FE FF16       BL               AT          ; a+4 na name1
 2672 000014C4                 _DOLIT
  300 000014C4 F7FE FEC6       BL               DOLIT
 2673 000014C8 FFFFFF1F        DCD              MASKK
 2674 000014CC F7FE FFD4       BL               ANDD
 2675 000014D0 F7FE FF88       BL               RAT         ; a+4 na name1 word
                                                            1
 2676 000014D4 F7FE FFE4       BL               XORR        ; a+4 na ?
 2677 000014D8 F7FE FEE2       BL               QBRAN
 2678 000014DC 20000000        DCD              FIND2-MAPOFFSET
 2679 000014E0 F7FF F868       BL               CELLM       ; a+4 la
 2680 000014E4 F7FE FF04       BL               AT          ; a+4 next_na
 2681 000014E8 F7FF BFE2       B.w              FIND1       ; try next word
 2682 000014EC         FIND2
 2683 000014EC F7FF F858       BL               CELLP       ; a+4 na+4



ARM Macro Assembler    Page 55 


 2684 000014F0 F7FF F990       BL               TEMP
 2685 000014F4 F7FE FEFC       BL               AT          ; a+4 na+4 count/4
 2686 000014F8 F7FF FF90       BL               SAMEQ       ; a+4 na+4 ? 
 2687 000014FC         FIND3
 2688 000014FC F000 B80C       B.w              FIND4
 2689 00001500         FIND6
 2690 00001500 F7FE FF66       BL               RFROM       ; a+4 0 name1 -- , 
                                                            no match
 2691 00001504 F7FE FF8A       BL               DROP        ; a+4 0
 2692 00001508 F7FE FF9A       BL               SWAP        ; 0 a+4
 2693 0000150C F7FF F852       BL               CELLM       ; 0 a
 2694 00001510 F7FE FF96       BL               SWAP        ; a 0 
 2695 00001514                 _UNNEST                      ; return without a 
                                                            match
  295 00001514 F852 FB04       LDMFD            R2!,{PC}
 2696 00001518         FIND4
 2697 00001518 F7FE FEC2       BL               QBRAN       ; a+4 na+4
 2698 0000151C 20000000        DCD              FIND5-MAPOFFSET ; found a match
                                                            
 2699 00001520 F7FF F848       BL               CELLM       ; a+4 na
 2700 00001524 F7FF F846       BL               CELLM       ; a+4 la
 2701 00001528 F7FE FEE2       BL               AT          ; a+4 next_na
 2702 0000152C F7FF BFC0       B.w              FIND1       ; compare next name
                                                            
 2703 00001530         FIND5
 2704 00001530 F7FE FF4E       BL               RFROM       ; a+4 na+4 count/4
 2705 00001534 F7FE FF72       BL               DROP        ; a+4 na+4
 2706 00001538 F7FE FF82       BL               SWAP        ; na+4 a+4
 2707 0000153C F7FE FF6E       BL               DROP        ; na+4
 2708 00001540 F7FF F838       BL               CELLM       ; na
 2709 00001544 F7FE FF72       BL               DUPP        ; na na
 2710 00001548 F7FF FF52       BL               NAMET       ; na ca
 2711 0000154C F7FE FF78       BL               SWAP        ; ca na
 2712 00001550                 _UNNEST                      ; return with a mat
                                                            ch
  295 00001550 F852 FB04       LDMFD            R2!,{PC}
 2713 00001554                 ALIGN            4
 2714 00001554         
 2715 00001554         ;   NAME? ( a -- ca na | a F )
 2716 00001554         ; Search all context vocabularies for a string.
 2717 00001554         
 2718 00001554 20000000        DCD              _SAMEQ-MAPOFFSET
 2719 00001558 05      _NAMEQ  DCB              5
 2720 00001559 4E 41 4D 
              45 3F            DCB              "NAME?"
 2721 0000155E 00 00           ALIGN            4
 2722 00001560         NAMEQ
 2723 00001560                 _NEST
  290 00001560 F842 ED04       STMFD            R2!,{LR}
 2724 00001564 F7FF F99A       BL               CNTXT
 2725 00001568 F7FE FEC2       BL               AT
 2726 0000156C F7FF FF88       BL               FIND
 2727 00001570                 _UNNEST
  295 00001570 F852 FB04       LDMFD            R2!,{PC}
 2728 00001574         
 2729 00001574         ;*******************************************************
                       *******************
 2730 00001574         ; Terminal input
 2731 00001574         



ARM Macro Assembler    Page 56 


 2732 00001574         ;   ^H   ( bot eot cur -- bot eot cur )
 2733 00001574         ; Backup the cursor by one character.
 2734 00001574         
 2735 00001574         ; DCD _NAMEQ-MAPOFFSET
 2736 00001574         ;_BKSP DCB  2
 2737 00001574         ; DCB "^H"
 2738 00001574         ; ALIGN 4 
 2739 00001574         BKSP
 2740 00001574                 _NEST
  290 00001574 F842 ED04       STMFD            R2!,{LR}
 2741 00001578 F7FE FF3C       BL               TOR
 2742 0000157C F7FE FF6A       BL               OVER
 2743 00001580 F7FE FF26       BL               RFROM
 2744 00001584 F7FE FF5C       BL               SWAP
 2745 00001588 F7FE FF64       BL               OVER
 2746 0000158C F7FE FF88       BL               XORR
 2747 00001590 F7FE FE86       BL               QBRAN
 2748 00001594 20000000        DCD              BACK1-MAPOFFSET
 2749 00001598                 _DOLIT
  300 00001598 F7FE FE5C       BL               DOLIT
 2750 0000159C 00000008        DCD              BKSPP
 2751 000015A0 F7FE FE46       BL               TECHO
 2752 000015A4         ; BL ATEXE
 2753 000015A4 F7FE FFE2       BL               ONEM
 2754 000015A8 F7FF F80C       BL               BLANK
 2755 000015AC F7FE FE40       BL               TECHO
 2756 000015B0         ; BL ATEXE
 2757 000015B0                 _DOLIT
  300 000015B0 F7FE FE50       BL               DOLIT
 2758 000015B4 00000008        DCD              BKSPP
 2759 000015B8 F7FE FE3A       BL               TECHO
 2760 000015BC         ; BL ATEXE
 2761 000015BC         BACK1
 2762 000015BC                 _UNNEST
  295 000015BC F852 FB04       LDMFD            R2!,{PC}
 2763 000015C0         
 2764 000015C0         ;   TAP  ( bot eot cur c -- bot eot cur )
 2765 000015C0         ; Accept and echo the key stroke and bump the cursor.
 2766 000015C0         
 2767 000015C0         ; DCD _BKSP-MAPOFFSET
 2768 000015C0         ;_TAP DCB  3
 2769 000015C0         ; DCB "TAP"
 2770 000015C0         ; ALIGN 4 
 2771 000015C0         TAP
 2772 000015C0                 _NEST
  290 000015C0 F842 ED04       STMFD            R2!,{LR}
 2773 000015C4 F7FE FF32       BL               DUPP
 2774 000015C8 F7FE FE32       BL               TECHO
 2775 000015CC         ; BL ATEXE
 2776 000015CC F7FE FF42       BL               OVER
 2777 000015D0 F7FE FE94       BL               CSTOR
 2778 000015D4 F7FE FFC2       BL               ONEP
 2779 000015D8                 _UNNEST
  295 000015D8 F852 FB04       LDMFD            R2!,{PC}
 2780 000015DC         
 2781 000015DC         ;   kTAP ( bot eot cur c -- bot eot cur )
 2782 000015DC         ; Process a key stroke, CR or backspace.
 2783 000015DC         
 2784 000015DC         ; DCD _TAP-MAPOFFSET



ARM Macro Assembler    Page 57 


 2785 000015DC         ;_KTAP DCB  4
 2786 000015DC         ; DCB "kTAP"
 2787 000015DC         ; ALIGN 4 
 2788 000015DC         KTAP
 2789 000015DC         TTAP
 2790 000015DC                 _NEST
  290 000015DC F842 ED04       STMFD            R2!,{LR}
 2791 000015E0 F7FE FF24       BL               DUPP
 2792 000015E4                 _DOLIT
  300 000015E4 F7FE FE36       BL               DOLIT
 2793 000015E8 0000000D        DCD              CRR
 2794 000015EC F7FE FF58       BL               XORR
 2795 000015F0 F7FE FE56       BL               QBRAN
 2796 000015F4 20000000        DCD              KTAP2-MAPOFFSET
 2797 000015F8                 _DOLIT
  300 000015F8 F7FE FE2C       BL               DOLIT
 2798 000015FC 00000008        DCD              BKSPP
 2799 00001600 F7FE FF4E       BL               XORR
 2800 00001604 F7FE FE4C       BL               QBRAN
 2801 00001608 20000000        DCD              KTAP1-MAPOFFSET
 2802 0000160C F7FE FFDA       BL               BLANK
 2803 00001610 F7FF FFD6       BL               TAP
 2804 00001614                 _UNNEST
  295 00001614 F852 FB04       LDMFD            R2!,{PC}
 2805 00001618 00000000        DCD              0           ;patch
 2806 0000161C F7FF FFAA 
                       KTAP1   BL               BKSP
 2807 00001620                 _UNNEST
  295 00001620 F852 FB04       LDMFD            R2!,{PC}
 2808 00001624 F7FE FEFA 
                       KTAP2   BL               DROP
 2809 00001628 F7FE FF0A       BL               SWAP
 2810 0000162C F7FE FEF6       BL               DROP
 2811 00001630 F7FE FEFC       BL               DUPP
 2812 00001634                 _UNNEST
  295 00001634 F852 FB04       LDMFD            R2!,{PC}
 2813 00001638         
 2814 00001638         ;   ACCEPT ( b u -- b u )
 2815 00001638         ; Accept characters to input buffer. Return with actual 
                       count.
 2816 00001638         
 2817 00001638 20000000        DCD              _NAMEQ-MAPOFFSET
 2818 0000163C 06      _ACCEP  DCB              6
 2819 0000163D 41 43 43 
              45 50 54         DCB              "ACCEPT"
 2820 00001643 00              ALIGN            4
 2821 00001644         ACCEP
 2822 00001644                 _NEST
  290 00001644 F842 ED04       STMFD            R2!,{LR}
 2823 00001648 F7FE FF04       BL               OVER
 2824 0000164C F7FE FF56       BL               PLUS
 2825 00001650 F7FE FF00       BL               OVER
 2826 00001654 F7FF F808 
                       ACCP1   BL               DDUP
 2827 00001658 F7FE FF22       BL               XORR
 2828 0000165C F7FE FE20       BL               QBRAN
 2829 00001660 20000000        DCD              ACCP4-MAPOFFSET
 2830 00001664 F7FF FCA8       BL               KEY
 2831 00001668 F7FE FEE0       BL               DUPP



ARM Macro Assembler    Page 58 


 2832 0000166C F7FE FFAA       BL               BLANK
 2833 00001670                 _DOLIT
  300 00001670 F7FE FDF0       BL               DOLIT
 2834 00001674 0000007F        DCD              127
 2835 00001678 F7FF F932       BL               WITHI
 2836 0000167C F7FE FE10       BL               QBRAN
 2837 00001680 20000000        DCD              ACCP2-MAPOFFSET
 2838 00001684 F7FF FF9C       BL               TAP
 2839 00001688 E001            B                ACCP3
 2840 0000168A F7FF FFA7 
                       ACCP2   BL               KTAP
 2841 0000168E         ; BL ATEXE
 2842 0000168E         ACCP3
 2843 0000168E E7E1            B                ACCP1
 2844 00001690 F7FE FEC4 
                       ACCP4   BL               DROP
 2845 00001694 F7FE FEDE       BL               OVER
 2846 00001698 F7FE FF38       BL               SUBB
 2847 0000169C                 _UNNEST
  295 0000169C F852 FB04       LDMFD            R2!,{PC}
 2848 000016A0         
 2849 000016A0         ;   QUERY ( -- )
 2850 000016A0         ; Accept input stream to terminal input buffer.
 2851 000016A0         
 2852 000016A0 20000000        DCD              _ACCEP-MAPOFFSET
 2853 000016A4 05      _QUERY  DCB              5
 2854 000016A5 51 55 45 
              52 59            DCB              "QUERY"
 2855 000016AA 00 00           ALIGN            4
 2856 000016AC         QUERY
 2857 000016AC                 _NEST
  290 000016AC F842 ED04       STMFD            R2!,{LR}
 2858 000016B0 F7FF FA48       BL               TIB
 2859 000016B4                 _DOLIT
  300 000016B4 F7FE FDCE       BL               DOLIT
 2860 000016B8 00000050        DCD              80
 2861 000016BC F7FF FFC2       BL               ACCEP
 2862 000016C0 F7FF F8CA       BL               NTIB
 2863 000016C4 F7FE FE0A       BL               STORE
 2864 000016C8 F7FE FEA8       BL               DROP
 2865 000016CC                 _DOLIT
  300 000016CC F7FE FDC2       BL               DOLIT
 2866 000016D0 00000000        DCD              0
 2867 000016D4 F7FF F8B4       BL               INN
 2868 000016D8 F7FE FE00       BL               STORE
 2869 000016DC                 _UNNEST
  295 000016DC F852 FB04       LDMFD            R2!,{PC}
 2870 000016E0         
 2871 000016E0         ;*******************************************************
                       *******************
 2872 000016E0         ; Error handling
 2873 000016E0         
 2874 000016E0         ;   ABORT ( a -- )
 2875 000016E0         ; Reset data stack and jump to QUIT.
 2876 000016E0         
 2877 000016E0 20000000        DCD              _QUERY-MAPOFFSET
 2878 000016E4 05      _ABORT  DCB              5
 2879 000016E5 41 42 4F 
              52 54            DCB              "ABORT"



ARM Macro Assembler    Page 59 


 2880 000016EA 00 00           ALIGN            4
 2881 000016EC         ABORT
 2882 000016EC                 _NEST
  290 000016EC F842 ED04       STMFD            R2!,{LR}
 2883 000016F0 F7FF FC72       BL               SPACE
 2884 000016F4 F7FF F856       BL               COUNT
 2885 000016F8 F7FF FC96       BL               TYPEE
 2886 000016FC                 _DOLIT
  300 000016FC F7FE FDAA       BL               DOLIT
 2887 00001700 0000003F        DCD              0X3F
 2888 00001704 F7FE FD94       BL               EMIT
 2889 00001708 F7FF FCA6       BL               CR
 2890 0000170C F000 F8B2       BL               PRESE
 2891 00001710 F000 B8C0       B.W              QUIT
 2892 00001714                 ALIGN            4
 2893 00001714         
 2894 00001714         ;   _abort" ( f -- )
 2895 00001714         ; Run time routine of ABORT" . Abort with a message.
 2896 00001714         
 2897 00001714         ; DCD _ABORT-MAPOFFSET
 2898 00001714         ;_ABORQ DCB  COMPO+6
 2899 00001714         ; DCB "abort\""
 2900 00001714         ; ALIGN 4 
 2901 00001714         ABORQ
 2902 00001714                 _NEST
  290 00001714 F842 ED04       STMFD            R2!,{LR}
 2903 00001718 F7FE FDC2       BL               QBRAN
 2904 0000171C 20000000        DCD              ABOR1-MAPOFFSET ;text flag
 2905 00001720 F7FF FCAA       BL               DOSTR
 2906 00001724 F7FF F83E       BL               COUNT
 2907 00001728 F7FF FC7E       BL               TYPEE
 2908 0000172C F7FF FC94       BL               CR
 2909 00001730 F000 B8B0       B.W              QUIT
 2910 00001734 F7FF FCA0 
                       ABOR1   BL               DOSTR
 2911 00001738 F7FE FE70       BL               DROP
 2912 0000173C                 _UNNEST                      ;drop error
  295 0000173C F852 FB04       LDMFD            R2!,{PC}
 2913 00001740         
 2914 00001740         ;*******************************************************
                       *******************
 2915 00001740         ; The text interpreter
 2916 00001740         
 2917 00001740         ;   $INTERPRET  ( a -- )
 2918 00001740         ; Interpret a word. If failed, try to convert it to an i
                       nteger.
 2919 00001740         
 2920 00001740 20000000        DCD              _ABORT-MAPOFFSET
 2921 00001744 0A      _INTER  DCB              10
 2922 00001745 24 49 4E 
              54 45 52 
              50 52 45 
              54               DCB              "$INTERPRET"
 2923 0000174F 00              ALIGN            4
 2924 00001750         INTER
 2925 00001750                 _NEST
  290 00001750 F842 ED04       STMFD            R2!,{LR}
 2926 00001754 F7FF FF04       BL               NAMEQ
 2927 00001758 F7FE FF64       BL               QDUP        ;?defined



ARM Macro Assembler    Page 60 


 2928 0000175C F7FE FDA0       BL               QBRAN
 2929 00001760 20000000        DCD              INTE1-MAPOFFSET
 2930 00001764 F7FE FDC4       BL               AT
 2931 00001768                 _DOLIT
  300 00001768 F7FE FD74       BL               DOLIT
 2932 0000176C 00000040        DCD              COMPO
 2933 00001770 F7FE FE82       BL               ANDD        ;?compile only lexi
                                                            con bits
 2934 00001774 F7FF FFCE       BL               ABORQ
 2935 00001778 0D              DCB              13
 2936 00001779 20 63 6F 
              6D 70 69 
              6C 65 20 
              6F 6E 6C 
              79               DCB              " compile only"
 2937 00001786 00 00           ALIGN            4
 2938 00001788 F7FE FD74       BL               EXECU
 2939 0000178C                 _UNNEST                      ;execute defined wo
                                                            rd
  295 0000178C F852 FB04       LDMFD            R2!,{PC}
 2940 00001790 F7FF FB78 
                       INTE1   BL               NUMBQ
 2941 00001794 F7FE FD84       BL               QBRAN
 2942 00001798 20000000        DCD              INTE2-MAPOFFSET
 2943 0000179C                 _UNNEST
  295 0000179C F852 FB04       LDMFD            R2!,{PC}
 2944 000017A0 F7FF BFA4 
                       INTE2   B.W              ABORT       ;error
 2945 000017A4         
 2946 000017A4         ;   [    ( -- )
 2947 000017A4         ; Start the text interpreter.
 2948 000017A4         
 2949 000017A4 20000000        DCD              _INTER-MAPOFFSET
 2950 000017A8 81      _LBRAC  DCB              IMEDD+1
 2951 000017A9 5B              DCB              "["
 2952 000017AA 00 00           ALIGN            4
 2953 000017AC         LBRAC
 2954 000017AC                 _NEST
  290 000017AC F842 ED04       STMFD            R2!,{LR}
 2955 000017B0                 _DOLIT
  300 000017B0 F7FE FD50       BL               DOLIT
 2956 000017B4 20000000        DCD              INTER-MAPOFFSET
 2957 000017B8 F7FF F85A       BL               TEVAL
 2958 000017BC F7FE FD8E       BL               STORE
 2959 000017C0                 _UNNEST
  295 000017C0 F852 FB04       LDMFD            R2!,{PC}
 2960 000017C4         
 2961 000017C4         ;   .OK  ( -- )
 2962 000017C4         ; Display "ok" only while interpreting.
 2963 000017C4         
 2964 000017C4 20000000        DCD              _LBRAC-MAPOFFSET
 2965 000017C8 03      _DOTOK  DCB              3
 2966 000017C9 2E 4F 4B        DCB              ".OK"
 2967 000017CC                 ALIGN            4
 2968 000017CC         DOTOK
 2969 000017CC                 _NEST
  290 000017CC F842 ED04       STMFD            R2!,{LR}
 2970 000017D0                 _DOLIT
  300 000017D0 F7FE FD40       BL               DOLIT



ARM Macro Assembler    Page 61 


 2971 000017D4 20000000        DCD              INTER-MAPOFFSET
 2972 000017D8 F7FF F84A       BL               TEVAL
 2973 000017DC F7FE FD88       BL               AT
 2974 000017E0 F7FE FF76       BL               EQUAL
 2975 000017E4 F7FE FD5C       BL               QBRAN
 2976 000017E8 20000000        DCD              DOTO1-MAPOFFSET
 2977 000017EC F7FF FC6C       BL               DOTQP
 2978 000017F0 03              DCB              3
 2979 000017F1 20 6F 6B        DCB              " ok"
 2980 000017F4                 ALIGN            4
 2981 000017F4 F7FF FC30 
                       DOTO1   BL               CR
 2982 000017F8                 _UNNEST
  295 000017F8 F852 FB04       LDMFD            R2!,{PC}
 2983 000017FC         
 2984 000017FC         ;   ?STACK ( -- )
 2985 000017FC         ; Abort if the data stack underflows.
 2986 000017FC         
 2987 000017FC 20000000        DCD              _DOTOK-MAPOFFSET
 2988 00001800 06      _QSTAC  DCB              6
 2989 00001801 3F 53 54 
              41 43 4B         DCB              "?STACK"
 2990 00001807 00              ALIGN            4
 2991 00001808         QSTAC
 2992 00001808                 _NEST
  290 00001808 F842 ED04       STMFD            R2!,{LR}
 2993 0000180C F7FF F95A       BL               DEPTH
 2994 00001810 F7FE FE28       BL               ZLESS       ;check only for und
                                                            erflow
 2995 00001814 F7FF FF7E       BL               ABORQ
 2996 00001818 0A              DCB              10
 2997 00001819 20 75 6E 
              64 65 72 
              66 6C 6F 
              77               DCB              " underflow"
 2998 00001823 00              ALIGN            4
 2999 00001824                 _UNNEST
  295 00001824 F852 FB04       LDMFD            R2!,{PC}
 3000 00001828         
 3001 00001828         ;   EVAL ( -- )
 3002 00001828         ; Interpret the input stream.
 3003 00001828         
 3004 00001828 20000000        DCD              _QSTAC-MAPOFFSET
 3005 0000182C 04      _EVAL   DCB              4
 3006 0000182D 45 56 41 
              4C               DCB              "EVAL"
 3007 00001831 00 00 00        ALIGN            4
 3008 00001834         EVAL
 3009 00001834                 _NEST
  290 00001834 F842 ED04       STMFD            R2!,{LR}
 3010 00001838 F7FF FDCC 
                       EVAL1   BL               TOKEN
 3011 0000183C F7FE FDF6       BL               DUPP
 3012 00001840 F7FE FDC0       BL               CAT         ;?input stream empt
                                                            y
 3013 00001844 F7FE FD2C       BL               QBRAN
 3014 00001848 20000000        DCD              EVAL2-MAPOFFSET
 3015 0000184C F7FF F810       BL               TEVAL
 3016 00001850 F7FF F984       BL               ATEXE



ARM Macro Assembler    Page 62 


 3017 00001854 F7FF FFD8       BL               QSTAC       ;evaluate input, ch
                                                            eck stack
 3018 00001858 F7FF BFEE       B.W              EVAL1
 3019 0000185C F7FE FDDE 
                       EVAL2   BL               DROP
 3020 00001860 F7FF FFB4       BL               DOTOK
 3021 00001864                 _UNNEST                      ;prompt
  295 00001864 F852 FB04       LDMFD            R2!,{PC}
 3022 00001868                 ALIGN            4
 3023 00001868         
 3024 00001868         ;   PRESET ( -- )
 3025 00001868         ; Reset data stack pointer and the terminal input buffer
                       .
 3026 00001868         
 3027 00001868 20000000        DCD              _EVAL-MAPOFFSET
 3028 0000186C 06      _PRESE  DCB              6
 3029 0000186D 50 52 45 
              53 45 54         DCB              "PRESET"
 3030 00001873 00              ALIGN            4
 3031 00001874         PRESE
 3032 00001874                 _NEST
  290 00001874 F842 ED04       STMFD            R2!,{LR}
 3033 00001878 F644 6100       MOVW             R1,#0X4E00  ; init SP0 F103
 3034 0000187C F2C2 0100       MOVT             R1,#0X2000  ; for F105
 3035 00001880 F240 0000       MOVW             R0,#0       ; init TOS
 3036 00001884                 _UNNEST
  295 00001884 F852 FB04       LDMFD            R2!,{PC}
 3037 00001888         
 3038 00001888         ;   QUIT ( -- )
 3039 00001888         ; Reset return stack pointer and start text interpreter.
                       
 3040 00001888         
 3041 00001888 20000000        DCD              _PRESE-MAPOFFSET
 3042 0000188C 04      _QUIT   DCB              4
 3043 0000188D 51 55 49 
              54               DCB              "QUIT"
 3044 00001891 00 00 00        ALIGN            4
 3045 00001894         QUIT
 3046 00001894                 _NEST
  290 00001894 F842 ED04       STMFD            R2!,{LR}
 3047 00001898 F644 7200       MOVW             R2,#0X4F00  ; FOR F103 RP0 MACHINE STACK
 3048 0000189C F2C2 0200       MOVT             R2,#0X2000  ; for F103
 3049 000018A0 F7FF FF84 
                       QUIT1   BL               LBRAC       ;start interpretati
                                                            on
 3050 000018A4 F7FF FF02 
                       QUIT2   BL               QUERY       ;get input
 3051 000018A8 F7FF FFC4       BL               EVAL
 3052 000018AC F7FE FD04       BL               BRAN
 3053 000018B0 20000000        DCD              QUIT2-MAPOFFSET ;continue till 
                                                            error
 3054 000018B4         
 3055 000018B4         ;*******************************************************
                       *******************
 3056 000018B4         ; Flash memory interface
 3057 000018B4         
 3058 000018B4         ;FLASH EQU 0x40023C00
 3059 000018B4 40022000 
                       FLASH   EQU              0x40022000  ; Addr for F105 Ths



ARM Macro Assembler    Page 63 


                                                            i address is also F
                                                            LASH_ACR
 3060 000018B4 00000004 
                       FLASH_KEYR
                               EQU              0X04
 3061 000018B4 0000000C 
                       FLASH_SR
                               EQU              0x0C
 3062 000018B4 00000010 
                       FLASH_CR
                               EQU              0X10
 3063 000018B4 45670123 
                       FLASH_KEY1
                               EQU              0x45670123
 3064 000018B4 CDEF89AB 
                       FLASH_KEY2
                               EQU              0xCDEF89AB  ; RDPRT key = 0x00A
                                                            ; 5??
 3065 000018B4         
 3066 000018B4         UNLOCK                               ; unlock flash memo
                                                            ry  Note must have 
                                                            HSI running! 
 3067 000018B4 4821            ldr              r0, =FLASH
 3068 000018B6 4C22            ldr              r4, =FLASH_KEY1
 3069 000018B8 6044            str              r4, [r0, #0x4]
 3070 000018BA 4C22            ldr              r4, =FLASH_KEY2
 3071 000018BC 6044            str              r4, [r0, #0x4]
 3072 000018BE         ; mov r4, #0x200  ; PSIZE 32 bits  ??  16 bits on F105
 3073 000018BE         ; str r4, [r0, #0x10]  ; _CR  no Psize in F105 always 16
                        bits
 3074 000018BE         
 3075 000018BE                 _NEXT
  285 000018BE 4770            BX               LR


 3076 000018C0         WAIT_BSY
 3077 000018C0 481E            ldr              r0, =FLASH
 3078 000018C2 68C4    WAIT1   ldr              r4, [r0, #0x0C] ; FLASH_SR
 3079 000018C4         ;
 3080 000018C4 F014 0401       ands             r4, #0x0001 ; BSY
 3081 000018C8 D1FB            bne              WAIT1
 3082 000018CA                 _NEXT
  285 000018CA 4770            BX               LR
 3083 000018CC                 ALIGN            4
 3084 000018CC         
 3085 000018CC         ;   ERASE_SECTOR    ( sector -- )
 3086 000018CC         ;   Erase one sector of flash memory.  Sector=0 to 11
 3087 000018CC         ; F105 are 8K F40x are 16K and procesure is a little dif
                       ferent
 3088 000018CC         
 3089 000018CC 20000000        DCD              _QUIT-MAPOFFSET
 3090 000018D0 0C      _ESECT  DCB              12
 3091 000018D1 45 52 41 
              53 45 5F 
              53 45 43 
              54 4F 52         DCB              "ERASE_SECTOR" ; note only 1K n
                                                            ot 8K!!!
 3092 000018DD 00 00 00        ALIGN            4
 3093 000018E0         
 3094 000018E0         ESECT                                ; sector --
 3095 000018E0                 _NEST



ARM Macro Assembler    Page 64 


 ???? 000018E0 F842 ED04       STMFD            R2!,{LR}
 ???? 000018E4 4815            LDR              R0, =FLASH
 ???? 000018E6 F04F 0402       MOV              R4,#02
 ???? 000018EA 6104            str              R4,[R0, #0x10] ; FLASH_CR
 ???? 000018EC F445 3500       orr              R5,R5,#0x20000
 ???? 000018F0 EA4F 2585       lsl              R5,R5,#0x8     ; 1k Each page 400H
 ???? 000018F4 6145            str              R5,[R0, #0x14] ; _AR
 ???? 000018F6 F044 0442       orr              R4,R4, #0x42 ; PER BIT
 ???? 000018FA 6104            str              R4,[R0, #0x10] ; 
 ???? 000018FC F7FF FFE0       bl               WAIT_BSY
 ???? 00001900 F851 5B04       LDR              R5,[R1],#4
 ???? 00001904 F852 FB04       LDMFD            R2!,{PC}

 ???? 00001908 5B04  ???? ; Left over from binary edit ignore
 ???? 0000190A F852 FB04      ; same as above  LDMFD            R2!,{PC}
 00 00           align            4 

 ???? 00001910 200018D0        DCD    _ESECT-MAPOFFSET

 ???? 00001914 03     _HISTR   DCD 03 
 ???? 00001915 48 49 21        DCB              "HI!"
 ???? 00001918                 ALIGN            4
 ???? 00001918         
 ???? 00001918         HISTR                                ; wdata address -- 
                                                             word I! for F103
 ???? 00001918                 _NEST
 ???? 00001918 F842 ED04       STMFD            R2!,{LR}
 ???? 0000191C F7FF FFD0       BL               WAIT_BSY ; SHOULD BE UNLOCK BUT OK
 ???? 00001920 F04F 0401       MOV              R4,#1    ;
 ???? 00001924 6104            str              R4,[R0, #0x10] ; ENABLE
 ???? 00001926 F7FE FCF3       BL               H!
 ???? 0000192A F7FF FFC9       BL               WAIT_BSY
 ???? 0000192E F04F 0400       MOV              R4,#0
 ???? 00001932 6104            str              R4,[R0, #0x10] ; DISABLE
 ???? 00001934 F852 FB04       LDMFD            R2!,{PC}
 ???? 00001938 F852 FB04  ; Another extra after binary edit
 ???? 0000193C                 ALIGN            4
 ???? 0000193C 20000000
 ???? 00001940 01234567
 ???? 00001944 89ABCDEF        LTORG
 ???? 00001948
 ???? 00001948         ;   TURNKEY ( -- )
 ???? 00001948         ; Copy dictionary from RAM to flash.
 ???? 00001948         
 ???? 00001948 20000000        DCD              _HISTR-MAPOFFSET
 ???? 0000194C 07      _TURN   DCB              7
 ???? 0000194D 54 55 52 
              4E 4B 45 
              59               DCB              "TURNKEY"
 ???? 00001954                 ALIGN            4
 ???? 00001954 F842 ED04       STMFD            R2!,{LR}
 ???? 00001958 F7FE FC7C       BL               DOLIT
 ???? 0000195C 4F00 2000       DCD              0x20004F00         ; BOOT USER
 ???? 00001960 F7FE FC78       BL               DOLIT
 ???? 00001964 01D4 0020       DCD              0x200001D4         ; UPDATED USER
 ???? 00001968 F7FE FC74       BL               DOLIT
 ???? 0000196C 0040 0000       DCD              0x00000040         ; SIZE  
 ???? 00001970 F7FF F91C       BL               MOVE
 ???? 00001974 F7FE FC6E       BL               DOLIT
 ???? 00001978 0000 2000        DCD             0x20000000
 ???? 0000197C                 _DOLIT
 ???? 0000197C F7FE FC6A       BL               DOLIT
 ???? 00001980 0000 0800       DCD              0x8000000
 ???? 00001984 F7FE FF94       BL               CPP
 ???? 00001988 F7FE FCB2       BL               AT
 ???? 0000198C F7FE FC62       BL               DOLIT
 ???? 00001990 4FFF 0000       DCD              0x00004FFF   
 ???? 00001994 F7FE FD70       BL               AND
 ???? 00001998 F7FE 3AFE       BL               2/     \ 16 BIT TRANSFERS
 ???? 0000199C F7FE FD2A       BL               TOR   \ FOR
                         	TURNK1
 ???? 000019A0 F7FE FD58       BL               OVER
 ???? 000019A4 F7FE FCBE       BL               H@
 ???? 000019A8 F7FE FD54       BL               OVER
 ???? 000019AC F7FF FFB4       BL               HI!
 ???? 000019B0 F7FE FD46       BL               SWAP
 ???? 000019B4 F7FE FDE2       BL               2+
 ???? 000019B8 F7FE FD42       BL               SWAP
 ???? 000019BC F7FE FDDE       BL               2+
 ???? 000019C0 F7FE FC5E       BL               DONXT
 ???? 000019C4 19A0 2000       DCD              TURNK1-MAPOFFSET ; 0x200019A0
 ???? 000019C8 F7FE FE42       BL               2DROP
 ???? 000019DC F852 FB04       LDMFD            R2!,{PC}   
 ???? 000019D0                 ;  NOT USED


ARM Macro Assembler    Page 66 


 3190 000019E4         ;*******************************************************
                       *******************
 3191 000019E4         ; The compiler
 3192 000019E4         
 3193 000019E4         ;   '    ( -- ca )
 3194 000019E4         ; Search context vocabularies for the next word in input
                        stream.
 3195 000019E4         
 3196 000019E4 20000000        DCD              _TURN-MAPOFFSET
 3197 000019E8 01      _TICK   DCB              1
 3198 000019E9 27              DCB              "'"
 3199 000019EA 00 00           ALIGN            4
 3200 000019EC         TICK
 3201 000019EC                 _NEST
  290 000019EC F842 ED04       STMFD            R2!,{LR}
 3202 000019F0 F7FF FCF0       BL               TOKEN
 3203 000019F4 F7FF FDB4       BL               NAMEQ       ;?defined
 3204 000019F8 F7FE FC52       BL               QBRAN
 3205 000019FC 20000000        DCD              TICK1-MAPOFFSET
 3206 00001A00                 _UNNEST                      ;yes, push code add
                                                            ress
  295 00001A00 F852 FB04       LDMFD            R2!,{PC}
 3207 00001A04 F7FF BE72 
                       TICK1   B.W              ABORT       ;no, error
 3208 00001A08         
 3209 00001A08         ;   ALLOT ( n -- )
 3210 00001A08         ; Allocate n bytes to the ram area.
 3211 00001A08         
 3212 00001A08 20000000        DCD              _TICK-MAPOFFSET
 3213 00001A0C 05      _ALLOT  DCB              5
 3214 00001A0D 41 4C 4C 
              4F 54            DCB              "ALLOT"
 3215 00001A12 00 00           ALIGN            4
 3216 00001A14         ALLOT
 3217 00001A14                 _NEST
  290 00001A14 F842 ED04       STMFD            R2!,{LR}
 3218 00001A18 F7FE FF4A       BL               CPP
 3219 00001A1C F7FE FE9C       BL               PSTOR
 3220 00001A20                 _UNNEST                      ;adjust code pointe
                                                            r
  295 00001A20 F852 FB04       LDMFD            R2!,{PC}
 3221 00001A24         
 3222 00001A24         ;   ,    ( w -- )
 3223 00001A24         ; Compile an integer into the code dictionary.
 3224 00001A24         
 3225 00001A24 20000000        DCD              _ALLOT-MAPOFFSET
 3226 00001A28 01 2C   _COMMA  DCB              1,","
 3227 00001A2A 00 00           ALIGN            4
 3228 00001A2C         COMMA
 3229 00001A2C                 _NEST
  290 00001A2C F842 ED04       STMFD            R2!,{LR}
 3230 00001A30 F7FF F870       BL               HERE
 3231 00001A34 F7FE FCFA       BL               DUPP
 3232 00001A38 F7FE FDB2       BL               CELLP       ;cell boundary
 3233 00001A3C F7FE FF38       BL               CPP
 3234 00001A40 F7FE FC4C       BL               STORE
 3235 00001A44 F7FE FC4A       BL               STORE
 3236 00001A48                 _UNNEST                      ;adjust code pointe
                                                            r, compile



ARM Macro Assembler    Page 67 


  295 00001A48 F852 FB04       LDMFD            R2!,{PC}
 3237 00001A4C         
 3238 00001A4C         ;   [COMPILE]   ( -- ; string> )
 3239 00001A4C         ; Compile the next immediate word into code dictionary.
 3240 00001A4C         
 3241 00001A4C 20000000        DCD              _COMMA-MAPOFFSET
 3242 00001A50 89      _BCOMP  DCB              IMEDD+9
 3243 00001A51 5B 43 4F 
              4D 50 49 
              4C 45 5D         DCB              "[COMPILE]"
 3244 00001A5A 00 00           ALIGN            4
 3245 00001A5C         BCOMP
 3246 00001A5C                 _NEST
  290 00001A5C F842 ED04       STMFD            R2!,{LR}
 3247 00001A60 F7FF FFC4       BL               TICK
 3248 00001A64 F7FF FFE2       BL               COMMA
 3249 00001A68                 _UNNEST
  295 00001A68 F852 FB04       LDMFD            R2!,{PC}
 3250 00001A6C         
 3251 00001A6C         ;   COMPILE ( -- )
 3252 00001A6C         ; Compile the next address in colon list to code diction
                       ary.
 3253 00001A6C         
 3254 00001A6C 20000000        DCD              _BCOMP-MAPOFFSET
 3255 00001A70 47      _COMPI  DCB              COMPO+7
 3256 00001A71 43 4F 4D 
              50 49 4C 
              45               DCB              "COMPILE"
 3257 00001A78                 ALIGN            4
 3258 00001A78         COMPI
 3259 00001A78                 _NEST
  290 00001A78 F842 ED04       STMFD            R2!,{LR}
 3260 00001A7C F7FE FCA8       BL               RFROM
 3261 00001A80 F025 0501       BIC              R5,R5,#1
 3262 00001A84 F7FE FCD2       BL               DUPP
 3263 00001A88 F7FE FC32       BL               AT
 3264 00001A8C F000 F9DA       BL               CALLC       ;compile BL instruc
                                                            tion
 3265 00001A90 F7FE FD86       BL               CELLP
 3266 00001A94 F045 0501       ORR              R5,R5,#1
 3267 00001A98 F7FE FCAC       BL               TOR
 3268 00001A9C                 _UNNEST                      ;adjust return addr
                                                            ess
  295 00001A9C F852 FB04       LDMFD            R2!,{PC}
 3269 00001AA0         
 3270 00001AA0         ;   LITERAL ( w -- )
 3271 00001AA0         ; Compile tos to code dictionary as an integer literal.
 3272 00001AA0         
 3273 00001AA0 20000000        DCD              _COMPI-MAPOFFSET
 3274 00001AA4 87      _LITER  DCB              IMEDD+7
 3275 00001AA5 4C 49 54 
              45 52 41 
              4C               DCB              "LITERAL"
 3276 00001AAC                 ALIGN            4
 3277 00001AAC         LITER
 3278 00001AAC                 _NEST
  290 00001AAC F842 ED04       STMFD            R2!,{LR}
 3279 00001AB0 F7FF FFE2       BL               COMPI
 3280 00001AB4 20000000        DCD              DOLIT-MAPOFFSET



ARM Macro Assembler    Page 68 


 3281 00001AB8 F7FF FFB8       BL               COMMA
 3282 00001ABC                 _UNNEST
  295 00001ABC F852 FB04       LDMFD            R2!,{PC}
 3283 00001AC0         
 3284 00001AC0         ;   $," ( -- )
 3285 00001AC0         ; Compile a literal string up to next " .
 3286 00001AC0         
 3287 00001AC0         ; DCD _LITER-MAPOFFSET
 3288 00001AC0         ;_STRCQ DCB  3
 3289 00001AC0         ; DCB "$$,"""
 3290 00001AC0         ; ALIGN 4 
 3291 00001AC0         STRCQ
 3292 00001AC0                 _NEST
  290 00001AC0 F842 ED04       STMFD            R2!,{LR}
 3293 00001AC4                 _DOLIT
  300 00001AC4 F7FE FBC6       BL               DOLIT
 3294 00001AC8 FFFFFFFC        DCD              -4
 3295 00001ACC F7FE FEF0       BL               CPP
 3296 00001AD0 F7FE FE42       BL               PSTOR
 3297 00001AD4                 _DOLIT
  300 00001AD4 F7FE FBBE       BL               DOLIT
 3298 00001AD8 00000022        DCD              '\"'
 3299 00001ADC F7FF FC68       BL               WORDD       ;moveDCB to code di
                                                            ctionary
 3300 00001AE0 F7FE FE60       BL               COUNT
 3301 00001AE4 F7FE FD0A       BL               PLUS
 3302 00001AE8 F7FE FFB8       BL               ALGND       ;calculate ALIGN 4e
                                                            d end of string
 3303 00001AEC F7FE FEE0       BL               CPP
 3304 00001AF0 F7FE FBF4       BL               STORE
 3305 00001AF4                 _UNNEST                      ;adjust the code po
                                                            inter
  295 00001AF4 F852 FB04       LDMFD            R2!,{PC}
 3306 00001AF8         
 3307 00001AF8         ;*******************************************************
                       *******************
 3308 00001AF8         ; Structures
 3309 00001AF8         
 3310 00001AF8         ;   FOR  ( -- a )
 3311 00001AF8         ; Start a FOR-NEXT loop structure in a colon definition.
                       
 3312 00001AF8         
 3313 00001AF8 20000000        DCD              _LITER-MAPOFFSET
 3314 00001AFC 83      _FOR    DCB              IMEDD+3
 3315 00001AFD 46 4F 52        DCB              "FOR"
 3316 00001B00                 ALIGN            4
 3317 00001B00         FOR
 3318 00001B00                 _NEST
  290 00001B00 F842 ED04       STMFD            R2!,{LR}
 3319 00001B04 F7FF FFB8       BL               COMPI
 3320 00001B08 20000000        DCD              TOR-MAPOFFSET
 3321 00001B0C F7FF F802       BL               HERE
 3322 00001B10                 _UNNEST
  295 00001B10 F852 FB04       LDMFD            R2!,{PC}
 3323 00001B14         
 3324 00001B14         ;   BEGIN ( -- a )
 3325 00001B14         ; Start an infinite or indefinite loop structure.
 3326 00001B14         
 3327 00001B14 20000000        DCD              _FOR-MAPOFFSET



ARM Macro Assembler    Page 69 


 3328 00001B18 85      _BEGIN  DCB              IMEDD+5
 3329 00001B19 42 45 47 
              49 4E            DCB              "BEGIN"
 3330 00001B1E 00 00           ALIGN            4
 3331 00001B20         BEGIN
 3332 00001B20                 _NEST
  290 00001B20 F842 ED04       STMFD            R2!,{LR}
 3333 00001B24 F7FE FFF6       BL               HERE
 3334 00001B28                 _UNNEST
  295 00001B28 F852 FB04       LDMFD            R2!,{PC}
 3335 00001B2C         
 3336 00001B2C         ;   NEXT ( a -- )
 3337 00001B2C         ; Terminate a FOR-NEXT loop structure.
 3338 00001B2C         
 3339 00001B2C 20000000        DCD              _BEGIN-MAPOFFSET
 3340 00001B30 84      _NEXT   DCB              IMEDD+4
 3341 00001B31 4E 45 58 
              54               DCB              "NEXT"
 3342 00001B35 00 00 00        ALIGN            4
 3343 00001B38         NEXT
 3344 00001B38                 _NEST
  290 00001B38 F842 ED04       STMFD            R2!,{LR}
 3345 00001B3C F7FF FF9C       BL               COMPI
 3346 00001B40 20000000        DCD              DONXT-MAPOFFSET
 3347 00001B44 F7FF FF72       BL               COMMA
 3348 00001B48                 _UNNEST
  295 00001B48 F852 FB04       LDMFD            R2!,{PC}
 3349 00001B4C         
 3350 00001B4C         ;   UNTIL ( a -- )
 3351 00001B4C         ; Terminate a BEGIN-UNTIL indefinite loop structure.
 3352 00001B4C         
 3353 00001B4C 20000000        DCD              _NEXT-MAPOFFSET
 3354 00001B50 85      _UNTIL  DCB              IMEDD+5
 3355 00001B51 55 4E 54 
              49 4C            DCB              "UNTIL"
 3356 00001B56 00 00           ALIGN            4
 3357 00001B58         UNTIL
 3358 00001B58                 _NEST
  290 00001B58 F842 ED04       STMFD            R2!,{LR}
 3359 00001B5C F7FF FF8C       BL               COMPI
 3360 00001B60 20000000        DCD              QBRAN-MAPOFFSET
 3361 00001B64 F7FF FF62       BL               COMMA
 3362 00001B68                 _UNNEST
  295 00001B68 F852 FB04       LDMFD            R2!,{PC}
 3363 00001B6C         
 3364 00001B6C         ;   AGAIN ( a -- )
 3365 00001B6C         ; Terminate a BEGIN-AGAIN infinite loop structure.
 3366 00001B6C         
 3367 00001B6C 20000000        DCD              _UNTIL-MAPOFFSET
 3368 00001B70 85      _AGAIN  DCB              IMEDD+5
 3369 00001B71 41 47 41 
              49 4E            DCB              "AGAIN"
 3370 00001B76 00 00           ALIGN            4
 3371 00001B78         AGAIN
 3372 00001B78                 _NEST
  290 00001B78 F842 ED04       STMFD            R2!,{LR}
 3373 00001B7C F7FF FF7C       BL               COMPI
 3374 00001B80 20000000        DCD              BRAN-MAPOFFSET
 3375 00001B84 F7FF FF52       BL               COMMA



ARM Macro Assembler    Page 70 


 3376 00001B88                 _UNNEST
  295 00001B88 F852 FB04       LDMFD            R2!,{PC}
 3377 00001B8C         
 3378 00001B8C         ;   IF   ( -- A )
 3379 00001B8C         ; Begin a conditional branch structure.
 3380 00001B8C         
 3381 00001B8C 20000000        DCD              _AGAIN-MAPOFFSET
 3382 00001B90 82      _IFF    DCB              IMEDD+2
 3383 00001B91 49 46           DCB              "IF"
 3384 00001B93 00              ALIGN            4
 3385 00001B94         IFF
 3386 00001B94                 _NEST
  290 00001B94 F842 ED04       STMFD            R2!,{LR}
 3387 00001B98 F7FF FF6E       BL               COMPI
 3388 00001B9C 20000000        DCD              QBRAN-MAPOFFSET
 3389 00001BA0 F7FE FFB8       BL               HERE
 3390 00001BA4                 _DOLIT
  300 00001BA4 F7FE FB56       BL               DOLIT
 3391 00001BA8 00000004        DCD              4
 3392 00001BAC F7FE FE80       BL               CPP
 3393 00001BB0 F7FE FDD2       BL               PSTOR
 3394 00001BB4                 _UNNEST
  295 00001BB4 F852 FB04       LDMFD            R2!,{PC}
 3395 00001BB8         
 3396 00001BB8         ;   AHEAD ( -- A )
 3397 00001BB8         ; Compile a forward branch instruction.
 3398 00001BB8         
 3399 00001BB8 20000000        DCD              _IFF-MAPOFFSET
 3400 00001BBC 85      _AHEAD  DCB              IMEDD+5
 3401 00001BBD 41 48 45 
              41 44            DCB              "AHEAD"
 3402 00001BC2 00 00           ALIGN            4
 3403 00001BC4         AHEAD
 3404 00001BC4                 _NEST
  290 00001BC4 F842 ED04       STMFD            R2!,{LR}
 3405 00001BC8 F7FF FF56       BL               COMPI
 3406 00001BCC 20000000        DCD              BRAN-MAPOFFSET
 3407 00001BD0 F7FE FFA0       BL               HERE
 3408 00001BD4                 _DOLIT
  300 00001BD4 F7FE FB3E       BL               DOLIT
 3409 00001BD8 00000004        DCD              4
 3410 00001BDC F7FE FE68       BL               CPP
 3411 00001BE0 F7FE FDBA       BL               PSTOR
 3412 00001BE4                 _UNNEST
  295 00001BE4 F852 FB04       LDMFD            R2!,{PC}
 3413 00001BE8         
 3414 00001BE8         ;   REPEAT ( A a -- )
 3415 00001BE8         ; Terminate a BEGIN-WHILE-REPEAT indefinite loop.
 3416 00001BE8         
 3417 00001BE8 20000000        DCD              _AHEAD-MAPOFFSET
 3418 00001BEC 86      _REPEA  DCB              IMEDD+6
 3419 00001BED 52 45 50 
              45 41 54         DCB              "REPEAT"
 3420 00001BF3 00              ALIGN            4
 3421 00001BF4         REPEA
 3422 00001BF4                 _NEST
  290 00001BF4 F842 ED04       STMFD            R2!,{LR}
 3423 00001BF8 F7FF FFBE       BL               AGAIN
 3424 00001BFC F7FE FF8A       BL               HERE



ARM Macro Assembler    Page 71 


 3425 00001C00 F7FE FC1E       BL               SWAP
 3426 00001C04 F7FE FB6A       BL               STORE
 3427 00001C08                 _UNNEST
  295 00001C08 F852 FB04       LDMFD            R2!,{PC}
 3428 00001C0C         
 3429 00001C0C         ;   THEN ( A -- )
 3430 00001C0C         ; Terminate a conditional branch structure.
 3431 00001C0C         
 3432 00001C0C 20000000        DCD              _REPEA-MAPOFFSET
 3433 00001C10 84      _THENN  DCB              IMEDD+4
 3434 00001C11 54 48 45 
              4E               DCB              "THEN"
 3435 00001C15 00 00 00        ALIGN            4
 3436 00001C18         THENN
 3437 00001C18                 _NEST
  290 00001C18 F842 ED04       STMFD            R2!,{LR}
 3438 00001C1C F7FE FF7A       BL               HERE
 3439 00001C20 F7FE FC0E       BL               SWAP
 3440 00001C24 F7FE FB5A       BL               STORE
 3441 00001C28                 _UNNEST
  295 00001C28 F852 FB04       LDMFD            R2!,{PC}
 3442 00001C2C         
 3443 00001C2C         ;   AFT  ( a -- a A )
 3444 00001C2C         ; Jump to THEN in a FOR-AFT-THEN-NEXT loop the first tim
                       e through.
 3445 00001C2C         
 3446 00001C2C 20000000        DCD              _THENN-MAPOFFSET
 3447 00001C30 83      _AFT    DCB              IMEDD+3
 3448 00001C31 41 46 54        DCB              "AFT"
 3449 00001C34                 ALIGN            4
 3450 00001C34         AFT
 3451 00001C34                 _NEST
  290 00001C34 F842 ED04       STMFD            R2!,{LR}
 3452 00001C38 F7FE FBF0       BL               DROP
 3453 00001C3C F7FF FFC2       BL               AHEAD
 3454 00001C40 F7FF FF6E       BL               BEGIN
 3455 00001C44 F7FE FBFC       BL               SWAP
 3456 00001C48                 _UNNEST
  295 00001C48 F852 FB04       LDMFD            R2!,{PC}
 3457 00001C4C         
 3458 00001C4C         ;   ELSE ( A -- A )
 3459 00001C4C         ; Start the false clause in an IF-ELSE-THEN structure.
 3460 00001C4C         
 3461 00001C4C 20000000        DCD              _AFT-MAPOFFSET
 3462 00001C50 84      _ELSEE  DCB              IMEDD+4
 3463 00001C51 45 4C 53 
              45               DCB              "ELSE"
 3464 00001C55 00 00 00        ALIGN            4
 3465 00001C58         ELSEE
 3466 00001C58                 _NEST
  290 00001C58 F842 ED04       STMFD            R2!,{LR}
 3467 00001C5C F7FF FFB2       BL               AHEAD
 3468 00001C60 F7FE FBEE       BL               SWAP
 3469 00001C64 F7FF FFD8       BL               THENN
 3470 00001C68                 _UNNEST
  295 00001C68 F852 FB04       LDMFD            R2!,{PC}
 3471 00001C6C         
 3472 00001C6C         ;   WHILE ( a -- A a )
 3473 00001C6C         ; Conditional branch out of a BEGIN-WHILE-REPEAT loop.



ARM Macro Assembler    Page 72 


 3474 00001C6C         
 3475 00001C6C 20000000        DCD              _ELSEE-MAPOFFSET
 3476 00001C70 85      _WHILE  DCB              IMEDD+5
 3477 00001C71 57 48 49 
              4C 45            DCB              "WHILE"
 3478 00001C76 00 00           ALIGN            4
 3479 00001C78         WHILE
 3480 00001C78                 _NEST
  290 00001C78 F842 ED04       STMFD            R2!,{LR}
 3481 00001C7C F7FF FF8A       BL               IFF
 3482 00001C80 F7FE FBDE       BL               SWAP
 3483 00001C84                 _UNNEST
  295 00001C84 F852 FB04       LDMFD            R2!,{PC}
 3484 00001C88         
 3485 00001C88         ;   ABORT" ( -- ; string> )
 3486 00001C88         ; Conditional abort with an error message.
 3487 00001C88         
 3488 00001C88 20000000        DCD              _WHILE-MAPOFFSET
 3489 00001C8C 86      _ABRTQ  DCB              IMEDD+6
 3490 00001C8D 41 42 4F 
              52 54 22         DCB              "ABORT\""
 3491 00001C93 00              ALIGN            4
 3492 00001C94         ABRTQ
 3493 00001C94                 _NEST
  290 00001C94 F842 ED04       STMFD            R2!,{LR}
 3494 00001C98 F7FF FEEE       BL               COMPI
 3495 00001C9C 20000000        DCD              ABORQ-MAPOFFSET
 3496 00001CA0 F7FF FF0E       BL               STRCQ
 3497 00001CA4                 _UNNEST
  295 00001CA4 F852 FB04       LDMFD            R2!,{PC}
 3498 00001CA8         
 3499 00001CA8         ;   $" ( -- ; string> )
 3500 00001CA8         ; Compile an inlineDCB literal.
 3501 00001CA8         
 3502 00001CA8 20000000        DCD              _ABRTQ-MAPOFFSET
 3503 00001CAC 82      _STRQ   DCB              IMEDD+2
 3504 00001CAD 24 22           DCB              "$"""
 3505 00001CAF 00              ALIGN            4
 3506 00001CB0         STRQ
 3507 00001CB0                 _NEST
  290 00001CB0 F842 ED04       STMFD            R2!,{LR}
 3508 00001CB4 F7FF FEE0       BL               COMPI
 3509 00001CB8 20000000        DCD              STRQP-MAPOFFSET
 3510 00001CBC F7FF FF00       BL               STRCQ
 3511 00001CC0                 _UNNEST
  295 00001CC0 F852 FB04       LDMFD            R2!,{PC}
 3512 00001CC4         
 3513 00001CC4         ;   ." ( -- ; string> )
 3514 00001CC4         ; Compile an inlineDCB literal to be typed out at run ti
                       me.
 3515 00001CC4         
 3516 00001CC4 20000000        DCD              _STRQ-MAPOFFSET
 3517 00001CC8 82      _DOTQ   DCB              IMEDD+2
 3518 00001CC9 2E 22           DCB              "."""
 3519 00001CCB 00              ALIGN            4
 3520 00001CCC         DOTQ
 3521 00001CCC                 _NEST
  290 00001CCC F842 ED04       STMFD            R2!,{LR}
 3522 00001CD0 F7FF FED2       BL               COMPI



ARM Macro Assembler    Page 73 


 3523 00001CD4 20000000        DCD              DOTQP-MAPOFFSET
 3524 00001CD8 F7FF FEF2       BL               STRCQ
 3525 00001CDC                 _UNNEST
  295 00001CDC F852 FB04       LDMFD            R2!,{PC}
 3526 00001CE0         
 3527 00001CE0         ;*******************************************************
                       *******************
 3528 00001CE0         ; Name compiler
 3529 00001CE0         
 3530 00001CE0         ;   ?UNIQUE ( a -- a )
 3531 00001CE0         ; Display a warning message if the word already exists.
 3532 00001CE0         
 3533 00001CE0 20000000        DCD              _DOTQ-MAPOFFSET
 3534 00001CE4 07      _UNIQU  DCB              7
 3535 00001CE5 3F 55 4E 
              49 51 55 
              45               DCB              "?UNIQUE"
 3536 00001CEC                 ALIGN            4
 3537 00001CEC         UNIQU
 3538 00001CEC                 _NEST
  290 00001CEC F842 ED04       STMFD            R2!,{LR}
 3539 00001CF0 F7FE FB9C       BL               DUPP
 3540 00001CF4 F7FF FC34       BL               NAMEQ       ;?name exists
 3541 00001CF8 F7FE FAD2       BL               QBRAN
 3542 00001CFC 20000000        DCD              UNIQ1-MAPOFFSET ;redefinitions 
                                                            are OK
 3543 00001D00 F7FF F9E2       BL               DOTQP
 3544 00001D04 07              DCB              7
 3545 00001D05 20 72 65 
              44 65 66 
              20               DCB              " reDef "   ;but warn the user
 3546 00001D0C                 ALIGN            4
 3547 00001D0C F7FE FBA2       BL               OVER
 3548 00001D10 F7FE FD48       BL               COUNT
 3549 00001D14 F7FF F988       BL               TYPEE       ;just in case its n
                                                            ot planned
 3550 00001D18 F7FE FB80 
                       UNIQ1   BL               DROP
 3551 00001D1C                 _UNNEST
  295 00001D1C F852 FB04       LDMFD            R2!,{PC}
 3552 00001D20         
 3553 00001D20         ;   $,n  ( na -- )
 3554 00001D20         ; Build a new dictionary name using the data at na.
 3555 00001D20         
 3556 00001D20         ; DCD _UNIQU-MAPOFFSET
 3557 00001D20         ;_SNAME DCB  3
 3558 00001D20         ; DCB "$$,n"
 3559 00001D20         ; ALIGN 4 
 3560 00001D20         SNAME
 3561 00001D20                 _NEST
  290 00001D20 F842 ED04       STMFD            R2!,{LR}
 3562 00001D24 F7FE FB82       BL               DUPP        ; na na
 3563 00001D28 F7FE FB4C       BL               CAT         ; ?null input
 3564 00001D2C F7FE FAB8       BL               QBRAN
 3565 00001D30 20000000        DCD              SNAM1-MAPOFFSET
 3566 00001D34 F7FF FFDA       BL               UNIQU       ; na
 3567 00001D38 F7FE FDC6       BL               LAST        ; na last
 3568 00001D3C F7FE FAD8       BL               AT          ; na la
 3569 00001D40 F7FF FE74       BL               COMMA       ; na



ARM Macro Assembler    Page 74 


 3570 00001D44 F7FE FB72       BL               DUPP        ; na na
 3571 00001D48 F7FE FDBE       BL               LAST        ; na na last
 3572 00001D4C F7FE FAC6       BL               STORE       ; na , save na for 
                                                            vocabulary link
 3573 00001D50 F7FE FD28       BL               COUNT       ; na+1 count
 3574 00001D54 F7FE FBD2       BL               PLUS        ; na+1+count
 3575 00001D58 F7FE FE80       BL               ALGND       ; word boundary
 3576 00001D5C F7FE FDA8       BL               CPP
 3577 00001D60 F7FE FABC       BL               STORE       ; top of dictionary
                                                             now
 3578 00001D64                 _UNNEST
  295 00001D64 F852 FB04       LDMFD            R2!,{PC}
 3579 00001D68         SNAM1
 3580 00001D68 F7FF F9A0       BL               STRQP
 3581 00001D6C 07 20 6E 
              61 6D 65 
              3F 20            DCB              7," name? "
 3582 00001D74 F7FF BCBA       B.W              ABORT
 3583 00001D78         
 3584 00001D78         ;   $COMPILE ( a -- )
 3585 00001D78         ; Compile next word to code dictionary as a token or lit
                       eral.
 3586 00001D78         
 3587 00001D78 20000000        DCD              _UNIQU-MAPOFFSET
 3588 00001D7C 08      _SCOMP  DCB              8
 3589 00001D7D 24 43 4F 
              4D 50 49 
              4C 45            DCB              "$COMPILE"
 3590 00001D85 00 00 00        ALIGN            4
 3591 00001D88         SCOMP
 3592 00001D88                 _NEST
  290 00001D88 F842 ED04       STMFD            R2!,{LR}
 3593 00001D8C F7FF FBE8       BL               NAMEQ
 3594 00001D90 F7FE FC48       BL               QDUP        ;defined?
 3595 00001D94 F7FE FA84       BL               QBRAN
 3596 00001D98 20000000        DCD              SCOM2-MAPOFFSET
 3597 00001D9C F7FE FAA8       BL               AT
 3598 00001DA0                 _DOLIT
  300 00001DA0 F7FE FA58       BL               DOLIT
 3599 00001DA4 00000080        DCD              IMEDD
 3600 00001DA8 F7FE FB66       BL               ANDD        ;immediate?
 3601 00001DAC F7FE FA78       BL               QBRAN
 3602 00001DB0 20000000        DCD              SCOM1-MAPOFFSET
 3603 00001DB4 F7FE FA5E       BL               EXECU
 3604 00001DB8                 _UNNEST                      ;it's immediate, ex
                                                            ecute
  295 00001DB8 F852 FB04       LDMFD            R2!,{PC}
 3605 00001DBC F000 F842 
                       SCOM1   BL               CALLC       ;it's not immediate
                                                            , compile
 3606 00001DC0                 _UNNEST
  295 00001DC0 F852 FB04       LDMFD            R2!,{PC}
 3607 00001DC4 F7FF F85E 
                       SCOM2   BL               NUMBQ
 3608 00001DC8 F7FE FA6A       BL               QBRAN
 3609 00001DCC 20000000        DCD              SCOM3-MAPOFFSET
 3610 00001DD0 F7FF FE6C       BL               LITER
 3611 00001DD4                 _UNNEST                      ;compile number as 
                                                            integer



ARM Macro Assembler    Page 75 


  295 00001DD4 F852 FB04       LDMFD            R2!,{PC}
 3612 00001DD8 F7FF BC88 
                       SCOM3   B.W              ABORT       ;error
 3613 00001DDC         
 3614 00001DDC         ;   OVERT ( -- )
 3615 00001DDC         ; Link a new word into the current vocabulary.
 3616 00001DDC         
 3617 00001DDC 20000000        DCD              _SCOMP-MAPOFFSET
 3618 00001DE0 05      _OVERT  DCB              5
 3619 00001DE1 4F 56 45 
              52 54            DCB              "OVERT"
 3620 00001DE6 00 00           ALIGN            4
 3621 00001DE8         OVERT
 3622 00001DE8                 _NEST
  290 00001DE8 F842 ED04       STMFD            R2!,{LR}
 3623 00001DEC F7FE FD6C       BL               LAST
 3624 00001DF0 F7FE FA7E       BL               AT
 3625 00001DF4 F7FE FD52       BL               CNTXT
 3626 00001DF8 F7FE FA70       BL               STORE
 3627 00001DFC                 _UNNEST
  295 00001DFC F852 FB04       LDMFD            R2!,{PC}
 3628 00001E00         
 3629 00001E00         ;   ;    ( -- )
 3630 00001E00         ; Terminate a colon definition.
 3631 00001E00         
 3632 00001E00 20000000        DCD              _OVERT-MAPOFFSET
 3633 00001E04 C1      _SEMIS  DCB              IMEDD+COMPO+1
 3634 00001E05 3B              DCB              ";"
 3635 00001E06 00 00           ALIGN            4
 3636 00001E08         SEMIS
 3637 00001E08                 _NEST
  290 00001E08 F842 ED04       STMFD            R2!,{LR}
 3638 00001E0C                 _DOLIT
  300 00001E0C F7FE FA22       BL               DOLIT
 3639 00001E10                 _UNNEST
  295 00001E10 F852 FB04       LDMFD            R2!,{PC}
 3640 00001E14 F7FF FE0A       BL               COMMA
 3641 00001E18 F7FF FCC8       BL               LBRAC
 3642 00001E1C F7FF FFE4       BL               OVERT
 3643 00001E20                 _UNNEST
  295 00001E20 F852 FB04       LDMFD            R2!,{PC}
 3644 00001E24         
 3645 00001E24         ;   ]    ( -- )
 3646 00001E24         ; Start compiling the words in the input stream.
 3647 00001E24         
 3648 00001E24 20000000        DCD              _SEMIS-MAPOFFSET
 3649 00001E28 01      _RBRAC  DCB              1
 3650 00001E29 5D              DCB              "]"
 3651 00001E2A 00 00           ALIGN            4
 3652 00001E2C         RBRAC
 3653 00001E2C                 _NEST
  290 00001E2C F842 ED04       STMFD            R2!,{LR}
 3654 00001E30                 _DOLIT
  300 00001E30 F7FE FA10       BL               DOLIT
 3655 00001E34 20000000        DCD              SCOMP-MAPOFFSET
 3656 00001E38 F7FE FD1A       BL               TEVAL
 3657 00001E3C F7FE FA4E       BL               STORE
 3658 00001E40                 _UNNEST
  295 00001E40 F852 FB04       LDMFD            R2!,{PC}



ARM Macro Assembler    Page 76 


 3659 00001E44         
 3660 00001E44         ;   BL.W ( ca -- )
 3661 00001E44         ; Assemble a branch-link long instruction to ca.
 3662 00001E44         ; BL.W is split into 2 16 bit instructions with 11 bit a
                       ddress fields.
 3663 00001E44         
 3664 00001E44         ; DCD _RBRAC-MAPOFFSET
 3665 00001E44         ;_CALLC DCB  5
 3666 00001E44         ; DCB "call,"
 3667 00001E44         ; ALIGN 4 
 3668 00001E44         CALLC
 3669 00001E44                 _NEST
  290 00001E44 F842 ED04       STMFD            R2!,{LR}
 3670 00001E48 F025 0501       BIC              R5,R5,#1    ; clear b0 of addre
                                                            ss from R>
 3671 00001E4C F7FE FE62       BL               HERE
 3672 00001E50 F7FE FB5C       BL               SUBB
 3673 00001E54 F1A5 0504       SUB              R5,R5,#4    ; pc offset
 3674 00001E58 F240 70FF       MOVW             R0,#0x7FF   ; 11 bit mask
 3675 00001E5C 462C            MOV              R4,R5
 3676 00001E5E EA4F 3515       LSR              R5,R5,#12   ; get bits 22-12
 3677 00001E62 EA05 0500       AND              R5,R5,R0
 3678 00001E66 EA4F 34C4       LSL              R4,R4,#15   ; get bits 11-1
 3679 00001E6A EA45 0504       ORR              R5,R5,R4
 3680 00001E6E F045 4578       ORR              R5,R5,#0xF8000000
 3681 00001E72 F445 4570       ORR              R5,R5,#0xF000
 3682 00001E76 F7FF FDD9       BL               COMMA       ; assemble BL.W ins
                                                            truction
 3683 00001E7A                 _UNNEST
  295 00001E7A F852 FB04       LDMFD            R2!,{PC}
 3684 00001E7E 00 00           ALIGN            4
 3685 00001E80         
 3686 00001E80         ; : ( -- ; string> )
 3687 00001E80         ; Start a new colon definition using next word as its na
                       me.
 3688 00001E80         
 3689 00001E80 20000000        DCD              _RBRAC-MAPOFFSET
 3690 00001E84 01      _COLON  DCB              1
 3691 00001E85 3A              DCB              ":"
 3692 00001E86 00 00           ALIGN            4
 3693 00001E88         COLON
 3694 00001E88                 _NEST
  290 00001E88 F842 ED04       STMFD            R2!,{LR}
 3695 00001E8C F7FF FAA2       BL               TOKEN
 3696 00001E90 F7FF FF46       BL               SNAME
 3697 00001E94                 _DOLIT
  300 00001E94 F7FE F9DE       BL               DOLIT
 3698 00001E98                 _NEST
  290 00001E98 F842 ED04       STMFD            R2!,{LR}
 3699 00001E9C F7FF FDC6       BL               COMMA
 3700 00001EA0 F7FF FFC4       BL               RBRAC
 3701 00001EA4                 _UNNEST
  295 00001EA4 F852 FB04       LDMFD            R2!,{PC}
 3702 00001EA8         
 3703 00001EA8         ;   IMMEDIATE   ( -- )
 3704 00001EA8         ; Make the last compiled word an immediate word.
 3705 00001EA8         
 3706 00001EA8 20000000        DCD              _COLON-MAPOFFSET
 3707 00001EAC 09      _IMMED  DCB              9



ARM Macro Assembler    Page 77 


 3708 00001EAD 49 4D 4D 
              45 44 49 
              41 54 45         DCB              "IMMEDIATE"
 3709 00001EB6 00 00           ALIGN            4
 3710 00001EB8         IMMED
 3711 00001EB8                 _NEST
  290 00001EB8 F842 ED04       STMFD            R2!,{LR}
 3712 00001EBC                 _DOLIT
  300 00001EBC F7FE F9CA       BL               DOLIT
 3713 00001EC0 00000080        DCD              IMEDD
 3714 00001EC4 F7FE FD00       BL               LAST
 3715 00001EC8 F7FE FA12       BL               AT
 3716 00001ECC F7FE FA10       BL               AT
 3717 00001ED0 F7FE FADC       BL               ORR
 3718 00001ED4 F7FE FCF8       BL               LAST
 3719 00001ED8 F7FE FA0A       BL               AT
 3720 00001EDC F7FE F9FE       BL               STORE
 3721 00001EE0                 _UNNEST
  295 00001EE0 F852 FB04       LDMFD            R2!,{PC}
 3722 00001EE4         
 3723 00001EE4         ;*******************************************************
                       *******************
 3724 00001EE4         ; Defining words
 3725 00001EE4         
 3726 00001EE4         ;   CONSTANT ( u -- ; string> )
 3727 00001EE4         ; Compile a new constant.
 3728 00001EE4         
 3729 00001EE4 20000000        DCD              _IMMED-MAPOFFSET
 3730 00001EE8 08      _CONST  DCB              8
 3731 00001EE9 43 4F 4E 
              53 54 41 
              4E 54            DCB              "CONSTANT"
 3732 00001EF1 00 00 00        ALIGN            4
 3733 00001EF4         CONST
 3734 00001EF4                 _NEST
  290 00001EF4 F842 ED04       STMFD            R2!,{LR}
 3735 00001EF8 F7FF FA6C       BL               TOKEN
 3736 00001EFC F7FF FF10       BL               SNAME
 3737 00001F00 F7FF FF72       BL               OVERT
 3738 00001F04                 _DOLIT
  300 00001F04 F7FE F9A6       BL               DOLIT
 3739 00001F08                 _NEST
  290 00001F08 F842 ED04       STMFD            R2!,{LR}
 3740 00001F0C F7FF FD8E       BL               COMMA
 3741 00001F10                 _DOLIT
  300 00001F10 F7FE F9A0       BL               DOLIT
 3742 00001F14 20000000        DCD              DOCON-MAPOFFSET
 3743 00001F18 F7FF FF94       BL               CALLC
 3744 00001F1C F7FF FD86       BL               COMMA
 3745 00001F20                 _UNNEST
  295 00001F20 F852 FB04       LDMFD            R2!,{PC}
 3746 00001F24         
 3747 00001F24         ;   CREATE ( -- ; string> )
 3748 00001F24         ; Compile a new array entry without allocating code spac
                       e.
 3749 00001F24         
 3750 00001F24 20000000        DCD              _CONST-MAPOFFSET
 3751 00001F28 06      _CREAT  DCB              6
 3752 00001F29 43 52 45 



ARM Macro Assembler    Page 78 


              41 54 45         DCB              "CREATE"
 3753 00001F2F 00              ALIGN            4
 3754 00001F30         CREAT
 3755 00001F30                 _NEST
  290 00001F30 F842 ED04       STMFD            R2!,{LR}
 3756 00001F34 F7FF FA4E       BL               TOKEN
 3757 00001F38 F7FF FEF2       BL               SNAME
 3758 00001F3C F7FF FF54       BL               OVERT
 3759 00001F40                 _DOLIT
  300 00001F40 F7FE F988       BL               DOLIT
 3760 00001F44                 _NEST
  290 00001F44 F842 ED04       STMFD            R2!,{LR}
 3761 00001F48 F7FF FD70       BL               COMMA
 3762 00001F4C                 _DOLIT
  300 00001F4C F7FE F982       BL               DOLIT
 3763 00001F50 20000000        DCD              DOVAR-MAPOFFSET
 3764 00001F54 F7FF FF76       BL               CALLC
 3765 00001F58                 _UNNEST
  295 00001F58 F852 FB04       LDMFD            R2!,{PC}
 3766 00001F5C         
 3767 00001F5C         ;   VARIABLE ( -- ; string> )
 3768 00001F5C         ; Compile a new variable initialized to 0.
 3769 00001F5C         
 3770 00001F5C 20000000        DCD              _CREAT-MAPOFFSET
 3771 00001F60 08      _VARIA  DCB              8
 3772 00001F61 56 41 52 
              49 41 42 
              4C 45            DCB              "VARIABLE"
 3773 00001F69 00 00 00        ALIGN            4
 3774 00001F6C         VARIA
 3775 00001F6C                 _NEST
  290 00001F6C F842 ED04       STMFD            R2!,{LR}
 3776 00001F70 F7FF FFDE       BL               CREAT
 3777 00001F74                 _DOLIT
  300 00001F74 F7FE F96E       BL               DOLIT
 3778 00001F78 00000000        DCD              0
 3779 00001F7C F7FF FD56       BL               COMMA
 3780 00001F80                 _UNNEST
  295 00001F80 F852 FB04       LDMFD            R2!,{PC}
 3781 00001F84         
 3782 00001F84         ;*******************************************************
                       *******************
 3783 00001F84         ; Tools
 3784 00001F84         
 3785 00001F84         ;   dm+  ( a u -- a )
 3786 00001F84         ; Dump u bytes from , leaving a+u on the stack.
 3787 00001F84         
 3788 00001F84         ; DCD _VARIA-MAPOFFSET
 3789 00001F84         ;_DMP DCB  3
 3790 00001F84         ; DCB "dm+"
 3791 00001F84         ; ALIGN 4 
 3792 00001F84         DMP
 3793 00001F84                 _NEST
  290 00001F84 F842 ED04       STMFD            R2!,{LR}
 3794 00001F88 F7FE FA64       BL               OVER
 3795 00001F8C                 _DOLIT
  300 00001F8C F7FE F962       BL               DOLIT
 3796 00001F90 00000004        DCD              4
 3797 00001F94 F7FF F8BA       BL               UDOTR       ;display address



ARM Macro Assembler    Page 79 


 3798 00001F98 F7FF F81E       BL               SPACE
 3799 00001F9C F7FE FA2A       BL               TOR         ;start count down l
                                                            oop
 3800 00001FA0 F000 B80C       B.W              PDUM2       ;skip first pass
 3801 00001FA4 F7FE FA42 
                       PDUM1   BL               DUPP
 3802 00001FA8 F7FE FA0C       BL               CAT
 3803 00001FAC                 _DOLIT
  300 00001FAC F7FE F952       BL               DOLIT
 3804 00001FB0 00000003        DCD              3
 3805 00001FB4 F7FF F8AA       BL               UDOTR       ;display numeric da
                                                            ta
 3806 00001FB8 F7FE FAD0       BL               ONEP        ;increment address
 3807 00001FBC F7FE F960 
                       PDUM2   BL               DONXT
 3808 00001FC0 20000000        DCD              PDUM1-MAPOFFSET ;loop till done
                                                            
 3809 00001FC4                 _UNNEST
  295 00001FC4 F852 FB04       LDMFD            R2!,{PC}
 3810 00001FC8         
 3811 00001FC8         ;   DUMP ( a u -- )
 3812 00001FC8         ; Dump u bytes from a, in a formatted manner.
 3813 00001FC8         
 3814 00001FC8 20000000        DCD              _VARIA-MAPOFFSET
 3815 00001FCC 04      _DUMP   DCB              4
 3816 00001FCD 44 55 4D 
              50               DCB              "DUMP"
 3817 00001FD1 00 00 00        ALIGN            4
 3818 00001FD4         DUMP
 3819 00001FD4                 _NEST
  290 00001FD4 F842 ED04       STMFD            R2!,{LR}
 3820 00001FD8 F7FE FC16       BL               BASE
 3821 00001FDC F7FE F988       BL               AT
 3822 00001FE0 F7FE FA08       BL               TOR
 3823 00001FE4 F7FE FEF6       BL               HEX         ;save radix,set hex
                                                            
 3824 00001FE8                 _DOLIT
  300 00001FE8 F7FE F934       BL               DOLIT
 3825 00001FEC 00000010        DCD              16
 3826 00001FF0 F7FE FD02       BL               SLASH       ;change count to li
                                                            nes
 3827 00001FF4 F7FE F9FE       BL               TOR
 3828 00001FF8 F000 B814       B.W              DUMP4       ;start count down l
                                                            oop
 3829 00001FFC F7FF F82C 
                       DUMP1   BL               CR
 3830 00002000                 _DOLIT
  300 00002000 F7FE F928       BL               DOLIT
 3831 00002004 00000010        DCD              16
 3832 00002008 F7FE FB2E       BL               DDUP
 3833 0000200C F7FF FFBA       BL               DMP         ;display numeric
 3834 00002010 F7FE FB12       BL               ROT
 3835 00002014 F7FE FB10       BL               ROT
 3836 00002018 F7FE FFDE       BL               SPACE
 3837 0000201C F7FE FFDC       BL               SPACE
 3838 00002020 F7FF F802       BL               TYPEE       ;display printable 
                                                            characters
 3839 00002024 F7FE F92C 
                       DUMP4   BL               DONXT



ARM Macro Assembler    Page 80 


 3840 00002028 20000000        DCD              DUMP1-MAPOFFSET ;loop till done
                                                            
 3841 0000202C F7FE F9F6 
                       DUMP3   BL               DROP
 3842 00002030 F7FE F9CE       BL               RFROM
 3843 00002034 F7FE FBE8       BL               BASE
 3844 00002038 F7FE F950       BL               STORE       ;restore radix
 3845 0000203C                 _UNNEST
  295 0000203C F852 FB04       LDMFD            R2!,{PC}
 3846 00002040         
 3847 00002040         ;   .S   ( ... -- ... )
 3848 00002040         ; Display the contents of the data stack.
 3849 00002040         
 3850 00002040 20000000        DCD              _DUMP-MAPOFFSET
 3851 00002044 02      _DOTS   DCB              2
 3852 00002045 2E 53           DCB              ".S"
 3853 00002047 00              ALIGN            4
 3854 00002048         DOTS
 3855 00002048                 _NEST
  290 00002048 F842 ED04       STMFD            R2!,{LR}
 3856 0000204C F7FE FFC4       BL               SPACE
 3857 00002050 F7FE FD38       BL               DEPTH       ;stack depth
 3858 00002054 F7FE F9CE       BL               TOR         ;start count down l
                                                            oop
 3859 00002058 F000 B806       B.W              DOTS2       ;skip first pass
 3860 0000205C F7FE F9C2 
                       DOTS1   BL               RAT
 3861 00002060 F7FE FD44       BL               PICK
 3862 00002064 F7FF F87E       BL               DOT         ;index stack, displ
                                                            ay contents
 3863 00002068 F7FE F90A 
                       DOTS2   BL               DONXT
 3864 0000206C 20000000        DCD              DOTS1-MAPOFFSET ;loop till done
                                                            
 3865 00002070 F7FE FFB2       BL               SPACE
 3866 00002074                 _UNNEST
  295 00002074 F852 FB04       LDMFD            R2!,{PC}
 3867 00002078         
 3868 00002078         ;   >NAME ( ca -- na | F )
 3869 00002078         ; Convert code address to a name address.
 3870 00002078         
 3871 00002078 20000000        DCD              _DOTS-MAPOFFSET
 3872 0000207C 05      _TNAME  DCB              5
 3873 0000207D 3E 4E 41 
              4D 45            DCB              ">NAME"
 3874 00002082 00 00           ALIGN            4
 3875 00002084         TNAME
 3876 00002084                 _NEST
  290 00002084 F842 ED04       STMFD            R2!,{LR}
 3877 00002088 F7FE F9B4       BL               TOR         ; 
 3878 0000208C F7FE FC06       BL               CNTXT       ; va
 3879 00002090 F7FE F92E       BL               AT          ; na
 3880 00002094         TNAM1
 3881 00002094 F7FE F9CA       BL               DUPP        ; na na
 3882 00002098 F7FE F902       BL               QBRAN
 3883 0000209C 20000000        DCD              TNAM2-MAPOFFSET ; vocabulary en
                                                            d, no match
 3884 000020A0 F7FE F9C4       BL               DUPP        ; na na
 3885 000020A4 F7FF F9A4       BL               NAMET       ; na ca



ARM Macro Assembler    Page 81 


 3886 000020A8 F7FE F99C       BL               RAT         ; na ca code
 3887 000020AC F7FE F9F8       BL               XORR        ; na f --
 3888 000020B0 F7FE F8F6       BL               QBRAN
 3889 000020B4 20000000        DCD              TNAM2-MAPOFFSET
 3890 000020B8 F7FE FA7C       BL               CELLM       ; la 
 3891 000020BC F7FE F918       BL               AT          ; next_na
 3892 000020C0 F7FF BFE8       B.W              TNAM1
 3893 000020C4         TNAM2
 3894 000020C4 F7FE F984       BL               RFROM
 3895 000020C8 F7FE F9A8       BL               DROP        ; 0|na --
 3896 000020CC                 _UNNEST                      ;0
  295 000020CC F852 FB04       LDMFD            R2!,{PC}
 3897 000020D0         
 3898 000020D0         ;   .ID  ( na -- )
 3899 000020D0         ; Display the name at address.
 3900 000020D0         
 3901 000020D0 20000000        DCD              _TNAME-MAPOFFSET
 3902 000020D4 03      _DOTID  DCB              3
 3903 000020D5 2E 49 44        DCB              ".ID"
 3904 000020D8                 ALIGN            4
 3905 000020D8         DOTID
 3906 000020D8                 _NEST
  290 000020D8 F842 ED04       STMFD            R2!,{LR}
 3907 000020DC F7FE FAA2       BL               QDUP        ;if zero no name
 3908 000020E0 F7FE F8DE       BL               QBRAN
 3909 000020E4 20000000        DCD              DOTI1-MAPOFFSET
 3910 000020E8 F7FE FB5C       BL               COUNT
 3911 000020EC                 _DOLIT
  300 000020EC F7FE F8B2       BL               DOLIT
 3912 000020F0 0000001F        DCD              0x1F
 3913 000020F4 F7FE F9C0       BL               ANDD        ;mask lexicon bits
 3914 000020F8 F7FE FF96       BL               TYPEE
 3915 000020FC                 _UNNEST                      ;display name strin
                                                            g
  295 000020FC F852 FB04       LDMFD            R2!,{PC}
 3916 00002100 F7FE FFE2 
                       DOTI1   BL               DOTQP
 3917 00002104 09              DCB              9
 3918 00002105 20 7B 6E 
              6F 4E 61 
              6D 65 7D         DCB              " {noName}"
 3919 0000210E 00 00           ALIGN            4
 3920 00002110                 _UNNEST
  295 00002110 F852 FB04       LDMFD            R2!,{PC}
 3921 00002114         
 3922 00002114         ;   SEE  ( -- ; string> )
 3923 00002114         ; A simple decompiler.
 3924 00002114         
 3925 00002114 20000000        DCD              _DOTID-MAPOFFSET
 3926 00002118 03      _SEE    DCB              3
 3927 00002119 53 45 45        DCB              "SEE"
 3928 0000211C                 ALIGN            4
 3929 0000211C         SEE
 3930 0000211C                 _NEST
  290 0000211C F842 ED04       STMFD            R2!,{LR}
 3931 00002120 F7FF FC64       BL               TICK        ; ca --, starting a
                                                            ddress
 3932 00002124 F7FE FF98       BL               CR
 3933 00002128                 _DOLIT



ARM Macro Assembler    Page 82 


  300 00002128 F7FE F894       BL               DOLIT
 3934 0000212C 00000014        DCD              20
 3935 00002130 F7FE F960       BL               TOR
 3936 00002134 F7FE FA34 
                       SEE1    BL               CELLP       ; a
 3937 00002138 F7FE F978       BL               DUPP        ; a a
 3938 0000213C F000 F810       BL               DECOMP      ; a
 3939 00002140 F7FE F89E       BL               DONXT
 3940 00002144 20000000        DCD              SEE1-MAPOFFSET
 3941 00002148 F7FE F968       BL               DROP
 3942 0000214C                 _UNNEST
  295 0000214C F852 FB04       LDMFD            R2!,{PC}
 3943 00002150         
 3944 00002150         ; DECOMPILE ( a -- )
 3945 00002150         ; Convert code in a.  Display name of command or as data
                       .
 3946 00002150         
 3947 00002150 20000000        DCD              _SEE-MAPOFFSET
 3948 00002154 09      _DECOM  DCB              9
 3949 00002155 44 45 43 
              4F 4D 50 
              49 4C 45         DCB              "DECOMPILE"
 3950 0000215E 00 00           ALIGN            4
 3951 00002160         
 3952 00002160         DECOMP
 3953 00002160                 _NEST
  290 00002160 F842 ED04       STMFD            R2!,{LR}
 3954 00002164 F7FE F962       BL               DUPP        ; a a
 3955 00002168         ; BL TOR   ; a
 3956 00002168 F7FE F8C2       BL               AT          ; a code
 3957 0000216C F7FE F95E       BL               DUPP        ; a code code
 3958 00002170                 _DOLIT
  300 00002170 F7FE F870       BL               DOLIT
 3959 00002174 F800F800        DCD              0xF800F800
 3960 00002178 F7FE F97E       BL               ANDD
 3961 0000217C                 _DOLIT
  300 0000217C F7FE F86A       BL               DOLIT
 3962 00002180 F800F000        DCD              0xF800F000
 3963 00002184 F7FE FAA4       BL               EQUAL       ; a code ?
 3964 00002188 F7FE F88A       BL               QBRAN
 3965 0000218C 20000000        DCD              DECOM2-MAPOFFSET 
                                                            ; not a command
 3966 00002190         ; a valid_code --, extract address and display name
 3967 00002190 F640 70FE       MOVW             R0,#0xFFE
 3968 00002194 462C            MOV              R4,R5
 3969 00002196 EA4F 5545       LSL              R5,R5,#21   ; get bits 22-12
 3970 0000219A EA4F 2565       ASR              R5,R5,#9    ; with sign extensi
                                                            on
 3971 0000219E EA4F 34D4       LSR              R4,R4,#15   ; get bits 11-1
 3972 000021A2 EA04 0400       AND              R4,R4,R0    ; retain only bits 
                                                            11-1
 3973 000021A6 EA45 0504       ORR              R5,R5,R4    ; get bits 22-1
 3974 000021AA BF00            NOP
 3975 000021AC F7FE F952       BL               OVER        ; a offset a
 3976 000021B0 F7FE F9A4       BL               PLUS        ; a target-4
 3977 000021B4 F7FE F9F4       BL               CELLP       ; a target
 3978 000021B8 F7FF FF64       BL               TNAME       ; a na/0 --, is it 
                                                            a name?
 3979 000021BC F7FE FA32       BL               QDUP        ; name address or z



ARM Macro Assembler    Page 83 


                                                            ero
 3980 000021C0 F7FE F86E       BL               QBRAN
 3981 000021C4 20000000        DCD              DECOM1-MAPOFFSET
 3982 000021C8 F7FE FF06       BL               SPACE       ; a na
 3983 000021CC F7FF FF84       BL               DOTID       ; a --, display nam
                                                            e
 3984 000021D0         ; BL RFROM   ; a
 3985 000021D0 F7FE F924       BL               DROP
 3986 000021D4                 _UNNEST
  295 000021D4 F852 FB04       LDMFD            R2!,{PC}
 3987 000021D8         DECOM1                               ;BL RFROM  ; a
 3988 000021D8 F7FE F88A       BL               AT          ; data
 3989 000021DC F7FE FFB0       BL               UDOT        ; display data
 3990 000021E0                 _UNNEST
  295 000021E0 F852 FB04       LDMFD            R2!,{PC}
 3991 000021E4 F7FE FFAC 
                       DECOM2  BL               UDOT
 3992 000021E8         ; BL RFROM
 3993 000021E8 F7FE F918       BL               DROP
 3994 000021EC                 _UNNEST
  295 000021EC F852 FB04       LDMFD            R2!,{PC}
 3995 000021F0         
 3996 000021F0         ;   WORDS ( -- )
 3997 000021F0         ; Display the names in the context vocabulary.
 3998 000021F0         
 3999 000021F0 20000000        DCD              _DECOM-MAPOFFSET
 4000 000021F4 05      _WORDS  DCB              5
 4001 000021F5 57 4F 52 
              44 53            DCB              "WORDS"
 4002 000021FA 00 00           ALIGN            4
 4003 000021FC         WORDS
 4004 000021FC                 _NEST
  290 000021FC F842 ED04       STMFD            R2!,{LR}
 4005 00002200 F7FE FF2A       BL               CR
 4006 00002204 F7FE FB4A       BL               CNTXT
 4007 00002208 F7FE F872       BL               AT          ;only in context
 4008 0000220C         WORS1
 4009 0000220C F7FE FA0A       BL               QDUP        ;?at end of list
 4010 00002210 F7FE F846       BL               QBRAN
 4011 00002214 20000000        DCD              WORS2-MAPOFFSET
 4012 00002218 F7FE F908       BL               DUPP
 4013 0000221C F7FE FEDC       BL               SPACE
 4014 00002220 F7FF FF5A       BL               DOTID       ;display a name
 4015 00002224 F7FE F9C6       BL               CELLM
 4016 00002228 F7FE F862       BL               AT
 4017 0000222C F7FF BFEE       B.W              WORS1
 4018 00002230         WORS2
 4019 00002230                 _UNNEST
  295 00002230 F852 FB04       LDMFD            R2!,{PC}
 4020 00002234                 ALIGN            4
 4021 00002234         
 4022 00002234         ;*******************************************************
                       *******************
 4023 00002234         ; cold start
 4024 00002234         
 4025 00002234         ;   VER  ( -- n )
 4026 00002234         ; Return the version number of this implementation.
 4027 00002234         
 4028 00002234         ; DCD _WORDS-MAPOFFSET



ARM Macro Assembler    Page 84 


 4029 00002234         ;_VERSN DCB  3
 4030 00002234         ; DCB "VER"
 4031 00002234         ; ALIGN 4 
 4032 00002234         VERSN
 4033 00002234                 _NEST
  290 00002234 F842 ED04       STMFD            R2!,{LR}
 4034 00002238                 _DOLIT
  300 00002238 F7FE F80C       BL               DOLIT
 4035 0000223C 00000721        DCD              VER*256+EXT
 4036 00002240                 _UNNEST
  295 00002240 F852 FB04       LDMFD            R2!,{PC}
 4037 00002244         
 4038 00002244         ;   hi   ( -- )
 4039 00002244         ; Display the sign-on message of eForth.
 4040 00002244         
 4041 00002244 20000000        DCD              _WORDS-MAPOFFSET
 4042 00002248 02      _HI     DCB              2
 4043 00002249 48 49           DCB              "HI"
 4044 0000224B 00              ALIGN            4
 4045 0000224C         HI
 4046 0000224C                 _NEST
  290 0000224C F842 ED04       STMFD            R2!,{LR}
 4047 00002250 F7FE FF02       BL               CR          ;initialize I/O
 4048 00002254 F7FE FF38       BL               DOTQP
 4049 00002258 0D              DCB              13
 4050 00002259 73 74 6D 
              33 32 65 
              46 6F 72 
              74 68 20 
              76               DCB              "stm32eForth v" ;model
 4051 00002266 00 00           ALIGN            4
 4052 00002268 F7FE FACE       BL               BASE
 4053 0000226C F7FE F840       BL               AT
 4054 00002270 F7FE FDB0       BL               HEX         ;save radix
 4055 00002274 F7FF FFDE       BL               VERSN
 4056 00002278 F7FE FD26       BL               BDIGS
 4057 0000227C F7FE FD4A       BL               DIG
 4058 00002280 F7FE FD48       BL               DIG
 4059 00002284                 _DOLIT
  300 00002284 F7FD FFE6       BL               DOLIT
 4060 00002288 0000002E        DCD              '.'
 4061 0000228C F7FE FD2C       BL               HOLD
 4062 00002290 F7FE FD50       BL               DIGS
 4063 00002294 F7FE FD76       BL               EDIGS
 4064 00002298 F7FE FEC6       BL               TYPEE       ;format version num
                                                            ber
 4065 0000229C F7FE FAB4       BL               BASE
 4066 000022A0 F7FE F81C       BL               STORE
 4067 000022A4 F7FE FED8       BL               CR
 4068 000022A8                 _UNNEST                      ;restore radix
  295 000022A8 F852 FB04       LDMFD            R2!,{PC}
 4069 000022AC         
 4070 000022AC         ;   COLD ( -- )
 4071 000022AC         ; The high level cold start sequence.
 4072 000022AC         
 4073 000022AC 20000000        DCD              _HI-MAPOFFSET
 4074 000022B0 04      LASTN   DCB              4
 4075 000022B1 43 4F 4C 
              44               DCB              "COLD"



ARM Macro Assembler    Page 85 


 4076 000022B5 00 00 00        ALIGN            4
 4077 000022B8         COLD
 4078 000022B8         ; Initiate Forth registers
 4079 000022B8 F644 7300       MOVW             R3,#0x4F00  ; user area
 4080 000022BC F2C2 0300       MOVT             R3,#0x2000  ; No remap for F103
                                                            
 4081 000022C0 461A            MOV              R2,R3       ; return stack
 4082 000022C2 F5A2 7180       SUB              R1,R2,#0x100 ; data stack
 4083 000022C6 F04F 0500       MOV              R5,#0       ; tos
 4084 000022CA BF00            NOP
 4085 000022CC                 _NEST
  290 000022CC F842 ED04       STMFD            R2!,{LR}
 4086 000022D0         COLD1
 4087 000022D0                 _DOLIT
  300 000022D0 F7FD FFC0       BL               DOLIT
 4088 000022D4 200001B4        DCD              UZERO-MAPOFFSET
 4089 000022D8                 _DOLIT
  300 000022D8 F7FD FFBC       BL               DOLIT
 4090 000022DC 20004F00        DCD              UPP
 4091 000022E0                 _DOLIT
  300 000022E0 F7FD FFB8       BL               DOLIT
 4092 000022E4 00000040        DCD              ULAST-UZERO
 4093 000022E8 F7FE FC60       BL               MOVE        ;initialize user ar
                                                            ea
 4094 000022EC F7FF FAC2       BL               PRESE       ;initialize stack a
                                                            nd TIB
 4095 000022F0 F7FE FA7E       BL               TBOOT
 4096 000022F4 F7FE FC32       BL               ATEXE       ;application boot
 4097 000022F8 F7FF FD76       BL               OVERT
 4098 000022FC F7FF BACA       B.W              QUIT        ;start interpretati
                                                            on
 4099 00002300                 ALIGN            4
 4100 00002300         COLD2
 4101 00002300         CTOP
 4102 00002300 FFFFFFFF        DCD              0XFFFFFFFF  ; keep CTOP even
 4103 00002304                 END
Command Line: --debug --diag_suppress=9931 --cpu=Cortex-M3 --apcs=interwork --d
epend=.\objects\stm32eforth725.d -o.\objects\stm32eforth725.o -I.\RTE\_Target_1
 -IC:\Users\Dwight\Documents\stuff\ARM\PACK\ARM\CMSIS\5.0.1\Device\ARM\ARMCM3\I
nclude -IC:\Users\Dwight\Documents\stuff\ARM\CMSIS\Include --predefine="__EVAL 
SETA 1" --predefine="__UVISION_VERSION SETA 524" --predefine="ARMCM3 SETA 1" --
list=.\listings\stm32eforth725.lst stm32eforth725.s
